2019,rigorous design cyber-physical system - linking physicality computation,cyber-physical system developed active research field broad range challenge research direction going requirement implementation simulation well validation verification guarantee essential property survey paper focus exclusively following fundamental issue link physicality computation continuous time-space dynamic discrete untimed one consider cyber-physical system design flow involves following three main step  cyber-physical system modeling  discretization executability  simulation implementation reviewand strive provide insight possible approach addressingthe key issue three step
2019,trust autonomous system boundary risk,trust autonomous system question arises urgently perspective massive use ai-enabled technique autonomous system critical system intended replace human complex organizationswe propose framework tackling question bringing reasoned principled answer first discus classification different type knowledge according truthfulness generality show basic difference similarity knowledge produced managed human computer respectively particular discus difference system development process knowledge affect truthfulnessto determine whether trust system perform given task study interplay two main factor  degree trustworthiness achievable system performing task  degree criticality task simple automated system trusted trustworthiness match desired degree criticality nonetheless acceptance autonomous system perform complex critical task additionally depend ability exhibit symbiotic behavior allow harmonious collaboration human operator discus objective subjective factor determine balance division work autonomous system human operatorswe conclude emphasizing role autonomous system depend decision trust cannot making choice wisely go hand hand compliance principle promulgated policy-makers regulator rooted ethical technical criterion
2019,logic-inspired approach reconfigurable system modelling,software system reached level complexity demand new approach software design order support continuous adaptation change internal external environment implies capability capturing design-time dynamic feature system composed large number interacting component order reduce risk undesirable interference unpredictable outcome l-dream framework  relies logic-based modelling language expressive enough capture different approach system coordination reconfiguration dynamicity l-dream component “loose” structure combined flexibility adopted coordination language  framework used model many different computational paradigm offering readable syntax easy understand
2019,autonomous system - architectural characterization,concept autonomy key iot vision promising increasing integration smart service system minimizing human intervention vision challenge capability build complex open trustworthy autonomous system lack rigorous common semantic framework autonomous system remarkable debate autonomous vehicle focus almost exclusively ai learning technique ignores many equally important autonomous system design issuesautonomous system involve agent object coordinated common environment collective behavior meet set global goal propose general computational model combining system architecture model agent model architecture model allows expression dynamic reconfigurable multi-mode coordination component agent model consists five interacting module implementing one characteristic function perception reflection goal management planning self-adaptation determines concept autonomic complexity accounting specific difficulty build autonomous systemswe emphasize main characteristic autonomous system ability handle knowledge adaptively respond environment change advocate autonomy associated functionality specific technique machine learning essential autonomy although meet small portion need implied autonomous system designwe conclude autonomy kind broad intelligence building trustworthy optimal autonomous system go far beyond ai challenge
2019,checking deadlock-freedom parametric component-based system,propose automated method computing inductive invariant used proving deadlock freedom parametric component-based system method generalizes approach computing structural trap invariant bounded parametric system general architecture symbolically extract trap invariant interaction formula defining system architecture paper present theoretical foundation method including new  first order monadic logic prof soundness also report preliminary experimental evaluation several textbook example
2018,early validation system requirement design correctness-by-construction,highlights•we provide template conceptual model requirement specification•we give interpretation template using formal property patterns•we show property pattern enforced architecture styles•all safety property case study enforced verified inspection•the design model modeling/verification utility onlineabstractearly validation requirement aim reduce need high-cost validation testing corrective measure late development stage work introduces systematic process unambiguous specification system requirement guided derivation formal property implied system ’s structure behavior conjunction external stimulus rigorous design take place incremental construction model using bip  component framework allows building complex design composing simpler reusable design enforcing given property property neither enforced verified model refined certain requirement revised validated model provides evidence requirements’ consistency design correctness process semi-automated new tool existing verification tool effectiveness evaluated set requirement control software cubeth nanosatellite extract software requirement low earth orbit observation satellite experience obtained  helped identifying open challenge applying method industrial context challenge concern domain knowledge representation expressiveness used specification language library reusable design scalability
2018,global local deadlock freedom bip,present criterion checking local global deadlock freedom finite state system expressed bip component-based framework constructing complex distributed system criterion evaluated model-checking set subsystem overall large system satisfied small subsystem implies deadlock-freedom overall system satisfied re-evaluate larger subsystem improves accuracy check subsystem checked becomes entire system criterion becomes complete deadlock-freedom hence criterion fails decide deadlock freedom computational limitation state-space explosion set subsystem become large method thus combine possibility fast response together theoretical completeness criterion deadlock freedom contrast incomplete principle may fail decide deadlock freedom even unlimited computational resource available also criterion certifies freedom local deadlock subsystem deadlocked rest system executes criterion certify freedom global deadlock present experimental  dining philosopher multi-token-based resource allocation system subsumes several data arbiter scheduler including milner’s token-based scheduler
2018,programming dynamic reconfigurable system,dr-bip extension bip component framework intended programming reconfigurable system encompassing various aspect dynamism relies architectural motif structure architecture system coordinate reconfiguration runtime architectural motif defines set interacting component evolve according reconfiguration rule dr-bip dynamism captured interplay dynamic change three independent direction  organization interaction instance component given configuration  reconfiguration mechanism allowing creation/deletion component management interaction according given architectural motif  migration component predefined architectural motif characterizes dynamic execution environment paper lay formal foundation dr-bip illustrates expressiveness example discus avenue dynamic reconfigurable system design
2018,dream dynamic reconfigurable architecture modeling,modern system evolve unpredictable environment continuously adapt behavior changing condition “dream”  framework designed modeling reconfigurable dynamic system provides rule-based language inspired interaction logic expressive easy use encompassing aspect dynamicity including parametric multi-modal coordination creation/deletion component well mobility additionally allows description endogenous/modular exogenous/centralized coordination style sound transformation one style dream framework implemented form java api bundled execution engine allows develop runnable system combining expressiveness rule-based notation together flexibility widespread programming language
2018,four exercise programming dynamic reconfigurable system methodology solution dr-bip,dr-bip extension bip component framework intended programming reconfigurable system encompassing various aspect dynamism system built instance type component characterized interface latter consist set port data exchanged interaction take place dr-bip allows description parametric exogenous interaction reconfiguration operation naturally model self-organization mobility component system composed several architecture motif motif consisting set component instance coordination rule use motif allows disciplined management dynamically changing coordination rule paper illustrates basic concept dr-bip collection four non-trivial exercise different application area fault-tolerant system mobile system autonomous system presented solution show dr-bip minimal expressive allowing concise natural description non-trivial system
2018,system design era iot - meeting autonomy challenge,advent iot great opportunity reinvigorate computing focusing autonomous system design certainly raise technology question importantly requires building new foundation systematically integrate innovative  needed face increasing environment mission complexitya key idea compensate lack human intervention adaptive control instrumental system resilience allows coping uncertainty managing mixed criticality service proposal knowledge-based design seek compromise preserving rigorousness despite fact essential property cannot guaranteed design time make knowledge generation application primary concern aim fully seamlessly incorporate adaptive control paradigm system architecture
2017,configuration logic modeling architecture style,highlights•we introduce study propositional configuration logic  well first- second-order extensions•we study three class pcl formula downward-closed upward-closed union-closed formulas•we define full normal form unique pcl formula•we describe two method checking satisfaction pcl formulas•we provide full proof  example illustrating specification architecture stylesabstractwe study framework specification architecture style family architecture involving common set type component coordination mechanism framework combine two logic  interaction logic specification architecture generic coordination scheme involving configuration interaction typed component  configuration logic specification architecture style set interaction configuration presented  build previous work architecture modeling bip show propositional interaction logic extended corresponding configuration logic adding new operator set interaction configuration addition usual set-theoretic operator configuration logic equipped coalescing operator + express combination configuration set provide complete axiomatization propositional configuration logic well decision procedure checking architecture satisfies given logical specification allow genericity specification study first-order second-order extension propositional configuration logic first-order logic formula involve quantification component variable second-order logic formula involve additional quantification set component provide several example illustrating application  characterization various architecture style also provide experimental evaluation using maude rewriting system implement decision procedure propositional flavor logic
2017,functional bip embedding connector functional programming language,paper present theoretical foundation functional language implementation behaviour–interaction–priority  introduce set connector combinators describing synchronisation data transfer priority dynamicity principled way static type system ensures soundness connector semanticsbased foundation implemented bip embedded domain specific language  haskell scala dsl embedding allows programmer benefit full expressive power high-level language clear separation behaviour coordination inherited bip lead system arguably simpler maintain reason compared approach
2016,general framework architecture composability,architecture depict design principle paradigm understood allow thinking higher plane avoiding low-level mistake provide mean ensuring correctness construction enforcing global property characterizing coordination component architecture considered operator applied set componentsbb build composite componentaameeting characteristic propertyφφ architecture composability basic common problem faced system designer paper propose formal general framework architecture composability based associative commutative idempotent architecture composition operator⊕ main result two architecture   enforce respectively safety propertiesφφandφφ architecturea⊕aenforces propertyφ∧φ property preserved architecture composition also establish preservation liveness property architecture composition presented  illustrated running example case study
2016,component-based verification using incremental design invariant,propose invariant-based technique efficient verification safety deadlock-freedom property component-based system component interaction described bip language global invariant composite component obtained combining local invariant constituent component interaction invariant take interaction account study new technique computing interaction invariant technique incremental ie interaction invariant composite hierarchically structured component computed reusing invariant constituent formalize incremental construction component bip language process building progressively complex component adding interaction  atomic component provide sufficient condition ensuring preservation invariant new interaction added condition satisfied propose method generating new invariant incremental manner reusing existing invariant constituent incremental construction reuse existing invariant reduces considerably overall verification effort technique implemented d-finder toolset among experiment conducted capable verifying safety property deadlock-freedom sub-systems functional level dala autonomous robot work go far beyond capacity existing monolithic verification tool
2016,parameterized system bip design model checking,bip component-based framework system design important industrial application bip built three pillar behavior interaction priority paper introduce first-order interaction logic  extends bip system parameterized number component show foil capture classical parameterized architecture token-passing ring clique identical component communicating rendezvous broadcast client-server system although bip framework includes efficient verification tool statically-defined system none available parameterized system unbounded number component parameterized model checking literature contains wealth technique system classical architecture however application  requires deep understanding parameterized model checking technique underlying mathematical model overcome difficulty introduce framework automatically identifies parameterized model checking technique applicable bip design knowledge first framework allows one apply prominent parameterized model checking  systematic way
2016,architecture-based design satellite on-board software case study,case study apply architecture-based design approach control software cubeth satellite architecture mean ensuring global coordination property thus achieving correctness complex system construction illustrate following three step design approach  definition domain-specific taxonomy architecture style  design software model applying architecture enforce required property  deadlock-freedom analysis resulting model provide taxonomy architecture style satellite on-board software formally defined architecture diagram bip component-based framework show architecture instantiated diagram applied set atomic component deadlock-freedom resulting model verified using dfinder bip tool-set provide additional validation approach using nuxmv model checker verify property enforced architecture indeed satisfied model
2016,architecture diagram graphical language architecture style specification,architecture style characterise family architecture sharing common characteristic recently proposed configuration logic architecture style specification paper study graphical notation enhance readability easiness expression study simple architecture diagram expressive extension interval architecture diagram type diagram present semantics set necessary sufficient consistency condition method allows characterise compositionally specified architecture provide several example illustrating application  also present polynomial-time algorithm checking given architecture conforms architecture style specified diagram
2015,system design automation challenge limitation,electronic design automation  enabled integrated circuit industry sustain exponentially increasing product complexity growth today maintaining consistent product development timeline cost argue success eda-based design relies application four interrelated principle  separation concern implying decomposition design flow step step dealing specific aspect namely user requirement functional design implementation  component-based design enabling reasoned construction complex system composition component  semantic coherency meaning description used successive design step semantically related adequate semantic mapping implies particular formalism used design step rooted well-defined semantics  correctness construction meaning possible guarantee essential property designed system incrementally compositionally along design process paper discus extent eda paradigm adapted general mixed hardware/software  system design application principle present overview problem raised rigorous system design mixed hw/sw system present unified abstract framework addressing problem identifying main research avenue
2015,optimized distributed implementation multiparty interaction restriction,using high level coordination primitive allows enhanced expressiveness component-based framework cope inherent complexity present-day system design nonetheless distributed implementation raise multiple issue regarding correctness runtime performance final implementation propose novel approach distributed implementation multiparty interaction subject scheduling constraint expressed priority rely new composition operator named restriction whose semantics dynamically restricts set interaction allowed execution depending current state show operator provides natural encoding priority provide knowledge-based optimization modifies restriction operator avoid superfluous communication final implementation complete framework enhanced conflict resolution protocol natively implement restriction prototype implementation allows u compare performance different optimization
2015,theory agenda component-based design,aim paper present theory agenda component-based design based  motivated development bip component framework identify open problem discus research direction focus proposing semantically sound theoretical general framework modelling component-based system property behavioural architectural well achieving correctness using scalable specific techniqueswe discus problem composing component proposing concept glue set stateless composition operator defined certain type operational semantics rule provide overview  glue expressiveness minimality show interaction associated transfer data described using connector particular dynamic connector defined extension static connector present two approach achieving correctness component-based system one compositional inference global property composite component property constituent interaction constraint implied composition operator using composing architecture enforce specific coordination property finally discus recent  architecture specification studying two type logic  interaction logic specification set allowed interaction  configuration logic characterisation architecture style
2015,configuration logic modelling architecture style,study framework specification architecture style family architecture involving common set type component coordination mechanism framework combine two logic  interaction logic specification architecture generic coordination scheme involving configuration interaction typed component  configuration logic specification architecture style set interaction configuration presented  build previous work architecture modelling bip show propositional interaction logic extended corresponding configuration logic adding new operator set interaction configuration provide complete axiomatisation propositional configuration logic well decision procedure checking architecture satisfies given logical specification allow genericity specification study first-order second-order extension propositional logic provide example illustrating application  characterization architecture style finally provide experimental evaluation using maude rewriting system implement decision procedure propositional logic
2014,architecture internalisation bip,consider two approach building component-based system call respectively architecture-based architecture-agnostic former consists describing coordination constraint purely declarative manner parametrizable glue operator provides higher abstraction level consequently stronger correctness construction latter us simple fixed coordination primitive spread across component behaviour error-prone allows performance optimisation study architecture internalisation leading architecture-based system equivalent architecture-agnostic one focusing particular component-based system described bip bip us connector hierarchical composition component study connector internalisation three step  introduce study property interaction expression represent combined information effect interaction show powerful tool specifying analysing structured interaction  formalize connector semantics bip using interaction expression formalization prof mathematically rigorous concise  introduce t/b component model provide semantics preserving translation bip model translation compositional preserve structure source model  illustrated simple example java implementation evaluated two case study
2014,toward system design science,design universal concept link immaterial world concept physical world essential area human experience expertise knowledge deal ability mold environment satisfy material spiritual needsdesign two different connotation one simply plan pattern assembling object constituting given artifact creative process devising plan pattern carrying produce artifact paper focus second interpretation ultimately interested putting design scientific basis toward end focus articulating new structure design process believe support goal
2014,keynote talk iii framework modeling architecture property,architecture common mean organizing coordination component order build complex system make manageable despite progress state art past decade still lot foundational issue remain unsolved talk present general framework modeling architecture property
2014,rigorous system design,advocate rigorous system design coherent accountable model-based process leading requirement implementation present state art system design discus current limitation identify possible avenue overcoming rigorous system design flow  defined formal accountable iterative process composed step based four principle  separation concern  component-based construction  semantic coherency  correctness-by-construction show combined application principle allows definition rigorous design flow clearly identifying human intervention ingenuity needed resolve design choice well activity supported tool automate tedious error-prone task implementable system model progressively derived source-to-source automated transformation single host component-based language rooted well-defined semantics using single modeling language throughout design flow enforces semantic coherency correct-by-construction technique allow well-known limitation posteriori verification overcome ensure accountability possible explain design step among requirement satisfied may satisfiedthe presented view amply implemented bip  component framework substantiated numerous experimental  showing relevance feasibility  show particular distributed implementation generated bip model multiparty interaction application correct-by-construction transformation  conclude discussion advocating system-centric vision computing identifying possible link discipline emphasizing centrality system design
2013,rigorous implementation real-time system - theory application,correct efficient implementation general real-time application remains much open problem key issue meeting timing constraint whose satisfaction depends feature execution platform particular speed existing rigorous implementation technique applicable specific class system example periodic task time-deterministic systemswe present general model-based implementation method real-time system based use two modelsan abstract model representing behaviour real-time software timed automaton describes user-defined platform-independent timing constraint transition timeless correspond execution statement real-time softwarea physical model representing behaviour real-time software running given platform obtained assigning execution time transition abstract modela necessary condition implementability time-safety  execution sequence physical model also execution sequence abstract model time-safety simply mean platform fast enough meet timing requirement execution time action known exactly time-safety checked worst-case execution time action making assumption time-robustness time-safety preserved speed execution platform increaseswe show rule physical model time-robust time-determinism sufficient condition time-robustness given piece real-time software execution platform corresponding time-robust model define execution engine coordinate execution application software meet timing constraint furthermore case non-robustness execution engine detect violation time-safety stop executionwe implemented execution engine bip program real-time constraint validated implementation method two case study experimental  module robotic application show cpu utilisation size model reduced compared existing implementation experimental  adaptive video encoder also show lack time-robustness may seriously degrade performance increasing platform execution speed
2013,introduction special section rigorous embedded system design,n/a
2013,model-based implementation parallel real-time system,one main challenge design real-time system derive correct efficient implementation platform-independent specificationswe present general implementation method application represented abstract model consisting set interacting component abstract model executes sequentially component interaction atomically instantaneously transform abstract model physical model representing execution platform physical model take account execution time interaction allow parallel execution obtained breaking atomicity interaction using notion partial state provide safety condition guaranteeing semantics abstract model preserved physical model provide base implementing parallel execution engine coordinating execution component implementation validated real robotic application benchmark show net improvement performance compared sequential implementation
2013,abstract framework deadlock prevention bip,present sound incomplete criterion checking deadlock freedom finite state system expressed bip component-based framework construction complex distributed system since deciding deadlock-freedom finite-state concurrent system pspace-complete criterion give completeness return tractability evaluation criterion evaluated model-checking subsystem overall large system size subsystem depends local topology direct interaction component number component overall systemwe present two experiment method compare favorably existing approach example verifying deadlock freedom dining philosphers method show linear increase computation time number philosopher whereas method  show super-linear increase due state-explosion
2012,framework automated distributed implementation component-based model,although distributed system widely used nowadays implementation deployment still time-consuming error-prone hardly predictable task paper propose method producing automatically efficient correct-by-construction distributed implementation model application software behavior interaction priority  bip well-founded component-based framework encompassing high-level multi-party interaction synchronizing component  dynamic priority scheduling interaction method transforms arbitrary bip model send/receive bip model directly implementable distributed execution platform transformation consists  breaking atomicity action component replacing synchronous multiparty interaction asynchronous send/receive interaction  inserting distributed controller coordinate execution interaction according user-defined partition interaction  adding distributed algorithm handling conflict controller obtained send/receive bip model proven observationally equivalent corresponding initial model hence functional property initial bip model preserved construction implementation moreover obtained send/receive bip model used automatically derive distributed executable code proposed method fully implemented currently possible generate c++ implementation  tcp socket conventional distributed communication  mpi multi-processor platform  posix thread deployment multi-core platform present four case study report experimental  different design choice including partition interaction choice algorithm distributed conflict resolution
2012,2010 cav award announcement, cav  award awarded kenneth l mcmillan cadence research laboratory series fundamental contribution resulting significant advance scalability model checking tool annual award recognizes specific fundamental contribution series outstanding contribution cav field
2012,system architecture design engineering verification - practice research research practice,area computer science interaction boundary science engineering blurred system area cross fertilization direction system panel explore past present future relationship system research engineering practicethey discus relationship system research engineering practice system innovation emanating industry become invention academic research stop science become engineering practice-driven research impact real world real world reflect back foundation form technology create research challenge manner applied research give solid base developmentthey surmise future system research fundamental challenge posed scale today cloud computing system mega-size data center organize software large-scale distributed execution mega-ton line code new opportunity enabled novel technology like flash memory transactional memory integrate hand-in-hand design software architecture
2012,optimized distributed implementation multiparty interaction observation,using high level coordination primitive allows enhanced expressiveness component-based framework cope inherent complexity present-day system design nonetheless distributed implementation raise multiple issue regarding correctness runtime performance final implementation propose novel approach distributed implementation multiparty interaction subject scheduling constraint expressed priority rely new composition operator semantics combine multiparty interaction observation show model provides natural encoding priority moreover used intermediate step towards provably correct optimized distributed implementation
2012,knowledge-based distributed conflict resolution multiparty interaction priority,distributed decentralized implementation system communicating process raise non-trivial problem correct execution multiparty interaction subject priority rule requires sophisticated mechanism runtime conflict detection resolution propose method detection false conflict combine partial observation system’s state apriori knowledge extracted invariant propose heuristic determining optimal set observation leading implementation particular guarantee provide preliminary experimental  implementation method bip framework
2012,trustworthy computing system,n/a
2012,rigorous design cyber-physical system,cyber-physical system  break traditional system desktop computer server various way  instrumented order interact physical environment  interconnected allow interaction people object entirely new mode  must smart ensure predictability event optimal use resource currently lack theory method tool building cost-effectively trustworthy cps talk show cps challenge capability ensuring trustworthiness advocate coherent scientific foundation cps design discus three main scientific challenge  marrying physicality computation  correctness-by-construction  adaptivity meeting challenge prerequisite moving empirical rigorous design formalized sound scalable accountable process leading trustworthy optimized implementation  application software  model execution infrastructure  model physical environment soundness achieved translation language used along design process single expressive host language rooted clean operational semantics scalability accountability ensured using correct-by-construction source-to-source transformation host language talk conclude overview bip rigorous design flow developed verimag epfl
2012,modeling dynamic architecture using dy-bip,dynamic architecture interaction component evolve execution essential modern computing system web-based system reconfigurable middleware wireless sensor network fault-tolerant system currently lack rigorous framework modeling development implementation propose dy-bip dynamic extension bip component framework rooted rigorous operational semantics supporting powerful high-level set primitive describing dynamic interaction expressed symbolic constraint offered interacting component computed efficiently execution engine present experimental  validate effectiveness dy-bip show significant advantage using static architecture model
2012,rigorous component-based system design - invited paper,rigorous system design requires use single powerful component framework allowing representation designed system different level detail application software implementation essential ensuring overall coherency correctness paper introduces rigorous design flow based bip  component framework  design flow relies several tool-supported source-to-source transformation allowing progressively correctly transform high level application software towards efficient implementation specific platform
2011,vision computer science - system perspective,n/a
2011,priority scheduling distributed system based model checking,priority used control execution system meet given requirement optimal use resource eg using scheduling policy distributed system hard find efficient implementation priority express constraint global state implementation may incur considerable overheadour method based performing model checking knowledge property allows identifying local information process sufficient schedule execution high priority transition result model checking program transformed react upon knowledge point transformed version priority us gathered information knowledge limit enabledness transition match approximates original specification priority
2011,rigorous component-based system design using bip framework,autonomous robot case study illustrates use behavior interaction priority  component framework unifying semantic model ensure correctness essential system design property
2011,method tool component-based system design,traditional engineering discipline civil mechanical engineering based solid theory building artefact predictable behavior lifetime contrast lack similar constructivity  computing system engineering computer science provides partial answer particular system design problem exception predictability impossible guarantee design time therefore posteriori verification remains mean ensuring correct operation
2011,time-predictable composable architecture dependable embedded system,embedded system must interact real-time environment timely dependable fashion embedded-systems architecture design process consider non-functional property time energy reliability afterthought functional correctness  achieved result embedded system often fragile real-time behaviour take longer design test planned several technique proposed make real-time embedded system robust ease process designing embedded systemsprecision-timed time-triggered architecture make time first-class citizen system designdeterministic architecture repeatable timing behaviourcomposability guarantee -functional behaviour component unchanged integration larger systemthe tutorial present state art major approach time-predictability composability bip tta pret ptides giotto compsoc
2011,component assembly context manycore,present component-based software design flow building parallel application running top manycore platform flow based bip - behaviour interaction priority - component framework associated toolbox provides full support modeling application software validation functional correctness modeling performance analysis system-level model code generation deployment target manycore platform paper detail step design flow design flow illustrated modeling deployment two application cholesky factorization mjpeg decoding mparm arm-based manycore platform emphasize merit design flow notably fast performance analysis well code generation efficient deployment manycore platform
2011,rigorous system design bip approach,rigorous system design requires use single powerful component framework allowing representation designed system different level detail application software implementation essential ensuring overall coherency correctness paper introduces rigorous design flow based bip  component framework  design flow relies several tool-supported source-to-source transformation allowing progressively correctly transform high level application software towards efficient implementation specific platform
2011,rigorous system level modeling analysis mixed hw/sw system,grand challenge complex embedded system design developing method tool modeling analyzing behavior application software running multicore distributed platform propose rigorous method tool chain allows obtain faithful model representing behavior mixed hardware/software system model application software model underlying hardware architecture system model simulated analyzed validation functional extra-functional property tool chain us dol  frontend specifying application software hardware architecture bip  modeling analysis framework illustrated construction system model mjpeg mpeg decoder application running mparm multicore architecture
2011,d-finder 2 towards efficient correctness incremental design,d-finder  new tool deadlock detection concurrent system based effective invariant computation approximate effect interaction among module part bip framework provides various tool centered component-based language incremental design presented tool share theoretical root previous implementation completely rewritten take advantage new version bip various new  theory invariant computation improvement demonstrated comparison previous work report new  practical case study
2011,synthesizing glue operator glue constraint construction component-based system,study glue operator used component-based framework obtain system composition atomic component described labeled transition system  glue operator map tuples lts lts restrict behavior argument performing memoryless coordination previous paper proposed simple format so rule capture particular glue operator known framework cc sccs csp bipthis paper study new way characterizing glue operator boolean glue constraint interaction  state coordinated component provide so format glue allows natural correspondence glue operator glue constraint correspondence used automated synthesis glue operator implementing given glue constraint focusing property bear computation reduce hard  problem synthesizing controller tractable one example paper show property natural expressed glue constraint straightforward manner finally compare expressiveness proposed formalism glue used bip framework discus possible application
2010,causal semantics algebra connector,algebra connector ac used model structured interaction bip component framework term connector relation describing synchronization constraint port component-based system connector structured combination two basic synchronization protocol port rendezvous broadcastin previous paper studied interaction semantics ac defines meaning connector set interaction semantics reduces broadcast set possible interaction thus blur distinction rendezvous broadcast lead exponentially complex model cannot basis efficient implementation furthermore induced semantic equivalence congruencefor subset ac propose new causal semantics reduce broadcast set rendezvous explicitly model causal dependency relation port algebra causal interaction tree formalizes subset set term generated interaction set port p using two operator causality operator parallel composition operator term set tree successor relation represents causal dependency interaction interaction participate global interaction father participates show causal semantics consistent interaction semantics semantic equivalence congruence furthermore defines isomorphism subset acfinally define causal interaction tree boolean representation term causal rule representation used manipulation simplification well synthesizing connector
2010,2009 cav award announcement, cav  award presented seven individual made major advance creating high-performance boolean satisfiability solver annual award recognizes specific fundamental contribution series outstanding contribution cav field
2010,compositional verification component-based system application,author present compositional method verification component-based system described subset behaviour-interaction-priority language encompassing multi-party interaction without data transfer method based use two kind invariant component invariant over-approximations component reachability set interaction invariant global constraint state component involved interaction method implemented d-finder tool applied checking deadlock-freedom experimental  non-trivial example show method allows either prove deadlock-freedom identify deadlock configuration analysed using state-space exploration
2010,source-to-source architecture transformation performance optimization bip,behavior interaction priority  component framework constructing system set atomic component using two kind composition operator interaction priority paper present method transforms interaction component-based program bip generates functionally equivalent program method based successive application three type source-to-source transformation flattening component flattening connector composition atomic component show system transformation confluent terminates exhaustive application transformation bip component transformed equivalent monolithic component component efficient standalone c++ code generated method combine advantage component-based description clarity incremental construction reasoning possibility generate efficient monolithic code integrated design methodology bip successfully applied two non trivial example described paper
2010,knowledge based scheduling distributed system,priority used control execution system meet given requirement optimal use resource eg using scheduling policy distributed system hard find efficient implementation priority express constraint global state implementation may incur considerable overheadour method based performing model checking knowledge property allows identifying local information process sufficient schedule execution high priority transition result model checking program transformed react upon knowledge point transformed version priority us gathered information knowledge limit enabledness transition match approximates original specification priority
2010,component-based construction heterogeneous real-time system bip,present framework component-based construction real-time system framework based bip  semantic model characterized layered representation component compound component obtained composition atomic component specified behaviour interface using connector dynamic priority connector describe structured interaction atomic component term two basic protocol rendezvous broadcast dynamic priority used select amongst possible interaction – particular express scheduling policy
2010,high-level component-based model distributed implementation,although distributed system widely used nowadays implementation deployment still time-consuming error-prone hardly predictive task paper propose methodology producing automatically efficient correct-by-construction distributed implementation starting high-level model application software bip bip  component-based framework formal semantics rely multi-party interaction synchronizing component methodology transforms arbitrary bip model send/receive bip model directly implementable distributed execution platform transformation consists  breaking atomicity action atomic component replacing strong synchronization asynchronous send/receive interaction  inserting several distributed controller coordinate execution interaction according user-defined partition  augmenting model distributed algorithm handling conflict controller preserving observational equivalence initial model currently possible generate send/receive model stand-alone c++ implementation using either tcp socket conventional communication mpi implementation deployment multi-core platform method fully implemented report concrete  obtained different scenario
2010,model-based implementation real-time application,correct efficient implementation general real-time application remains far open problem key issue meeting timing constraint whose satisfaction depends feature execution platform particular speed existing rigorous implementation technique applicable specific class system eg periodic task time deterministic systemswe present general model-based implementation method real-time system based use two modelsan abstract model representing behavior real-time software timed automaton latter describes user-defined platform-independent timing constraint transition timeless correspond execution statement real-time softwarea physical model representing behavior real-time software running given platform obtained assigning execution time transition abstract modela necessary condition implementability time-safety  execution sequence physical model also execution sequence abstract model time-safety simply mean platform fast enough meet timing requirement execution time action known exactly time-safety checked worst-case execution time action making assumption time-robustness time-safety preserved speed execution platform increaseswe show rule physical model time-robust show time-determinism sufficient condition time-robustnessfor given real-time software execution platform corresponding time-robust model define execution engine coordinate execution application software meet timing constraint furthermore case non-robustness execution engine detect violation time-safety stop executionwe implemented execution engine bip program real-time constraint validated implementation method adaptive mpeg video encoder experimental  reveal existence timing anomaly seriously degrading performance increasing platform execution speed
2010,embedded system design - scientific challenge work direction,summary form given development satisfactory embedded system design science provides timely challenge opportunity reinvigorating computer science embedded system component integrating software hardware jointly specifically designed provide given functionality often critical used many application area including transport consumer electronics electrical appliance energy distribution manufacturing system etc embedded system design requires technique taking account extra-functional requirement regarding optimal use resource time memory energy ensuring autonomy reactivity robustness jointly taking account requirement raise grand scientific technical challenge extending computer science paradigm method control theory electrical engineering computer science based discrete computation model encompassing physical time resource nature different analytic model used engineering discipline summarize current trend embedded system design point characteristic chasm analytical computational model gap safety critical best-effort engineering practice call coherent scientific foundation embedded system design discus key demand foundation need encompassing several manifestation heterogeneity need design paradigm ensuring constructivity adaptivity discus main aspect challenge associated research direction different area modelling programming compiler operating system network
2010,incremental component-based construction verification using invariant,propose invariant-based technique efficient verification safety deadlock property concurrent system assume component component interaction described within bip framework tool component-based design build compositional methodology invariant obtained combining invariant individual component interaction invariant take concurrency interaction component account paper propose new efficient technique computing interaction invariant achieved several step first propose formalization incremental component-based design suggest sufficient condition ensure preservation invariant introduction new interaction case condition satisfied propose method generation new invariant incremental manner reuse existing invariant reduces considerably verification effort technique implemented d-finder toolset among experiment conducted capable verifying property deadlock-freedom dala autonomous robot whose behavior functional level described  line c code experiment conducted industrial partner far beyond scope existing academic tool nusmv spin
2010,automated conflict-free distributed implementation component-based model,propose method generating distributed implementation high-level model expressed term set component glued rendezvous interaction method -phase transformation preserving functional property first phase source-to-source transformation global state partial state model  transformation replaces multi-party rendezvous interaction send/receive primitive managed set automatically generated distributed scheduler scheduler conflict-free construction sense require communication order safely execute interaction highlevel model second phase transformed model phase one generate c++ distributed code using either tcp socket mpi implement send/receive primitive method fully implemented tool automatic generation distributed application present experimental  using different case study
2010,compositional translation simulink model synchronous bip,present method translation discrete-time fragment simulink synchronous subset bip language translation fully compositional preserve completely original structure reveals minimal control coordination structure needed perform correct computation within simulink model additionally translation seen providing alternative operational semantics simulink model using bip advantage twofold allows integration simulink model within heterogeneous bip design enables use validation automatic implementation technique already available bip simulink model translation currently implemented simulinkbip tool report several experiment particular show executable code generated bip model comparable runtime performance code produced real-time workshop several simulink model
2010,systematic correct construction self-stabilizing system case study,design implementation distributed algorithm often involve many subtlety due complex structure non-determinism low atomicity well occurrence unanticipated physical event fault thus constructing correct distributed system always challenge often subject serious error present methodology component-based modeling verification performance evaluation self-stabilizing system based bip framework bip system modeled composition set atomic component using two type operator interaction describing synchronization constraint component priority specify scheduling constraint methodology involves three step illustrated using distributed reset algorithm due arora gouda first high-level model algorithm built bip set process using powerful primitive multi-party interaction scheduling use model verification property self-stabilizing algorithm finally distributed model observationally equivalent high-level model generated
2010,incremental invariant generation compositional design,consider compositional method verification component-based system described subset bip language encompassing multi-party interaction method based use two kind invariant component invariant over-approximations component reach ability set interaction invariant constraint state component involved interaction paper propose fixed point characterization computing interaction invariant also propose new technique take incremental design system account many situation technique help avoid redoing verification process time interaction added design two technique implemented extension d-finder toolset result applied check deadlock-freedom several case study experiment show new methodology generally much faster existing one
2009,component-based construction real-time system bip,bip framework component-based construction real-time system considers system obtained composition -layer component componentthe lower layer describes behavior set transition trigger action  trigger consists enabling condition data port synchronization soughtthe intermediate level set interaction transition behavior level interaction set synchronizing port associated action interaction specified using connector expressing synchronization constraint portsthe upper level set priority rule implementing scheduling policy interactionsthe framework support system construction methodology based parameterized binary composition operator component product two component consists composing corresponding layer separately parameter used define new interaction well new priority composed component
2009,d-finder tool compositional deadlock detection verification,d-finder tool implement compositional method verification component-based system described bip language encompassing multi-party interaction deadlock detection d-finder applies proof strategy eliminate potential deadlock computing increasingly stronger invariant
2009,modeling synchronous system bip,present general approach modeling synchronous component-based system system synchronous component strongly synchronized common action initiate step component propose general model synchronous system step described acyclic petri net equipped data priority petri net used model concurrent flow computation priority instrumental enforcing run-to-completion execution stepwe study class well-triggered synchronous system construction deadlock-free computation within step confluent class behavior component modeled modal flow graph acyclic graph representing three different type dependency two event p q strong dependency  weak dependency  conditional dependency propose translation lustre well-triggered synchronous system translation modular exhibit data-flow connection node also synchronization using clock
2009,quest correctness-beyond posteriori verification,presentation discus main achievement area formal verification particular regarding impact thus far development computer science discipline future research directionsthe presentation start short overview formal verification technique main characteristic followed analysis current status respect  requirement specification  faithfulness modeling  scalability verification method compositional modeling verification main challenge tackling complexity system verification tightly integrated design process making use knowledge system’s structure propertiesi identify two complementary research direction overcoming current difficulty compositional technique  moving away low-level automata-based composition component-based composition developing framework encompassing heterogeneous component  using framework study compositionality technique particular architecture and/or specific propertiesi illustrate idea bip  component framework encompasses high-level composition heterogeneous componentsbip support design methodology building system three-dimensional design space using property-preserving transformation allows efficient compositional verification technique proving invariant deadlock-freedom particular
2009,brief announcement incremental component-based modeling verification performance evaluation distributed reset,design implementation distributed algorithm often involve many subtlety due complex structure nondeterminism low atomicity well occurrence unanticipated physical event fault thus constructing correct distributed system always challenge often subject serious error essentially due fact currently lack disciplined method rigorous design correct implementation distributed system mainly two reason  formal method easy use designer developer  wide gap modeling formalism automated verification tool one side practical development deployment tool side
2008,symbolic quality control multimedia application,present fine grain quality control method multimedia application method take input application software composed action execution time action unknown increasing function quality level parameter method allows construction controller computes adequate action schedule corresponding quality level meet qos requirement given platform include requirement safety  well optimality controller consists quality manager scheduler action controller us quality management policy choosing schedule quality level meeting qos requirement schedule selected amongst set optimal schedule computed schedulerwe extend improve  previous paper providing solid theoretical basis designing implementing controllerwe propose symbolic quality management method using speed diagram representation controlled system dynamic instead numerically computing quality level action quality manager change action quality level based knowledge constraint characterizing control relaxation region set state quality management given number computation step relaxed without degrading qualitywe study technique efficient computation optimal scheduleswe present experimental  including implementation method benchmark mpeg video encoder benchmark show drastic performance improvement controlled quality respect constant quality also show symbolic quality management allows significant reduction overhead respect numeric quality management finally using optimal schedule lead considerable performance gain
2008,algebra connector - structuring interaction bip,provide algebraic formalization connector bip component framework connector relates set typed port type used describe different mode synchronization particular rendezvous broadcast connector set port p modeled term algebra ac generated p using binary fusion operator unary typing operator typing associate term  synchronization type - trigger synchron - determine mode synchronization broadcast interaction initiated trigger rendezvous maximal interaction connector includes synchrons semantics ac associate connector set interaction induces connector equivalence relation congruence stable fusion provide number property ac used symbolically simplify handle connector provide example illustrating application ac including general component model encompassing method incremental model decomposition efficient implementation using symbolic technique
2008,notion glue expressiveness component-based system,comparison different formalism model often flattening structure reducing behaviorally equivalent model eg automaton turing machine lead notion expressiveness adequate component-based system separation behavior coordination mechanism essential paper proposes notion glue expressiveness component-based framework characterizing ability coordinate componentsglue closed composition set operator mapping tuples behavior behavior glue operator preserve behavioral equivalence restrict behavior argument performing memoryless coordinationbehavioral equivalence induces equivalence glue operator compare expressiveness two glue g  g  considering whether glue operator g  equivalent one g   weak expressiveness defined allowing finite number additional behavior argument operator g propose sos-style definition glue operator characterized set sos-rules specifying transition relation composite component transition relation constituent provide expressiveness  glue bip process algebra cc csp sccs show considered expressiveness criterion glue considered process calculus le expressive general so glue furthermore glue bip exactly strong expressiveness glue definable so characterization
2008,incremental component-based construction verification robotic system,propose invariant-based technique efficient verification safety deadlock property concurrent system assume component component interaction described within bip framework tool component-based design build compositional methodology invariant obtained combining invariant individual component interaction invariant take concurrency interaction component account paper propose new efficient technique computing interaction invariant achieved several step first propose formalization incremental component-based design suggest sufficient condition ensure preservation invariant introduction new interaction case condition satisfied propose method generation new invariant incremental manner reuse existing invariant reduces considerably verification effort technique implemented d-finder toolset among experiment conducted capable verifying property deadlock-freedom dala autonomous robot whose behavior functional level described  line c code experiment conducted industrial partner far beyond scope existing academic tool nusmv spin
2008,distributed semantics implementation system interaction priority,paper study distributed implementation method bip  component framework modeling heterogeneous systemsbip offer two powerful mechanism describing composition component combining interaction priority system model layered lowest layer contains atomic component second layer describes possible interaction atomic component third layer includes priority interaction current implementation bip based global state operational semantics engine directly interprets operational semantics rule computes possible interaction atomic component global statesthe implementation method translation bip model distributed model involving two step first translates bip model partial state model known state component ready communicate second implement interaction partial state model using message passing primitivesthe main  paper condition three model observationally equivalent show general translation global state partial state model preserve observational equivalence preservation achieved strengthening premise operational semantics rule oracle predicate depending priority bip model show many possible choice oracle maximal parallelism achieved dynamic oracle allowing interaction soon possible nonetheless oracle may entail considerable computational overhead study performance trade-off different type oracle finally provide experimental  illustrating application theory prototype implementation
2008,translating aadl bip - application verification real-time system,paper study general methodology associated tool translating aadl  annex behavior specification bip  language allows simulation system specified aadl application system formal verification technique developed bip eg deadlock detection present concise description aadl bip followed presentation translation methodology illustrated flight computer example
2008,specification verification conurrent system cesar,aim paper illustrate example alternating bit protocol use cesar interactive system aiding design distributed applicationscesar allows progressive validation algorithmic description system communicating sequential process respect given set specification algorithmic description done high level language inspired csp specification set formula branching time logic temporal operator computed iteratively fixed point monotonic predicate transformer verification system consists obtaining automatic translation description program interpreted petri net representing evaluating formula specification
2007,discipline embedded system design,wall computer science electrical engineering kept potential embedded system bay time build new scientific foundation embedded system design cornerstone ensure systematic even-handed integration two field embedded system design problem certainly raise technology question important requires building new scientific foundation systematically even-handedly integrate computation physicality bottom support foundation require enriching computer science paradigm encompass model method traditionally found electrical engineering
2007,algebra connector structuring interaction bip,provide algebraic formalisation connector bip used structure interaction component-based system connector relates set typed port type used describe different mode synchronisation rendezvous broadcast particularconnectors set port p modelled term algebra ac generated p using binary fusion operator unary typing operator typing associate term  synchronisation type - trigger synchron -  determine mode synchronisation broadcast interaction initiated trigger rendezvous maximal interaction connector including synchronsthe semantics ac associate connector set interaction induces connector equivalence relation congruence stable fusion provide number property ac used symbolically simplify handle connector provide example illustrating application ac including general component model encompassing synchrony method incremental model decomposition efficient implementation using symbolic technique
2007,using speed diagram symbolic quality management,present quality management method multimedia application method take input application software composed action execution time action unknown increasing junction quality level parameter method allows construction quality manager computes adequate action quality level meet qos requirement given platform include deadline action well quality maximization smoothness extend improve  previous paper focusing reduction overhead due quality management propose symbolic quality management method using speed diagram representation system dynamic instead numerically computing quality level action quality manager change action quality level based knowledge constraint characterizing control relaxation region set state quality management given number step relaxed without degrading quality provide experimental  quality management mpeg encoder particular performance benchmark numeric symbolic quality management
2007,using bip modeling verification networked system -- case study tinyos-based network,apply model construction methodology tinyos- based network using behavior-interaction-priority  component framework methodology consists building model node composition model extracted nesc program describing application model tinyos component model network obtained composition model node using bip connector implementing different type radio chan- nels open way enhanced analysis early error detection using verification technique
2007,approach modelling verification component based system,build framework modelling investigating component-based system strictly separate description behavior component way interact discus various property system behavior liveness local progress local global deadlock robustness present criterion ensures liveness tested polynomial time
2006,ensuring property interaction system,propose  ensuring property component-based system property interaction model component consider deadlock-freedom local progress subsystem done framework interaction system model component based modelling described  interaction system superposition two model behavior model interaction model behavior model describes behavior individual component interaction model describes way component may interact introducing connector relate action different component illustrate concept  example
2006,embedded system design challenge,summarize current trend embedded system design point characteristic chasm analytical computational model gap safety-critical best-effort engineering practice call coherent scientific foundation embedded system design discus key demand foundation need encompassing several manifestation heterogeneity need constructivity design believe development satisfactory embedded system design science provides timely challenge opportunity reinvigorating computer science
2006,wpdrts keynote component-based construction embedded system,summary form given present framework component-based construction embedded system framework based general semantic model encompassing various model computation real-time system characterized combined use model behavior interaction dynamic priority interaction model describe interaction component using connector synchronization type dynamic priority used specify controller scheduler particular also present methodology model-based composition real-time system using semantic model methodology enables correct-by-construction development property deadlock-freedom progress well incremental construction associativity composition operator present two implementation framework system modeling validation tool developed verimag  partial implementation state exploration platform tool suite dedicated validation asynchronous system modeling language uml sdl  recent full implementation platform execution synchronous asynchronous component methodology illustrated use tool case study real-time system modeling validation
2006,methodology supporting tool development component-based embedded system,paper present methodology supporting tool developing component-based embedded system running resource-limited hardware platform methodology combine two complementary component framework integrated tool chain bip think bip framework model-based development including language description heterogeneous system well associated simulation verification tool think software component framework generation small-footprint embedded system tool chain allows generation system model described bip set functionally equivalent think component library including o service given hardware platform minimal system generated illustrate  modeling implementing software mpeg encoder ipod
2006,modeling heterogeneous real-time component bip,present methodology modeling heterogeneous real-time component component obtained superposition three layer behavior specified set transition interaction transition behavior priority used choose amongst possible interaction parameterized binary composition operator used compose component layer layer present bip language description composition layered component well associated tool executing analyzing component dedicated platform language provides powerful mechanism structuring interaction involving rendezvous broadcast show synchronous timed system particular class component finally provide example compare bip framework existing one heterogeneous component-based modeling
2005,composition component-based modeling,propose framework component-based modeling using abstract layered model component component superposition two model behavior model interaction model interaction model describe architectural constraint induced connector componentswe propose analyze general requirement component composition motivated guided development framework define associative commutative composition operator component encompassing heterogeneous interaction particular instance proposed framework consider component behavior model transition system interaction model described priority relation interaction lead concept “flexible” composition different usual composition preserve deadlock-freedom appropriate correctness construction nevertheless flexible composition partial operation product system interaction safe sense violate constraint interaction modelwe propose  ensuring correctness construction system property interaction model component property considered include global deadlock-freedom individual deadlock-freedom component interaction safety
2005,guideline graduate curriculum embedded software system,design embedded real-time system requires skill multiple specific discipline including limited control computer science electronics often involves expert differing recognize address similar identical issue complementary angle design methodology lacking rigor discipline demonstrating correctness embedded design possible expensive proposition may delay significantly introduction critical product economic importance embedded system widely acknowledged academia paid enough attention education community high-quality embedded system designer obvious difficulty need interdisciplinarity period specialization target education system paper present reflection took place european network excellence artist leading u propose principle structured content building curriculum embedded software system
2005,fine grain qos control multimedia application software,propose method fine grain qos control dataflow application assume application software described composition action  quality level parameter method allows qos controller computed description also average execution time worst case execution time deadline action controller computes dynamically feasible schedule quality assignment action furthermore control policy ensures optimal time budget utilization prototype tool implementing method shown well experimental  non trivial example  show interest fine grain qos control video encoders
2005,qos control optimality safety,propose method fine grain qos control real-time application method allows adapting overall system behavior adequately setting quality level parameter action objective control policy meet qos requirement including three type property  safety deadline missed  optimality maximization available time budget  smoothness quality level method take input model application software qos requirement platform-dependent timing information produce controlled application software meeting qos requirement target platform paper provides complete formalization quality control problem proposes new control management policy ensuring safety near-optimality smoothness also describes prototype tool implementing quality control algorithm experimental  application video encoder
2005,framework component-based construction extended abstract,present overview  developed mainly verimag author colleague framework component-based construction characterized following behavior atomic component represented transition system component built set atomic component using glue operator component possible separate behavior structure due specific property glue operator show instance framework combine two independent class glue operator interaction model priority combination interaction model priority expressive enough encompass heterogeneous interaction execution show separation behavior structure instrumental correctness-by-construction finally discus new research problem related structure-dependent notion expressiveness
2004,embedded system - challenge work direction,embedded system component integrating software hardware jointly specifically designed provide given functionality component may used many different type application including transport  electrical electronic appliance  power distribution factory automation system etctheir extensive use integration everyday product mark significant evolution information science technology main trend proliferation embedded system work seamless interaction respecting real-world constraintsembedded system number specific characteristic play role structuring technical domain including criticality reactivity autonomythe coming generation embedded system – primarily used mass-market product – need development method tool allowing jointly consider functionality quality physical implementation market constraint need jointly consider functional extra-functional constraint lead system-centric approach development main focus end result system combination hardware software interaction physical environmentcurrent method tool allow system-centric approach approach raise difficult fundamental research problem basis emerging theory bring together information physical science information science consider model computation based abstract notion machine  take account physical property computation  unified theory allowing predict behavior application software given execution platform determines execution speed dynamic property applicationsystem-centric approach raise two grand challenge common activity system development first theory tool rigorous component-based engineering determines ability build complex system simpler one mastering complexity second intelligence long term vision system able analyze adapt behavior according change environmentwe discus specific work direction system development activity meet challenge including modeling programming compilation operating system design controller synthesis testing verification
2004,modeling real-time system,modeling real-time system raise non trivial problem definition usable modeling language application model-based development approacheswe identify key problem present corresponding research direction incremental construction timed model real-time system present framework may provide solution associated methodology model construction timed model real-time system obtained adding timing constraint application software constraint take account execution time atomic statement dynamic external environment well quality service requirement framework combine two kind composition operator timed componentsrestriction operator unary operator parameterized safety property application component restricts behavior meet associated property dynamic priority correspond class restriction operator preserve deadlock-freedom argumentsparallel composition operator parameterized interaction model model describe interaction action offered composed component associated synchronization requirementswe show combination parallel composition restriction operator allows compositional modeling real-time system particular aspect related heterogeneous interaction execution resource sharing scheduling scheduling policy modeled dynamic priority framework support composition scheduling policy provides compositionality composability  deadlock-freedom scheduled systemswe show application  including model-based development application esterel real-time java well partial implementation framework verimags toolset
2004,toolset,paper present overview toolset environment modelling validation heterogeneous real-time system toolset built upon rich formalism notation allowing structured automata-based system representation moreover notation expressive enough support real-time primitive extension high-level modelling language sdl uml mean structure preserving mappingsthe core part toolset consists syntactic transformation component open exploration platform syntactic transformation component provides language level access description used implement static analysis optimisation technique exploration platform give access graph possible execution connected different state-of-the-art model-checking test-case generation toolsa methodology use toolset presented hand case study concerning ariane- flight program sdl uml model validated
2003,building model real-time system application software,present methodology building timed model real-time system adding time constraint application software applied constraint take account execution time atomic statement behavior system external environment scheduling policy timed model application obtained manner analyzed using time analysis technique check relevant real-time property show instance methodology developed taxys project modeling analysis real-time system programmed esterel language language extended describe using pragmas time constraint characterizing execution platform external environment analyzable timed model real-time system produced composing instrumented c-code generated compiler latter re-engineered order take account pragmas finally report application taxys several nontrivial example 
2003,priority system,present framework incremental construction deadlock-free system meeting given safety property framework borrows concept basic  controller synthesis paradigm considering step construction process controller synthesis problemwe show priority expressive enough represent restriction induced deadlock-free controller preserving safety property define correspondence restriction priority provide compositionality  preservation correspondence operation safety property priority finally provide example illustrating application 
2003,component-based construction deadlock-free system extended abstract,propose framework building deadlock-free system deadlock-free component framework based methodology layered construction system superposing three layer layer component interaction model restriction layer interaction model specifies possible interaction component restriction layer restricts behavior two lower layer global constraint layered structuring allows separating three orthogonal aspect system construction apart methodological interest make technically possible definition unique powerful associative composition operatorwe study sufficient deadlock-freedom condition system built deadlock-free component given interaction model restriction also provide sufficient condition individual deadlock-freedom component system
2002,abstract invited talk,towards adaptive real-time systemsgiorgio buttazzouniversity paviaitalymodern real-time application including multimedia system mobile robotics distributed monitoring architecture often operate highly dynamic environment workload condition difficult predict advance addition real-time activity may variable computational requirement characterized flexible timing constraint classical real-time theory usually permit handling system according hard real-time paradigm  inappropriate would cause waste resource would dramatically increase cost recently significant work devoted increasing flexibility efficiency real-time system still providing form performance guaranteethe goal talk introduce set new methodology adopted develop adaptive real-time system system modify resource management policy based current workload condition framework task allowed le stringent timing constraint achieve higher resource utilization moreover concept yes-or-no guarantee replaced notion quality service specified within much larger grey-level scalereal life timing analysis intelavi efratiintel haifaisraelthe current generation vlsi cpu include huge number device complexity continuously increasing technology scaling allows designer put functionality within area time advanced process faster device allow higher operating frequency require considering inductance physical effect lower voltage smaller device require increased timing accuracy take two-prong approach increasing accuracy local level supporting hierarchical model abstract internals block preserving timing accuracy interface electrical behaviourthis talk give overview timing analysis intel hierarchical timing model enable full-chip timing described well interaction academia timing-related topic false path identificationscheduling combination mathematical constraint programmingjohn hookercarnegie mellon universitypittsburgh usai survey decomposition-methods combine mathematical constraint programming solving scheduling problem  theidea generalize bender decomposition subproblem constraint programming problem bender cut obtained logical inference master problem mixed integer programming problem  report  jain grossmann machine scheduling problem thorsteinsson branch-and-check approach problem suggest generalize approach using continuous relaxation cumulative constraint temporal resource constraint constraint-based schedulingclaude le papeilog saparis francescheduling consists assigning execution time resource activity satisfy variety constraint  optimize one several conflicting performance criterion  two main issue considered evaluate applicability model time resource industrial scheduling application flexibility efficiency flexibility mean specific constraint given application shall easy represent given model efficiency mean algorithm applicable model must provide good solution limited cpu time scheduling application tend different one another led development variety model time resource different characteristic term flexibility efficiency presentation emphasize widely used model compare along two dimensionsrestricting behavior timed systemsjoseph sifakisverimaggrenoble francerestriction central notion system development appears key concept definition parallel composition refinement relation defined unary operation system whose effect restriction enabling condition action  untimed system  restriction system simulate preserve invariant timed system different notion restriction defined depending effect restriction operation time progress  talk we•discuss different technical choice involved definition restriction timed systems•give  notion restriction preserve invariant time progress•illustrate application  definition property preserving operation flexible parallel composition•discuss technical choice concerning definition time system advocate time model waiting condition specified modified independently system ability perform action
2002,scheduler modeling based controller synthesis paradigm,controller synthesis paradigm provides general framework scheduling real-time application scheduler considered controller application restrict behavior given scheduling requirement met study modeling methodology based controller synthesis paradigm methodology allows get correctly scheduled system timed model process incremental manner application composability  simplify schedulability analysis consists restricting successively system scheduled application constraint defined scheduling requirement latter conjunction schedulability requirement express timing property process policy requirement resource management presented methodology allows unified view scheduling theory approach based timing analysis model real-time application
2001,taxys tool development verification real-time embedded system,correct behavior real-time application depends correctness  computation also time  produced matter fact violation real-time constraint embedded system difficult error detect extremely sensitive pattern external event stimulating system timing behavior system clearly development real-time system requires rigorous method tool reduce development cost “time-to-market” guaranteeing quality produced code 
2001,modeling real-time systems-challenges work direction,evolution information science technology characterized extensive integration embedded component system used various application area telecommunication automotive manufacturing medical application e-commerce etc case embedded component real-time system continuously interact system physical world integration continuous interaction software hardware component make assurance global quality major issue system design failure component may catastrophic consequence system performance security safety availability etc
2000,algebraic framework urgency,sub-class timed automaton known timed automaton deadline presented parallel composition operator defined according orthogonality principal timed process algebra hybrid automaton compositional description method based flexible composition rule relax urgency constraint preserve time reactivity also studied 
2000,towards validated real-time software,present tool design validation embedded real time application tool integrates two approach use synchronous programming language esterel design application model checking technique validation real time property validation carried global formal model  taking account effective implementation application target hardware architecture well external environment behavior
2000,methodology construction scheduled system,study methodology constructing scheduled system restricting successively behavior process scheduled restriction used guarantee satisfaction two type constraint schedulability constraint characterizing timing property process constraint characterizing particular scheduling algorithm including process priority non-idling preemptionthe methodology based controller synthesis paradigm main  deal characterization scheduling policy safety constraint simplification synthesis process applying composability principle
2000,construction live timed system,present method allows guarantee liveness construction class timed system method based use set structural property checked locally low cost provide sufficient condition liveness preservation parallel composition priority choice operator latter allow restrict system’s behavior according given priority order actionswe present several example illustrating use  particular construction live controller
1999,decidable integration graph,integration graphsare computational model developed attempt identify simple hybrid system decidable analysis problem start class ofconstant slope hybrid system right-hand side differential equation integer constant refer continuous variable whose right-hand side constant always  astimers continuous variable calledintegrators first result shown paper simple question reachability given state undecidable even simple class system restrict model even impose requirement test refers integrator may appear within loop graph restricted class cshs calledintegration graph main  paper reachability problem integration graph decidable two special case case single timer case single test involving integrator expressive power integration-graphs formalism demonstrated showing typical problem studied within context calculus duration timed statecharts formulated reachability problem restricted integration graph high fraction fall subclass single timer single test involving integrator
1999,compositional specification timed system - tutorial,analysis reactive system requires model representing system interaction environment taking account feature underlying execution structure important model timed analysis concern performance action scheduling general dynamic aspect behavior practice timed model system obtained adding timing constraint untimed description instance given functional description circuit corresponding timed model obtained adding timing constraint propagation delay component build timed model real-time software quantitative timing information concerning execution time statement significant change environment must added construction timed model reactive system raise important question concerning composition particular way well-understood construct untimed system extended timed system present overview existing executable timed formalism global notion time putting emphasis problem compositional description  compositionality developed collaboration bornot verimag
1999,integration price success,generally recognized formal technique limited impact current industrial practice several reason often advocated explain fact youth discipline intrinsic limitation due complexity undecidability lack trained practitioner engineer factor limiting application formal technique ever reason le frequently suggested relevance contribution current industrial practice clearly informatics scientificc discipline evolution law proper objective everas experimental discipline find inspiration validation application whose development also driven external need technologic economic ultimately social recognition success discipline intimately related capability address problem raised fast evolving practice
1999,framework scheduler synthesis,present framework integrating specification scheduler generation real time system first step system include arbitrarily designed task  specified timed petri net second step tool generates general non preemptive online scheduler specification using controller synthesis technique
1999,intermediate representation sdl application,present work project improvement specification/validation toolbox integrating commercial toolset objectgeode different validation tool verification tool cadp test sequence generator tgv intrinsic complexity protocol specification lead u study combination technique static analysis abstraction together classical model-checking technique experimentation validation  context motivated development intermediate representation sdl called system represented set timed automaton communicating asynchronously set buffer rendez-vous set synchronization gate advantage use program level intermediate representation easier interface various existing tool static analysis abstraction compositional state space generation moreover allows define sdl different mathematically sound notion time
1998,general framework composition timed system extended abstract,recognized general methodology writing correct timed specification timed system differ untimed system run composed alternating discrete transition time step describing system parallel composition independent timed component general easy preserve property given time progress must synchronous component propose high level algebraic framework composition timed system
1998,composition hybrid system,n/a
1997,composition timed system,generally admitted timed model obtained extension untimed  model adding construct allow manipulate time explicitly implicitly instance timed automaton automaton extended continuous variable called clock tested modified transition timed process algebra language obtained adding construct delay timeouts watchdog untmed process algebra finally different class timed petri net obtained adding interval time constraint petri netsin timed model run considered composed alternating step time step time progress synchronously sequential component transition timeless discrete state change implies particular discrete continuous step mutually exclusive model behavior represented language time divergent run
1997,modeling urgency timed system,timed system modeled automaton  extended real-valued variable  measuring time elapsed since initialization following feature also common modelsstates associated time progress condition specifying time advance time progress state intermediate state reached satisfy associated time progress conditionat transition clock value tested modified usually done associating transition guard  assignment guard true automaton state given clock valuation corresponding transition executed modifying clock specified corresponding assignment
1997,relating time progress deadline hybrid system,time progress condition hybrid system usually specified term invariant predicate characterizing state time continuously progress dually deadline condition predicate characterizing state time progress immediately stop aim work study relationship general time progress condition generated using state predicate shown using deadline condition invariant allows characterize practically interesting time progress condition study performed using galois connection corresponding lattice provide condition connection homomorphism apply  compositional description hybrid system
1996,research direction concurrency,n/a
1996,research direction formal method,n/a
1996,formal method validation fault tolerance autonomous spacecraft,one major challenge faced design new-generation spacecraft come requirement increase capacity autonomous operation particular presence abnormal event formal method becoming accepted space industry possible way manage induced system complexity data management system design validation  study accomplished experimental junction spacecraft autonomy trend emerging formal methodology methodological framework applicable early life cycle phase fault-tolerant system engineering defined focus verification fault tolerance property using model-based formalism specification design language  selected study best suited language respect application work resulted executable specification establishing tolerated behaviour spacecraft computer presence fault fault tolerance property checked spite limitation inherent model-based formalism using appropriate verification process
1996,compositional specification timed system extended abstract,n/a
1995,property preserving abstraction verification concurrent system,study property preserving transformation reactive system main idea use simulation parameterized galois connection  relating lattice property two system propose study notion preservation property expressed formula logic function α mapping set state system set state system give  preservation property expressed sublanguages branching time μ-calculus two system ands related via -simulations used verify property system verifying property simpler system abstraction show also condition abstraction concurrent system computed abstraction component allows compositional application proposed verification methodthis revised version paper    fully developed 
1995,algorithmic analysis hybrid system,present general framework formal specification algorithmic analysis hybrid system hybrid system consists discrete program analog environment model hybrid system finite automaton equipped variable evolve continuously time according dynamical law verification purpose restrict linear hybrid system variable follow piecewise-linear trajectory provide decidability undecidability  class linear hybrid system show standard program-analysis technique adapted linear hybrid system particular consider symbolic model-checking minimization procedure based reachability analysis infinite state space procedure iteratively compute state set definable union convex polyhedron multidimensional real space also present approximation technique dealing system iterative procedure converge
1995,specification verification timed system,present survey recent  specification verification timed system three different class formalism considered algebraic formalism including operator allow express timing constraint like delay timeouts watchdog formalism considered timed process algebra whose realistic representative timed extension lotos language transition based formalism considered extension automaton petri net timing constraint class includes timed petri net extension automaton continuous variable measuring time elapsed timed automaton hybrid automaton logical formalism language formula logic operator expressing timing constraint representative formalism real-time temporal logic extension temporal logic quantitative time calculus duration show untimed case formalism admit general common model labeled transition system timed transition existence common semantic framework allows comparison class focus two particular problem translation algebraic language transition based one central problem compilation algebraic timed language executable model raise problem compositionality efficiency optimality generated model verification comparison two transition-based description comparison transition based description logical specification
1995,real-time system specification verification,developed formal semantic model real-time concurrency limited parallelism model address memory access mechanism limited parallelism asynchronous processor framework model various scheduling paradigm imposed formulated language concept tri-sections concept combine nondeterministic multiway synchronization process processor holding single primitive construct use concept demonstrated process control system resource allocation problem elevator system concept allows construction maximally parallel region otherwise limited parallel execution model semantic sense achieves reduction complexity limited parallelism model provided formal design dialog system using z notation dialog system much like operating system concept provide specification address invariant property need satisfied various component system particular property address object relationship regard layout graphical interface presentation visual aspect object activation execution program attached object concurrency supported system
1995,synthesis discrete controller timed system extended abstract,paper present algorithm automatic synthesis real-time controller finding winning strategy certain game defined timed-automata alur dill game outcome depends player action well timing believe  pave way application program synthesis technique construction real-time embedded system specification
1994,symbolic model checking real-time system,describe finite-state program real-numbered time guarded-command language real-valued clock equivalently finite automaton real-valued clock model checking answer question state real-time program satisfy branching-time specification  develop algorithm computes set state symbolically fixpoint functional state predicate without constructing state space purpose introduce μ-calculus computation tree real-numbered time unfortunately many standard program property response nonzeno execution sequence  cannot characterized fixpoints show expressiveness timed μ-calculus incomparable expressiveness timed ctl fortunately result impair symbolic verification implementable real-time programs-those whose safety constraint machine-closed respect diverging time whose fairness constraint restricted finite upper bound clock value timed ctl property program shown computable finitely approximable fixpoints simple decidable theory
1994,algebra timed process atp theory application,algebra timed process atp us notion discrete global time suggests conceptual framework introducing time extending untimed language action vocabularly atp contains special element representing progress time algebra apart standard operator process algebra prefixing action alternative choice parallel composition primitive unit-delay operator two argument process p q operator give process behaves p execution time event behaves q afterwards shown several d-unit delay construct timeouts watchdog expressed term unit-delay operator standard process algebra operator sound complete axiomatization bisimulation semantics studied two example illustrating adequacy language description timed system given finally provide comparison existing timed process algebra
1994,using abstraction verification linear hybrid system,n/a
1994,model-based verification method tool abstract,describe established verification method framework communicating concurrent system focusing model-based approach implemented existing tool automatic verification
1993,atp timed graph hybrid system,paper present  ongoing work aiming unification behavioral description formalism timed system propose algebra timed process atp general semantics term time domain shown atp translated variant timed graph result allows application existing model-checking technique atp finally propose notion hybrid system generalization timed graph system evolve either executing discrete transition performing continuous transformation formalism studied admit class model time deterministic time continuous possibly infinitely branching transition system labeled action duration
1993,model checking real-time property duration,verification problem real-time property involving duration constraint  addressed duration state property along interval computation sequence real-time system time property true particular global time spent interval duration formula true real-time logic tctl extended duration logic called sdtl duration constraint expressed problem verification sdtl formula respect class timed model reactive system investigated new model checking procedure proposed significant property expressible sdtl including eventuality invariance property  provided two case discrete dense time< >
1992,compiling real-time specification extended automaton,method implementation analysis real-time system based compilation specification extended automaton proposed method illustrated simple specification language viewed extension language description system communicating process adding timeout watchdog construct main result language compiled timed automaton extended automaton timer timer special state variable set zero transition whose value measure time elapsed since last reset timed automaton make assumption nature time adopt event-driven execution mode complexity depend value parameter timeouts watchdog used specification feature allow application timed automaton efficient code generation analysis technique particular shown symbolic model-checking real-time property directly applied model< >
1992,property preserving simulation,study property preserving transformation reactive system key idea use <ϕ ψ>-simulations simulation parameterized galois connection  relating lattice property two systemswe propose study notion preservation property expressed formula logic function ϕ mapping set state system set state system roughly speaking ϕ preserve f satisfaction f state implies f satisfied state image state ϕthe main  concern preservation property expressed sublanguages branching time μ-calculus two system related via <ϕψ>-simulations used particular verify property system proving property simpler system abstraction
1992,approach description analysis hybrid system,n/a
1992,integration graph class decidable hybrid system,integration graph computational model developed attempt identify simple hybrid system decidable analysis problem start class constant slope hybrid system  right hand side differential equation integer constant refer continuous variable whose right hand side constant always  timer continuous variable called integrator first result shown paper simple question reachability given state undecidable even simple class systemsto restrict model even impose requirement test refers integrator may appear within loop graph restricted class cshs called integration graph main  paper reachability problem integration graph decidable two special case case single timer case single test involving integratorsthe expressive power integration graph formalism demonstrated showing typical problem studied within context calculus duration timed statecharts formulated reachability problem restricted integration graph high fraction fall subclass single timer single dangerous test
1992,toolbox verification lotos program,paper present tool aldebaran cesar cesaradt cleopatre constitute tool- box compiling verifying lotos program principle tool described well performance limitation finally formal verification ret/rel atomic multicast protocol given example illustrate practical use tool- box 
1991,overview synthesis timed process algebra,present overview synthesis existing  process algebra specification analysis timed system motivation double present overview relevant representative approach suggest unifying framework themafter presenting fundamental assumption timed system nature abstract time propose general model transition system whose label either element vocabulary action element time domain many property model studied concerning impact description capability realisability issuesan overview language feature process algebra considered presented focusing construct used express time constraint presentation organised exercise building timed process algebra standard process algebra untimed system overview completed discussion description capability according semantic pragmatic criterion
1991,algebra boolean process,work motivated study s/r model allow represent system set communicating state machine cooperating shared memorywe show s/r model expressed term process algebra called boolean sccs special case milners sccs sense action element boolean algebra define boolean sccs operational symbolic semantics modulo strong bisimulation equivalence complete axiomatisation bisimulation simulation equivalence algebra proposedfurthermore propose general renaming operator show mean example allows definition abstraction
1991,safety branching time semantics,study first part paper safety liveness property given program semantics give topological definition property using safety preorder consider case branching time semantics program modeled set infinite computation tree modulo bisimulation propose study safety preorder semantics based simulation dealing silent action focus regular safety property characterize tree-automata formula branching time logic show verifying safety property tree reduces simulation testing
1991,verification finite system extended abstract,n/a
1990,atp algebra timed process,n/a
1990,compilation verification lotos specification,iso specification language lotos formal description technique concurrent system paper present main feature csar system intended formal verification lotos specification model-checking tool compiles subset lotos extended petri net state graph verified using either temporal logic automaton equivalence design choice principle functioning csar described compared lotos tool paper also proposes idea deal state explosion problem arising verification model-checking 
1988,logig description behaviour property concurrent system,present two logic lsp  lp  propositional μ-calculi logical operator standard operator process algebra prefixing non-deterministic choice parallel composition restriction process algebra operator extended union bisimulation classeslsp extension algebra sequential process strong bisimulation deductive system proposed logic comparison propositional μ-calculus kozen carried outlp extension algebra communicating process strong bisimulation deductive system proposed logic use illustrated example
1987,readiness semantics regular process silent action,n/a
1987,verification xesar sliding window protocol,n/a
1987,expressive logic process algebra silent action,n/a
1986,logic specification proof regular controllable process cc,summarythis work motivated following general problem find logic specification proof program described term algebra given congruence relation relation supposed define satisfactory concept behavioural comparison program require logic adequate respect term language sense two program behaviourally equivalent satisfy formula conversely term language considered subset controllable regular term cc vocabulary action observational congruence term said controllable congruent term without occurrence τ obtain adequate logic whose language formula obtained constant true false ¦nil¦ using operator ∨ ∧ fixpoint operator + a∈a latter considered extension operator + a∈a cc result controllable cc term considered formula logic problem program verification reduced proof validity formula
1986,modal characterization observational congruence finite term cc,propose translation method finite term cc formula modal language representing class observational congruence purpose define modal language function associating finite term cc formula language satisfied term furthermore function two term congruent corresponding formula equivalent translation method consists associating operation term  operation corresponding formula work first step towards definition modal language modality expressing possibility inevitability compatible observational congruence
1986,logic description non-deterministic program property,present logic called synchronization tree logic  specification proof program described simple term language obtained constant nil using set unary operator binary operator + recursion element represent name action + represents non-deterministic choice nil program preforming action language formula logic proposed contains term language used description program ie program formula logic provides uniform frame deal program property verification anassertion ⊨ f  reduced proof validity formula ⊃ f propose sound condition complete deductive system synchronization tree logic discus relation modal logic used specification program
1985,synchronization tree logic acceptance model logic,n/a
1983,fairness related property transition system - temporal logic deal fairness,paper propose notion fairness transition system logic proving property fairness assumption corresponding notionwe start informal characterization unfairness situation event becomes possible infinitely often finite number occurrence induces various definition fairness considering different class event  comparison definition concept fairness useful fair reachability given set state p system ie reachability state p considering computation execution reaching state p possible infinitely often state p visited infinitely oftenthis definition fairness suggests introduction branching time logic fcl temporal operator express given set state p modality possible p inevitable p considering fair reachability p main result given transition system formula f fcl expressing property assumption fairness exists formula f belonging branching time logic cl f valid fcl iff f valid cl result show proving property assumption fairness equivalent proving property without assumption study fcl made via unfair logic cl easier study several  already existfinally proposed notion fairness compared related notion absence livelock absence starvation finite delay property
1983,example specification verification cesar,n/a
1983,property preserving homomorphism transition system,study function preserving property transition system described formula logiclet l logic transition system constitute class model formula f l defines given transition system interpretation property  state q satisfies property represented f iff given two transition system set state respectively q q function f f  q→q say f preserve property represented f iffthe  presented concern characterization function f preserve property independently particular choice provided transition system related via homomorphism certain type
1982,global local invariant transition system,given transition system cover p set state set local invariant respect p defined set predicate bijection set block p way local invariant true every time system state belonging corresponding block cover definition proved sufficiently general sense proof made using global invariant also made using set local invariant respect cover p result proved two restrictive definition notion local invariant using well-known property connection lattice finally shown notion invariant assertion commonly used proving program deduced definition local invariant transition system represents program case fixed point equation characterizing local invariant simplified obtain semantical equation program
1982,unified approach studying property transition system,paper systematic method generating comparing proving property transition system presented assumed property system defined giving set ‘target’ state type reachability ten different type reachability proposed appropriately choosing set target state family ten potentially different property generated main  reachability type therefore system property characterized simple relation involving set possible initial state fixed point certain continuous predicate trasformers depending set target state consequence order prove given property sufficient compute iteratively greatest least fixed point continuous predicate transformerssome example presented show  applied prove property concurrent system represented non-deterministic model
1982,temporal logic deal fairness transition system,paper propose notion fairness transition system logic proving property fairness assumption corresponding notion consider concept fairness useful fair reachability given set state p system ie reachability state p considering computation execution reaching state p possible infinitely often state p visited infinitely often definition fairness suggests introduction branching time logic fcl temporal operator express given set state p modality possible p inevitable p considering fair reachability p main result given transition system formula f fcl expressing property assumption fairness exists formula f′ belonging branching time logic cl  f valid fcl iff f′ valid cl result show proving property assumption fairness equivalent proving property without assumption study fcl made via unfair logic cl easier study several  already exist
1982,comment schiffers,interaction system  tool specification concurrent system allow progressive construction solution introducing mutual exclusion constraint excitation relation tool seems interesting us primitive notion provides fair analysis facility however following critique formulated far adequacy solving problem study   concerned
1982,specification verification concurrent system cesar,aim paper illustrate example alternating bit protocol use cesar interactive system aiding design distributed applicationscesar allows progressive validation algorithmic description system communicating sequential process respect given set specification algorithmic description done high level language inspired csp specification set formula branching time logic temporal operator computed iteratively fixed point monotonic predicate transformer verification system consists obtaining automatic translation description program interpreted petri net representing evaluating formula specification
1981,iterative method analysis petri net,aim paper show iterative method analysis discrete system presented  applied petri net extension  given paper obtained direct application exposed reference
1980,deadlock livelocks transition system,n/a
1979,use petri net performance evaluation,n/a
1979,performance evaluation system using net,paper present method computing firing frequency corresponding steady state functioning timed place-transition net  two different model tpins — one delay associated place delay associated transition — compared proved equivalent given tpin provided set relation established initial marking firing frequence transition delay associated place furthermore given initial marking delay shown maximal firing frequency computed solution set n linear equation n number place tpin presented  illustrated two application
1979,survey french research application based petri net,n/a
1978,synchronized petri net model description non-autonomous system,introduce study functioning non-autonomous petri net  synchronized petri net  defined pns transition finings synchronized occurrence external event show nesults concerning verification characteristic property  autonomous pns partially valid mode functioning model labeled spn proposed studied tool description analysis non-autonomous system
1978,structural property petri net,several necessary condition structural liveness necessary sufficient condition structural boundedness given condition verified using technique linear algebra could used proving liveness boundedness depending given marking structural boundedness liveness related existence deadlock trap absorber generator special type pn necessary condition pn structurally bounded live invariant consistent thus invariance consistency imply also strong connexity graphic representation necessary condition evitating pathological situation structural unboundedness structural unliveness
1976,design tool multilevel description simulation system interconnected module,suggest methodology language permit study system behavior  every system regarded interconnection communicating module functioning synchronous asynchronous manner control section data section module described separately term respectively non-procedural procedural sub-languages
