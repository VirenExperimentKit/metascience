2012,programming language - past achievement future challenge,design programming language compile-time run-time implementation closely related dependent underlying computational model many language designed many implementation strategy computational model explored since commercial world largely settled legacy language meanwhile capability computing system way used changed dramatically panelist summarize lesson learned language design also learned consider lesson applied myriad application domain architectural framework user need economic consideration exist today speculate future
2010,computer science historical perspective current assessment,begin brief review early year computer science period dominated large remote computer struggle master complex problem programming remedy found programming language providing suitable abstraction programming model outstanding language algol  designed international committee intended publication language algorithm early period end advent microcomputer mid bringing computing home school outstanding computer alto first personal computer substantial computing power changed world computing
2008,brief history software engineering,personal perspective art programming begin look state programming  follows programming development present day article examines key contribution field software engineering identifies major obstacle persist even today
2007,modula-2 oberon,account development language modula- oberon together ancestor algol  pascal form family called algol-like language pascal  reflected idea structured programming modula-  added modular system design oberon  catered object-oriented style thus mirror essential programming paradigm past decade major language property outlined followed account respective implementation effort condition environment language created elucidated point simplicity design essential guiding principle clarity concept economy feature efficiency reliability implementation consequence
2006,good idea looking glass,computing history driven many good original idea turned le brilliant first appeared many case change technological environment reduced importance often commercial factor also influenced good idea importance idea simply turned le effective glorious reviewed retrospect proper analysis others reincarnation idea invented earlier forgotten perhaps ahead time perhaps exemplified current fashion trend idea reinvented although already found wanting first incarnation given thorough self-critique hallmark subject claiming science computing science cannot help benefit retrospective analysis evaluation led author idea collecting good idea looked le brilliant retrospect
2003,hardware/software co-design,hardware/software co-design recently became field research method development important fashionable show technique already used decade ago discus various aspect form benefit time advent programmable device increasingly blurring distinction hardware software thereby seems render co-design obvious unavoidable strategythis paper dedicated wlad turski old colleague faithful friend warsaw since time “eastern europe” still belonged different world
2003,essence programming language,year invention first programming language subject flourished whole flurry language appeared soon programmer make choice among available language selected criterion selection language quality truly essential programming language spite convergence wide-spread popular language recent year question remain relevant search “better” language continues among programmer
2001,embedded system real-time programming,although computer employed decade control machinery entire laboratory term embedded system received renewed attention establish discipline therefore try identify characteristic peculiarity outstanding single item role time addition timing condition specification system cause real-time programming appear particularly difficult challenging subject ask rapidly growing demand met emphasize reliability must guaranteed view potentially disastrous consequence failure upon controlled equipment environment
2000,programming language design computer construction,neliac  euler algol w pascal modula- ultimately lilith wirths search appropriate formalism system programming yield intriguing insight surprising  
2000,development procedural programming language personal contribution perspective,became involved design successor algol  year - result algol-w  later algol-style pascal  modula-  oberon  turn introduced concept data structuring typing modular decomposition separate compilation object-orientation talk summarize development recount influence event determined design implementation language early c much influenced concentrated around programming language various programming paradigm emerged focus procedural branch directed toward system programming forming backbone engineering data processing method tool conclude remark gap method taught method practiced software design might narrowed
1998,hardware compilation translating program circuit,automatically translating program specified programming language digital circuit idea long standing interest thus far concept appeared uneconomical method largely academic hardly practical interest therefore pursued vigor consequently remained idealist dream increasing use hardware description language however become evident hardware software design share several trait hardware description language let circuit specification assume textual form like program replacing traditional circuit diagram text increased interest hardware compilation largely due advent large scale programmable device device configured fly hence used directly represent circuit generated hardware compiler author argues conceivable part program could compiled instruction sequence conventional processor part could compiled circuit loaded onto programmable gate array advocate development single language could compile part program instruction sequence conventional processor part circuit programmable gate array author point better left software best implemented hardware  goal achieve better understanding several important aspect hardware software design share may well expressed common notation
1996,task versus thread alternative multiprocessing paradigm,alternative thread presented paradigm single-processor multi-tasking system avoids complex hidden mechanism process scheduling therefore particularly suitable real-time system requiring fast response time small system general essence alternative base process  subroutine instead coroutines task classified according priority task may preempt ie temporarily suspend task lower priority however apart temporary suspension task run completion consequence system operates single workspace  workspace interrupted task stacked make system use storage highly economical efficient present implementation concept requiring change basic oberon system
1996,language lola fpgas plds teaching digital circuit design,language describing digital circuit presented simple powerful enough use practice education system described transforms program text fusemaps plds configuration fpgas device used laboratory exercise test designed circuit ranging simple assignment processor architecture communication controller
1995,plea lean software,software girth surpassed functionality largely hardware advance make possible way streamline software lie disciplined methodology return essential paper discus cause fat software considers oberon system whose primary goal show software developed fraction memory capacity processor power usually required without sacrificing flexibility functionality user convenience< >
1994,laboratory digital design course using fpgas,digital design laboratory replaced traditional wired circuit module workstation equipped extension board containing single fpga hardware supplemented set software tool consisting compiler circuit specification language lola graphical layout editor design entry checker verify conformity layout specification lola new laboratory used considerable success digital design course computer science student solution much cheaper collection module wired also allows substantial challenging exercise
1993,recollection development pascal,pascal defined  slow start became one widely used language introductory programming course article first summarises event leading pascal design implementation proceeds discussion language merit deficiency last part development followed release recounted influence chiefly derived vehicle structured programming basis development language experiment program verification
1991,difference oberon oberon-2,oberon true extension oberon  paper summarizes extension try shed light motivation behind hope make easier reader classify oberon detail reader referred language report one important goal oberon make objectoriented programming easier without sacrificing conceptual simplicity oberon three year using oberon experimental offspring object oberon  merged experience single refined version oberon new feature oberon typebound procedure readonly export variable record field open array pointer base type statement variant statement reintroduced eliminated step modula oberon oberon result many discussion among member institute computer system eth particularly influenced idea jurg gutknecht josef templ
1991,programming language oberon-2,oberon generalpurpose language tradition oberon modula important feature block structure modularity separate compilation static typing strong type checking  type extension typebound procedure type extension make oberon objectoriented language object variable abstract data type consisting private data  procedure operate data abstract data type declared extensible record oberon cover term objectoriented language established vocabulary imperative language order minimize number notion similar concept report intended programmer tutorial intentionally kept concise function serve reference programmer implementors manual writer remains unsaid mostly left intentionally either derived stated rule language would require commit definition general commitment appears unwise appendix defines term used express type checking rule oberon appear text written italic indicate special meaning 
1990,ceres-net low-cost computer network,paper describes localarea network hardware software structure protocol principal objective minimize complexity hardware software yet offer adequate functionality performance system  workstation local file store primary benefit achieved simple structure lowoverhead protocol system reliability
1989,oberon system,paper describe operating system workstation designed implemented author within two half year includes memory management module loader file system viewer system editor text graphic compiler server interface various tool primary motivation demonstrate feasibility small yet highly flexible powerful system system  order magnitude smaller commonly used operating system possible due regularity concept concentration essential benefit fewer resource needed elegance generality concept resulting transparency convenience use increased reliability corner-stone approach genuine extensibility achieved new language particular facility called type extension allows integration variable  new extended type structure element existing base type
1989,designing system scratch,n/a
1988,modula oberon,programming language oberon result concentrated effort increase power modula simultaneously reduce complexity several feature eliminated added order increase expressive power flexibility language paper describes motivates change language defined concise report
1988,programming language oberon,defining report programming language oberon
1988,type extension,software system represent hierarchy module client module contain set procedure extend capability imported module concept extension applied data type extended type related ancestor term hierarchy variable extended type compatible variable ancestor type scheme expressed three language construct declaration extended record type type test type guard facility extended type closely resembles class concept defined rigorous concise term efficient implementation presented
1987,hardware architecture programming language programming language hardware architecture,programming language operating system introduce abstraction allow programmer ignore detail implementation support abstraction must concentrate promoting efficiency implementation also providing necessary guard violation abstraction frantic drive efficiency second goal neglected indication recent design claimed simple powerful achieve efficiency shifting complex issue code generation appropriate guard onto compilerscomplexity become common hallmark software well hardware design cannot mastered common practice testing simulation hardware design may profit development programming methodology adopting proof technique similar used programming
1986,microprocessor architecture comparison based code generation compiler,carefully tuning computer compiler possible avoid otherwise inevitable compromise complex compiling algorithm less-than-optimal compiled code key performance appears lie neither sophisticated drastically reduced architecture key concept regularity completeness
1983,program development stepwise refinement reprint,creative activity programming - distinguished coding - usually taught example serving exhibit certain technique considered sequence design decision concerning decomposition task subtasks data data structure process successive refinement specification illustrated short nontrivial example number drawn regarding art instruction programming
1981,lilith personal computer software engineer,personal work station offer significant advantage large-scale central computing facility accessed via terminal among availability reliability simplicity operation high bandwidth user modern technology allows build system high-level language programming significant computing power reasonable priceat institut fur informatik eth designed built personal computer tailored language modula- paper report project encompasses language design development compiler single-user operating system design architecture suitable compiling yielding high density code development construction hardware  lilith computer use etha principal theme requirement software engineering influence design language facility reflected architecture computer structure hardware module structure used exemplify theme hardware designed according programming language instead vice-versa particularly relevant view trend towards vlsi technology
1981,pascal-s subset implementation,pascal-s subset programming language pascal selected introductory programming course report describes implementation especially designed provide comprehensive transparent error diagnostics economical service large number small job system consists compiler interpreter defined single self-contained pascal program machine-independent formulation high-level language facilitates construction prerequisite easy portability
1979,module system structuring facility high-level programming language,key successful programming finding right structure data program programming language concept called module presented mean partition system effectively module allows encapsulate local detail specify explicitly element part interface modulesmodules presented part language modula- problem separate compilation splitting module definition  implementation part discussed
1979,personal computer based high-level language,consideration economy past led so-called timesharing large computer premise system project user image entire computer exclusive disposal requires str ingent measure protection program data individual part icipants misbehaviour program malfunction hardware measure called overhead extensive also expensive 
1979,personal computer designed use high-level language,consideration economy past led so-called timesharing large computer premise system project user image entire computer exclusive disposal requires str ingent measure protection program data individual part icipants misbehaviour program malfunction hardware measure called overhead extensive also expensive 
1977,toward discipline real-time programming,programming divided three major category increasing complexity reasoning program validation sequential programming multiprogramming real-time programming adhering strict programming discipline using suitable high-level language molded discipline complexity reasoning concurrency execution time constraint may drastically reduced may practical way make real-time system analytically verifiable ultimately reliable possible discipline outlined expressed term language modula
1977,unnecessary diversity notation syntactic definition,population programming language steadily growing end growth sight many language definition appear journal many found technical report perhaps even greater number remains confined proprietory circle frequent exposure definition one cannot fail notice lack “common denominators” widely accepted fact language structure defined syntax even notation syntactic description eludes commonly agreed standard form although underlying ancestor invariably backus-naur form algol  report variation often slight become annoying lack apparent motivation
1977,modula language modular multiprogramming,paper defines language called modula intended primarily programming dedicated computer system including process control system smaller machine language largely based pascal addition conventional block structure introduces socalled module structure module set procedure data type variable programmer precise control name imported exported environment modula includes general multiprocessing facility namely process interface module signal also allows specification facility represent computer specific peripheral device given paper pertain pdp
1977,use modula,three sample program developed explained purpose demonstrating use programming language modula example concentrate us module concurrent process synchronizing signal particular focus problem operating peripheral device concurrency driver process occur real time device include typewriter card reader line printer disk terminal tape cassette graphical display unit three program listed full
1977,design implementation modula,paper give account design decision made development programming language modula explains essential characteristic implementation pdp computer particular runtime administration process mechanism signalling paper end comment suitability pdp highlevel multiprogramming language
1975,assessment programming language pascal,programming language pascal assessed light `reliable programming  five year experience language feature selected point remaining problem either inherent specific guideline design choice language reliable programming derived among discussed feature concept data type sequential file structure type union
1974,composition well-structured program,professional programmer know-how used consist mastery set technique applicable specific problem specific computer increase computer power programmer task grew complex hence need systematic approach became evident recently subject programming method generally applicable rule pattern development received considerable attention structured programming formulation program hierarchical nested structure statement object computation give brief example structured program show essence approach discus relationship program verification comment role structured language
1974,design programming language,n/a
1973,axiomatic definition programming language pascal,axiomatic definition method proposed reference  extended applied define meaning programming language pascal  whole language covered exception real arithmetic go statement 
1971,programming language pascal,programming language called pascal described developed basis ofalgol  compared toalgol  range applicability considerably increased due variety data structuring facility view intended usage convenient basis teach programming efficient tool write large program emphasis placed keeping number fundamental concept reasonably small simple systematic language structure efficient implementability one-pass compiler constructed cdc  computer family expressed entirely term pascal
1971,program development stepwise refinement,creative activity programming - distinguished coding - usually taught example serving exhibit certain technique considered sequence design decision concerning decomposition task subtasks
1971,design pascal compiler,development compiler programming language pascal described detail design decision concerning layout program data organization compiler including syntax analyser overall approach project discussed compiler written language implemented cdc  computer family reader expected familiar reference 
1969,multiprogramming machine coding computer organization,author feel interrupt feature available modern computer potent source programming pitfall error therefore may heavily contribute unreliability program making use programming scheme presented avoids concept interrupt permit specification concurrent  activity supposedly perspicuous manner intended serve basis construction operating system prime example program concurrent activity scheme includes set basic instruction generation termination synchronization parallel process set routine representing instruction thereby simulating hypothetical machine organization implemented tested ibm system/ two program using instruction written pl presented
1968,pl360 programming language 360 computer,programming language ibm  computer aspect implementation described language called pl provides facility symbolic machine language display structure defined recursive syntax pl designed improve readability program must take account specific characteristic limitation particular computer represents attempt state art programming encouraging even forcing programmer improve style exposition principle discipline program organization inherent simplicity language particularly well suited tutorial purpose attempt present computer systematically organized entity also hoped interest designer future computer
1966,euler generalization algol formal definition part 1,method defining programming language developed introduces rigorous relationship structure meaning structure language defined phrase structure syntax meaning term effect execution sequence interpretation rule exerts upon fixed set variable called environment exists one-to-one correspondence syntactic rule interpretation rule sequence corresponding syntactic reduction constitute parse individual interpretation rule explained term elementary obvious algorithmic notation constructive method evaluating text provided certain decidable class language unambiguity proved example generalization algol described full detail demonstrate concept like block-structure procedure parameter etc defined adequately precisely method
1966,euler generalization algol formal definition part ii,section algorithmic language euler described first informally formally syntax semantics attempt made generalize extend concept algol thus creating language simpler yet flexible algol  second objective developing language show useful programming language processed reasonable efficiency defined rigorous formality
1966,note program structure parallel processing,n/a
1966,contribution development algol,programming language similar many respect algol  incorporating large number improvement based six year experience language described detail part consists introduction new language summary change made algol  together discussion motif behind revision part ii rigorous definition proposed language part iii describes set proposed standard procedure used language including facility input/output
1965,algorithm 249 outreal n 15,n/a
1965,automatic grading program,two algol grader program presented computer evaluation student algol program one beginner program furnishes random data check answer provides searching test reliability efficiency integration procedure statement essential property computer system order grader program effectively used
1965,algorithm 265 find precedence function l2,n/a
1964,certification algorithm 146 multiple integration,n/a
1963,syntactic description bc neliac,n/a
1963,generalization algol,n/a
