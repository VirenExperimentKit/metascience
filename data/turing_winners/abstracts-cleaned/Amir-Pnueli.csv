2019,real-time logic timed automaton,show construct temporal tester logic mitl prominent linear-time logic real-time system temporal tester transducer input signal holding boolean value atomic proposition output truth value formula along time consider tester continuous-time boolean signal use clock variable enforce duration constraint timed automaton first rewrite mitl formula “simple” formula using limited set temporal modality build tester specific modality show compose tester simple formula complex one temporal tester turned acceptor yielding compositional translation mitl timed automaton construction much simpler previously known remains asymptotically optimal support past future operator easily extended
2012,low dimensional hybrid system - decidable undecidable dont know,even though many attempt made define boundary decidable undecidable hybrid system affair far resolved low dimensional system shown undecidable respect reachability many open problem discovered paper present various two-dimensional hybrid system reachability problem undecidable show undecidability simulating minsky machine proximity decidability frontier understood inspecting parsimonious constraint necessary make reachability automaton decidable also show two-dimensional system reachability question remains unanswered proving hard reachability problem piecewise affine map real line well known open problem
2012,verification multi-linked heap,define class single-parent heap system rely singly-linked heap order model destructive update tree structure encoding advantage relying relatively simple theory linked list order support abstraction computation facilitate application encoding provide program transformation given program operating multi-linked heap without sharing transforms one single-parent heap possible apply shape analysis predicate ranking abstraction technique successfully applied example list  tree fixed arity 
2012,synthesis reactive1 design,address problem automatically synthesizing digital design linear-time specification consider various class specification synthesized effort quadratic number state reactive system measure effort symbolic step synthesis algorithm based novel type game called general reactivity rank   winning condition form  boolean combination atomic proposition show symbolic algorithm solve game build winning strategy several way optimize winning strategy extract system also show use gr game solve synthesis ltl specification many interesting case empirical evidence generality efficiency approach include significant case study describe formal specification synthesis process applied bus arbiter realistic industrial hardware specification modest size
2012,,long known past-time operator add expressive power linear temporal logic paper consider extension branching temporal logic past-time operator two possible view regarding nature past branching-time model induce two different extension first view past branching moment time may several possible future several possible past second view past linear moment time may several possible future unique past view assume past finite discus practice extension specification language characterize expressive power examine complexity model-checking satisfiability problem
2012,effective synthesis asynchronous system gr1 specification,consider automatic synthesis linear temporal logic specification asynchronous system aim produced reactive system used software multi-threaded environment extend previous reduction asynchronous synthesis synchronous synthesis setting multiple input multiple output variable much like synthesis synchronous design solution practical requires determinization automaton infinite word solution complicated game follow advance synthesis synchronous design restrict handled specification achieve scalability efficiency propose heuristic case maintains scalability asynchronous synthesis heuristic prove specification realizable extract design done reduction synchronous synthesis inspired theoretical reduction
2010,towards component based design hybrid system safety stability,propose library based incremental design methodology constructing hybrid controller component library model hybrid controller global safety stability property preserved end propose hybrid interface specification component characterizing plant region safety stability property guaranteed well exception mechanism allowing safe stability-preserving transfer control whenever plant evolves towards boundary controllable dynamic propose composition operator constructing hybrid automaton library pre-characterized component supported compositional automatable proof hybrid interface specification
2010,proving refuted symbolic model checker proof generator,paper present automatic method derive deductive proof response property symbolic model checking method based new proof rule response property deal directly compassion  method applied infinite-state system particular model checking response  abstracted heap program automatically transformed deductive proof concrete heap system example presented paper run tlv
2010,temporal verification reactive system response,nearly twenty year ago amir  decided write series three volume summarizing state art  verification reactive system using temporal logic technique
2010,jtlv framework developing verification algorithm,jtlv computer-aided verification scripting environment offering state-of-the-art integrated developer environment algorithmic verification application jtlv may viewed new much enhanced tlv  java rather tlv-basic scripting language jtlv attache internal parser eclipse editor facilitates rich common abstract verification developer environment implemented eclipse plugin
2010,revisiting synthesis gr1 specification,last year seen rising interest problem synthesizing system temporal logic specification one major contributor recent work piterman et al showed polynomial time synthesis could achieved class ltl specification large enough expressive enough cover extensive number complex real-world application  approach already used extensively synthesis various application basis theoretical work synthesishere expose fundamental flaw initial processing specification paper demonstrate may produce incorrect  declaring specification could synthesized fact could identify class specification initial processing sound complete thus giving insight reason problem arises first place also show easily checked whether specification belong sound complete class using synthesis technique finally show case specification fall category modify processing indeed sound complete
2009,controller synthesis lsc requirement,live sequence chart  visual requirement language specifying reactive system behavior modeling designing open reactive system often essential guarantee requirement satisfied possible circumstance apply  area controller synthesis subset lsc language decide realizability lsc requirement realizable show generate system response guaranteed satisfy requirement discus one particular implementation result formulated extension smart play-out method direct execution scenario-based requirement
2009,synthesis program temporal property specification,paper investigates development process reactive program program automatically generated  high-level temporal specification method based previous  proposed similar synthesis method automatic construction hardware design temporal specification thus work reported viewed generalization existing method synthesis synchronous reactive system synthesis asynchronous system synchronous case possible identify restricted subclass formula present algorithm solves synthesis problem restricted specification polynomial time  le definitive sense offer heuristic may provide polynomial-time solution case
2008,sound complete deductive system ctl* verification,paper present compositional approach verification ctl* property reactive system symbolic model-checking  deductive verification considered method based two decomposition principle general state formula decomposed basic state formula ctl* formula embedded path quantifier deal arbitrary basic state formula introduce another reduction principle replaces basic path formula ie path formula whose principal operator temporal contain embedded temporal operator path quantifier newly introduced boolean variable added system thus algorithmic deductive method based two statification transformation successively replace temporal formula assertion contain path quantifier temporal operator performing decomposition repeatedly remain basic assertional formula ie formula form efp afp assertion p model-checking method present single symbolic algorithm verify universal existential basic assertional property deductive method present small set proof rule show set sound relatively complete verifying universal existential basic assertional property reactive system together two proof rule decomposition obtain sound relatively complete proof system arbitrary ctl* property interestingly deductive approach ctl* presented offer viable new approach deductive verification arbitrary ltl formulasthe paper corrects previous preliminary version deductive system ctl* rule unsound correction based introduction new type temporal tester guaranteed non blocking composed deadlock-free system key operation verification process resulting composed system guaranteed remain deadlock free
2008,using abstraction verify arbitrary temporal property,summary form given known fact finitary state abstraction method  predicate abstraction inadequate verifying general liveness property even termination sequential program talk present abstraction approach called ranking abstraction sound complete verifying temporally specified property including liveness property start presenting general simple framework state abstraction emphasizing order get soundness necessary apply over-approximating abstraction system under-approximating abstraction  property show finitary version abstraction complete verifying safety property also show example simple program whose termination provably cannot established finitary abstraction consider abstraction approach verification deadlock freedom presenting sufficient condition guaranteeing deadlock freedom inherited concrete abstract finally introduce method ranking abstraction illustrate application verification termination general liveness property presentation emphasize similarity predicate abstraction extension ranking abstraction particular fact user provide full ranking function specify ingredient function constructed also sketch abstraction refinement applied ranking abstraction thus opening way cegar-like methodology time permitting present brief comparison ranking abstraction method transition abstraction developed podelski rybalchenko cook underly terminator system talk based  obtained joint research
2008,checking temporal property discrete timed continuous behavior,survey problem associated checking whether given behavior  satisfies property specified appropriate temporal logic describe two monitoring algorithm real-time logic mitl
2008,mechanical verification transactional memory non-transactional memory access,transactional memory programming abstraction intended simplify synchronization conflicting memory access  without difficulty associated lock previous work presented formal framework proving transactional memory implementation satisfies specification provided model checking verification using small instantiation paper extends previous work capture non-transactional access memory occurs example using legacy code provide mechanical proof soundness verification method well mechanical verification version popular tcc implementation includes non-transactional memory access verification performed deductive temporal checker tlpvs
2008,discriminative model checking,model checking typically compare system description formal specification return either counterexample affirmation compatibility two description counterexample provide evidence existence error still difficult understand cause error propose model checking methodology us two level specification methodology group execution good bad respect satisfying base ltl specification use analysis specification ctl ∗  style quantifying good bad execution specification allows checking whether base specification hold fails hold system also propose model checking algorithm style standard ctl ∗  decision procedure framework used comparing good bad execution system outside providing assistance locating design programming error
2008,covac compiler validation program analysis cross-product,paper present deductive framework proving program equivalence application automatic verification transformation performed optimizing compiler leverage existing program analysis technique reduce equivalence checking problem analysis one system – cross-product two input program show approach effectively used checking equivalence consonant  program finally report prototype tool applies developed methodology verify compiler optimization run preserve program semantics unlike existing framework covac accommodates absence compiler annotation handle classical intraprocedural optimization constant folding reassociation common subexpression elimination code motion dead code elimination branch optimization others
2008,program analysis compiler validation,translation validation approach ensuring compilation correctness compiler run followed validation pas prof target code produced compiler correct translation  source code previously shown problem translation validation reduced checking single system - corss-product source target satisfies specific property paper show adapt existing program analysis technique setting translation validation addition present novel invariant generation algorithm strengthens analysis input program contain dynamically allocated data structure finally report prototype tool applies developed methodology verification llvm compiler tool handle many classical intraprocedural compiler optimization constant folding reassociation common subexpression elimination code motion dead code elimination others
2008,merit temporal tester,paper discus merit temporal tester serve compositional basis automaton construction corresponding temporal formula context ltl psl mitl logic temporal tester viewed  transducer point output boolean value  iff corresponding temporal formula hold starting current positionthe main advantage tester compared acceptor  compositionality namely tester compound formula constructed tester sub-formulas besides providing construction tester formula specified ltl psl mitl paper also present general overview tester methodology highlight unique feature application transducer including compositional deductive verification ltl property
2008,need compassion,paper present new deductive rule verifying response property assumption compassion  requirement improves previous rule premise new rule first order prove rule sound present constructive completeness proof case finite-state system general case present sketch relative completeness proof report implementation rule pvs illustrate application simple non-trivial example
2007,specify compile run hardware psl,propose use formal specification language high-level hardware description language formal language allow compact unambiguous representation yield design correct construction idea automatic synthesis specification old used completely impractical recently great stride towards efficient synthesis specification made paper extend recent method generate compact circuit show practicality synthesizing generalized buffer arbiter arm amba ahb bus specification given psl first industrial example synthesized automatically specification
2007,modular ranking abstraction,predicate abstraction become one successful methodology proving safety property program recently several abstraction methodology proposed proving liveness property paper study ranking abstraction program augmented non-constraining progress monitor based set ranking function abstracted predicate-abstraction allow automatic verification progress property unlike many liveness methodology augmentation require complete ranking function expected decrease helpful step rather adequate user-provided input component ranking complete ranking function may automatically formed premise paper analogy method ranking abstraction predicate abstraction one ingredient refinement predicate abstraction fails one refine ranking abstraction fails one must determine whether predicate abstraction ranking abstraction need refined paper present strategy determining case hand method performing apporpriate refinement part analogy automatically deriving deductive proof construct predicate abstraction often used derive program invariant proving safety property boolean combination given predicate deductive proof progress property requires well-founded ranking function addition invariant show construct necessary deductive proof arbitrary ltl formula automatically extracted successful application ranking abstraction method
2007,synthesizing controller bounded-response property,paper propose complete chain synthesizing controller high-level specification real-time property expressed logic mtl generate bounded-variability assumption deterministic timed automaton apply safety synthesis algorithm derive controller satisfies property construction preliminary experimental  reported
2007,interactive presentation automatic hardware synthesis specification case study,propose use formal specification language high-level hardware description language formal language allow compact unambiguous representation yield design correct construction idea automatic synthesis specification old used completely impractical recently great stride towards efficient synthesis specification made paper extend recent method generate compact circuit show practicality synthesizing arbiter arm amba ahb bus generalized-buffer specification given psl first industrial example synthesized automatically specification
2007,verifying correctness transactional memory,show verify correctness transactional memory implementation model checker show specify transactional memory term admissible interchange transaction operation give proof rule showing implementation satisfies specification notion admissible interchange key ability use model checker let u capture various notion transaction conflict characterized scott demonstrate work using tlc model checker verify several well-known implementation described abstractly tla+ specification language
2007,synthesizing reactive system lsc requirement using play-engine,live sequence chart  scenario-based language modeling object-based reactive system liveness property tool called play-engine allows user create lsc requirement using point-and-click interface generate executable trace using feature called play-out smart play-out finite executable trace fragment called super-steps generated smart play-out response user input super-step guaranteed violate lsc requirement provided one exists however non-violation guaranteed beyond individual super-step work demonstrate powerful extension smart play-out produce trace guaranteed violate lsc requirement provided requirement realizable using method may synthesize correct executable program directly lsc requirement
2007,dont care modeling logical framework developing predictive system model,analysis biological data often requires understanding component pathway and/or network mutual dependency relationship system often analyzed understood datasets made state relevant component set discrete outcome  analysis system assisted model consistent available data maximally predictive untested condition present method construct model type system maximize predictive capability introduce set “don’t care”  boolean variable must assigned value order obtain concrete model dc variable set  indicates information corresponding component contribute observed result intuitively dc variable set  maximizes potential predictive capability well possibility obtaining inconsistent model thus formulate problem maximizing number dc variable set  retaining model solution consistent explain given known data amount solving quantified boolean formula  three level quantifier alternation maximization goal dc variable developed prototype implementation support new modeling approach applying method part classical system developmental biology describing fate specification vulval precursor cell c elegans nematode work indicates biological instance serve challenging complex benchmark formal-methods research community
2007,shape analysis single-parent heap,define class single-parent heap system rely singly-linked heap order model destructive update tree structure encoding advantage relying relatively simple theory linked list order support abstraction computation facilitate application encoding provide program transformation given program operating multi-linked heap without sharing transforms one single-parent heap possible apply shape analysis predicate ranking abstraction  technique successfully applied example tree fixed arity 
2006,reduced functional consistency uninterpreted function,reduction equality logic uninterpreted function  equality logic ackermanns method suffers quadratic growth number functional consistency constraint =f propose framework syntactic characteristic function instance  used guessing constraint possibly needed proof framework either combined abstraction-refinement loop case used without refinement iteration framework suitable equivalence verification problem one typical us uninterpreted function enabled u verify dozen verification condition resulting translation validation could prove otherwise
2006,monitoring interface fault,consider problem module interacting external interface  interaction expected satisfy system specification  full implementation detail module given partial external specification interface interface specification partial  mean interface display strict subset behavior allowed interface specificationbased assumption interface specification typically incomplete address question whether tighten interface specification strategy consistent given partial specification guarantee possible interaction resulting possible behavior module satisfy system specification  refer tighter specification -guaranteeing specification rather verifying whether interface often off-the-shelf component satisfies tighter specification paper proposes construction run-time monitor continuously check existence -guaranteeing interfacewe view module external interface player -player game interface winning strategy guarantee matter module overall specification  met problem incomplete specification resolved allowing interface follow strategy consistent interface specification approach essentially combine traditional run-time monitoring static analysis allows going beyond focus traditional run-time monitoring tool  error detection execution trace towards focus static analysis  bug detection program
2006,model checking strong fairness,paper present coherent framework symbolic model checking linear-time temporal logic  property finite state reactive system taking full fairness constraint consideration use computational model fair discrete system  take account justice  compassion  approach presented reduces model-checking problem question whether given fds feasible contribution paper twofold methodological level present direct self-contained exposition full ltl symbolic model checking without resorting reduction either -calculus ctl technical level extends previous method dealing compassion algorithmic level instead either adding specification transforming compassion justicefinally extend ctl past operator show basic symbolic feasibility algorithm presented used model check arbitrary ctl formula fds full fairness constraint
2006,liveness invisible ranking,method invisible invariant developed originally order verify safety property parameterized system fully automatic manner method based  project&generalize heuristic generate auxiliary construct parameterized system  small-model theorem implying sufficient check validity logical assertion certain syntactic form small instantiation parameterized system approach generalized deductive proof rule  requires auxiliary construct generated project&generalize  premise resulting using construct form covered small-model theoremthe method invisible ranking presented generalizes approach liveness property parameterized system starting proof rule case method applied almost paper progress develop deductive proof rule liveness extend small-model theorem cover many intricate family parameterized system
2006,psl model checking run-time verification via tester,paper introduces construct temporal tester compositional basis construction automaton corresponding temporal formula psl logic temporal tester viewed  transducer point output boolean value  iff corresponding temporal formula hold starting current positionthe main advantage tester compared acceptor  compositional namely tester compound formula constructed tester sub-formulas paper extend application tester method ltl logic pslbesides providing construction tester psl indicate symbolic representation tester directly utilized efficient model checking run-time monitoring
2006,mitl timed automaton,show transform formula written real-time temporal logic mitl timed automaton recognize satisfying model compositional construction much simpler previously known easily implemented
2006,liveness invisible invariant,method invisible invariant developed order verify safety property parametrized system fully automatic manner paper apply method invisible invariant “bounded response” property ie liveness property type p   q bounded – p-state reached take bounded number round  reach q-state – thus essentially safety propertieswith “liveness monitor” observes certain behavior system establishing “bounded response” property system reduced verification invariant propertiesit often case inductive invariant system “liveness monitors” contain assertion certain form original method invisible invariant able generate check inductiveness accommodate invariant form extend technique used invariant generation well small model theorem validity check
2006,invisible safety distributed protocol,method “invisible invariants” applied successfully protocol assume “symmetric” underlying topology clique star ring paper show method applied proving safety property distributed protocol running arbitrary topology many safety property protocol reachability predicate first glance beyond scope invisible invariant method overcome difficulty present technique called “coloring” allows many instance replace second order reachability predicate first order predicate resulting property amenable invisible invariantswe demonstrate technique several distributed protocol including variant luby’s maximal independent set protocol leader election protocol used ieee   distributed bus protocol various distributed spanning tree algorithm example tested using symbolic model checker tlv
2006,faster solution rabin streett game,paper improve complexity solving rabin streett game approximately square root previous bound introduce direct rabin streett ranking sound complete way characterize winning set respective game computing directly explicitly ranking solve game time space rabin streett n number state number transition k number pair winning condition order prove completeness ranking method give recursive fixpoint characterization winning region game show keeping intermediate value fixpoint evaluation solve game symbolically time space  improve current bound time case direct  solution k  case reduction parity game
2006,ranking abstraction recursive program,present method model-checking safety liveness property procedural program combining state ranking abstraction procedure summarization abstraction augmented finitary abstraction  meaning concrete procedural program first augmented well founded ranking function abstracted finitary state abstraction  procedural abstract program strong fairness requirement reduced finite-state fair discrete system  using procedure summarization fds model checked property
2005,validating loop optimization,translation validation technique ensuring translator compiler produce correct  complete verification translator often infeasible translation validation advocate coupling verification task translation task run translator produce verification condition valid prove correctness translation previous work translation validation approach used give framework proving correctness variety compiler optimization recent focus loop transformation however idea preliminary implemented additionally example common loop transformation could handled previous approachesthis paper address issue introduce new rule reduce loop reduction transformation generalize previous rule validate handle transformation involving loop describe  implemented compiler validation tool tvoc
2005,translation run-time validation loop transformation,paper present new approach validation loop optimization compiler use obtain highest performance modern architecture rather verify compiler approach translation validation performs validation check every run compiler producing formal proof produced target code correct implementation source codeas part active ongoing research project translation validation previously described approach validating optimization preserve loop structure code presented simulation-based general technique validating optimization paper aggressive optimization alter loop structure codesuch distribution fusion tiling interchangewe present set permutation ruleswhich establish transformed code satisfies implied data dependency necessary validity considered transformation describe extension tool voc- required validate structure-modifying optimizationsthis paper also discus preliminary work run-time validation speculative loop optimization involves using run-time test ensure correctness loop optimization whose correctness cannot guaranteed compile time unlike compiler validation run-time validation must determine optimization generated incorrect code also recover optimization without aborting program producing incorrect result technique applied several loop optimization including loop interchange loop tiling appears quite promising
2005,bridging gap fair simulation trace inclusion,paper considers problem checking abstraction two finite-state fair discrete system automata-theoretic term trace inclusion two nondeterministic streett automaton propose reduce problem algorithm checking fair simulation two generalized bchi automaton solving question present new triply nested -calculus formula implemented symbolic method show every trace inclusion type solved fair simulation provided augment concrete system  appropriate non-constraining automaton establishes fair simulation offer complete method checking trace inclusion finite-state system illustrate feasibility approach algorithmically checking abstraction finite state system whose abstraction could verified deductive method
2005,discrete-time uml semantics concurrency communication safety-critical application,define subset krtuml uml rich enough express modelling entity uml used real-time application active object dynamic object creation destruction dynamically changing communication topology combination synchronous asynchronous communication shared memory usage object attribute define formal interleaving semantics kernel language associating model mkrtuml symbolic transition system sts briefly outline compile model industrial system making use generalisation hierarchy weak strong aggregation hierarchical state-machines krtuml main aim paper provide executable semantics krtuml suitable formal verification temporal model property existing model-checking tool
2005,compositional approach ctl* verification,paper present compositional approach verification ctl property reactive system symbolic model-checking  deductive verification considered method based two decomposition principle general state formula decomposed basic state formula ctl formula embedded path quantifier deal arbitrary basic state formula introduce another reduction principle replaces basic path formula ie path formula whose principal operator temporal contain embedded temporal operator path quantifier newly introduced boolean variable added system thus algorithmic deductive method based two statification transformation successively replace temporal formula assertion contain path quantifier temporal operator performing decomposition repeatedly remain basic assertional formula ie formula form   assertion  model-checking method present single symbolic algorithm verify universal existential basic assertional property deductive method present small set proof rule show set sound relatively complete verifying universal existential basic assertional property reactive system together two proof rule decomposition obtain sound relatively complete proof system arbitrary ctl property interestingly deductive approach ctl presented offer viable new approach deductive verification arbitrary ltl formula
2005,ranking abstraction companion predicate abstraction ,predicate abstraction become one successful methodology proving safety property program unfortunately cannot used verifying liveness property order handle liveness property introduce method ranking abstraction method augments analyzed system “progress monitor” observes whether given ranking function decrease increase step program fact ranking function range well-founded domain expressed compassion  requirement state function well-founded domain cannot decrease infinitely many time without also increasing infinitely many time analogy predicate abstraction us predicate base {p} = {p   p } consisting set predicate augment program ranking coreδ = {δ δ n } consisting several ranking component augmented system abstracted using standard predicate abstraction retaining compassion requirement abstracted augmented system model checked arbitrary ltl property ranking abstraction method shown sound  complete proving ltl property including safety livenessin presented talk focus strong analogy predicate abstraction ranking abstraction predicate abstraction viewed process determines best inductive invariant formed boolean combination predicate base similar way ranking abstraction viewed search best well-founded global ranking function formed lexicographic combination ranking component included ranking core δ talk present algorithm explicit construction global ranking function another important element predicate abstraction methodology abstraction refinement coarse abstraction refined analyzing spurious counterexample show ranking abstraction also posse analogous refinement process discus spurious counter example lead refinement either current predicate base ranking corethe talk based  obtained joint research balaban kesten ld zuck
2005,synthesis revisited generating statechart model scenario-based requirement,constructing program specification long-known general fundamental problem besides theoretical interest question also practical implication since finding good synthesis algorithm could bring major improvement reliable development complex system paper describe methodology synthesizing statechart model scenario-based requirement requirement given language live sequence chart  may played directly gui resulting statecharts object-oriented variant adopted uml implemented algorithm part play-engine tool generated statechart model executed using existing uml case tool
2005,verification procedural program,n/a
2005,tvoc translation validator optimizing compiler,describe tool called tvoc us translation validation approach check validity compiler optimization given source program tvoc prof equivalence source code target code produced running compiler two phase verification process first phase verifies loop transformation using proof rule permute second phase verifies structure-preserving optimization using proof rule validate verification condition validated using automatic theorem prover cvc lite
2005,iiv invisible invariant verifier,paper describes invisible invariant verifier -an automatic tool generation inductive invariant based work  input iiv parameterized system invariance property p output iiv “success” find inductive invariant strengthens p “fail” otherwise iiv run http//eeyorecsnyuedu/servlets/iivss
2005,real time temporal logic past present future,paper attempt improve understanding timed language relation timed automaton start giving constructive proof folk theorem stating timed language specified past fragment mitl accepted deterministic timed automaton hand provide proof certain language expressed future fragment mitl deterministic analyze reason asymmetry
2005,ranking abstraction companion predicate abstraction,predicate abstraction become one successful methodology proving safety property program recently several abstraction methodology proposed proving liveness property paper study “ranking abstraction” program augmented nonconstraining progress monitor abstracted predicate-abstraction allow automatic verification progress property unlike liveness methodology augmentation require complete ranking function expected decrease step rather input component ranking complete ranking function may formedthe premise paper analogy method ranking abstraction predicate abstraction one ingredient refinement predicate abstraction fails one refine ranking abstraction fails one must determine whether predicate abstraction ranking abstraction need refined paper present strategy determining case handthe part analogy automatically deriving deductive proof construct predicate abstraction often used derive program invariant proving safety property boolean combination given predicate deductive proof progress property requires well-founded ranking function instead invariant show obtain concrete global ranking function abstract programswe demonstrate various method example nested loop including bubble sort algorithm linked list
2005,refining undecidability frontier hybrid automaton,reachability becomes undecidable hybrid automaton  simulate turing  minsky  machine asarin schneider shown decidable -dim piecewise constant derivative  class undecidable -dim pcd class lie “open” class -dim hierarchical pcd  class shown equivalent class -dim piecewise affine map  paper first explore -dim hpcd’s proximity decidability showing equivalent -dim pcds translational reset hpcds without reset hierarchy intermediate also equivalent hpcd class presented revealing semblance timed initialized rectangular automaton explore proximity undecidability frontier show -dim hpcds zeno execution integer-checks simulate -counter mm conclude retreating hpcds pams derive simple over-approximating algorithm reachability also defines decidable subclass -dim onto pam  novel non-trivial transformation -dim hpcds “almost decidable” system likely pave way approximate reachability algorithm characterization decidable subclass hoped idea eventually coalesce complete understanding reachability problem class -dim hpcd 
2005,separating fairness well-foundedness analysis fair discrete system,fair discrete system  computational model concurrent program fairness assumption specified term set state analysis fair discrete system involves non-trivial interplay fairness well-foundedness  interplay obstacle automation contribution paper new analysis temporal property fdss analysis us domain binary relation state labeled set index fairness requirement use labeled relation separate reasoning well-foundedness fairness
2005,temporal logic scenario-based specification,provide semantics powerful scenario-based language live sequence chart  show semantics live sequence chart captured using temporal logic done studying various subset lsc language providing explicit translation temporal logic show kernel subset lsc language  embedded within temporal logic ctl* kernel subset embedding strict inclusion show existential chart expressed using branching temporal logic ctl universal chart intersection linear temporal logic branching temporal logic ltl ∩ ctl since translation efficient work described may used development tool analyzing executing scenario-based requirement verifying system requirement
2005,abstraction liveness,unlike model checking restricted finite-state system two method applied verification arbitrary infinite-state system method deductive verification finitary abstraction  finitary abstraction process provides abstraction mapping mapping potentially infinite-state system finite-state one obtaining finite-state abstraction may apply model checking order verify propertyin talk explore relation method finitary abstraction deductive verification one important connection recent proof finitary abstraction powerful deductive verification thus establishing completeness  finitary abstraction method order obtain result necessary extend procedure allowing augmentation verified system auxiliary variable prior application abstraction extension possible transform phenomenon well-founded descent essential proof liveness property fairness property finite abstracted systemsince proof completeness fa method build upon proof completeness deductive verification one may get false impression powerful deductive verification fa much easier apply focus talk aimed dispelling false impression particular case liveness propertieswe consider first case predicate abstraction special case fa view predicate abstraction effort find inductive assertion user know full form assertion identify set atomic formula conjecture exists useful inductive assertion boolean combination atomic formula case let model checker find u correct  boolean combination yield inductive assertion analogy view consider “augmented finitary abstraction” approach situation user find difficult formulate full ranking function required deductive verification identify component ranking function case let model checker arrange combine component full liveness proof case method relies superior ability model checker exhaustively analyze combination finite  set componentsthis work based collaboration ittai balaban yonit kesten lenore zuck
2005,shape analysis predicate abstraction,paper present approach shape analysis based predicate abstraction using predicate base involves reachability relation program variable pointing heap able analyze functional property program destructive heap update list reversal various in-place list sort approach allows verification safety liveness property abstraction use require abstract representation heap node  reachability relation program variablesthe computation abstract transition relation precise automatic yet require use theorem prover instead use small model theorem identify truncated  finite-state version program whose abstraction identical abstraction unbounded-heap version program abstraction finite-state version computed bdd techniquesfor proving liveness property augment original system well-founded ranking function abstracted together system well-foundedness abstracted strong fairness  show restricted class program still includes many interesting case small model theorem applied joint abstractionindependently application shape-analysis example demonstrate utility ranking abstraction method advantage direct use ranking function deductive verification property
2004,model checking abstraction aid parameterized system survey,parameterized system system involve numerous instantiation finite-state module depend parameter defines size example parameterized system include sensor system telecommunication protocol bus protocol cache coherence protocol many protocol underly current state-of-the-art system formal verification parameterized system known undecidable  thus cannot automated recent research shown often case combination methodology allows reduce problem verification parameterized system problem verification finite-state system automatically verifiedthis paper describes several recent methodology based model checking abstraction start method invisible auxiliary assertion combine small-model theorem heuristic automatically generate auxiliary construct used proof correctness parameterized system also describe method counter abstraction offer simple liveness proof many parameterized system discus novel methodology using counter abstraction automatically verify probabilistic parameterized system satisfy temporal specification probability 
2004,validating translation industrial optimizing compiler,paper present approach translation validation optimizing compiler translates synchronous c program machine code program synchronous mean source target program loop free enables representation program single state transformer verification translation correctness based comparison source target state transformer approach implemented tool called mcvt also described
2004,range allocation separation logic,separation logic consists boolean combination predicate form v ≥ v j + c c constant v v j variable ordered infinite type like real integer equality inequality expressed logic propose decision procedure separation logic based allocating small domain  formula’s variable sufficient preserving satisfiability given separation logic formula φ procedure construct inequality graph φ based φ’s predicate graph represents abstraction formula many formula set predicate procedure analyzes graph allocates range variable adequate formula approach finding small finite range enumerating symbolically theoretically empirically efficient method based case-splitting reduction propositional logic experimental  show state-space  allocated procedure frequently exponentially smaller previous method
2004,recognizable timed language,work generalize fundamental notion recognizability untimed timed language essence definition existence right-morphism monoid timed word bounded subset show recognizable language exactly accepted deterministic timed automaton argue perhaps right class timed language closure untimed regular language projection positive accident cannot expected hold beyond finite-state case
2004,smart play-out extended time forbidden element,smart play-out powerful technique executing live sequence chart  us verification technique help run program rather prove property thereof extend smart play-out cover larger set lsc language feature deal efficiently larger model extension cover two key feature rich version lscs namely time forbidden element former crucial system time constraint and/or time-driven behavior latter allows specifying invariant contract behavior forbidden element also help reduce state space considered thus enabling smart play-out handle larger model
2004,liveness incomprehensible ranking,method invisible invariant invisible ranking developed originally order verify temporal property parameterized system fully automatic manner method based instantiate-project-and-generalize heuristic automatic generation auxiliary construct small model property implying sufficient check validity deductive rule premise using construct small instantiation system previous version method invisible ranking restricted case helpful assertion ranking function process depended local state process neighboring process seriously restricted applicability method often required introduction auxiliary variablesin paper extend method invisible ranking case helpful assertion ranking function process may also refer process first develop enhanced version small model property making applicable assertion refer process immediate neighbor enables u apply invisible ranking method parameterized system ring topology case auxiliary assertion refer process develop novel proof rule simplifies selection next helpful transition enables validation premise possible  small model theorem
2004,deductive verification uml model tlpvs,recent year uml applied development reactive safety-critical system quality developed software key factor paper present approach deductive verification system using pvs interactive theorem prover using pvs specification uml kernel language semantics generate formal representation uml model representation verified using tlpvs pvs-based implementation linear temporal logic proof rule apply method verifying two example demonstrating feasibility approach model unbounded event queue object creation variable unbounded domain define notion fairness uml system allowing u verify safety liveness property
2003,voc methodology translation validation optimizingcompilers,growing awareness industry academia crucial role formally verifying translation high-level source-code low-level object code typically performed optimizing compiler formally verifying optimizing compiler one would verify large program feasible due size ongoing evolution modification possibly proprietary consideration translation validation novel approach offer alternative verification translator general compiler particular rather verifying compiler one construct validation tool every run compiler formally confirms target code produced run correct translation source program paper present voc methodology translation validation optimizing compiler distinguish structure preserving optimization establish simulation relation source target code based computational induction structure modifying optimization develop specialized permutation rule paper also describes voc- - prototype translation validator tool automatically produce verification condition global optimization sgi pro- compiler
2003,tlpvs pvs-based ltl verification system,paper present pvs implementation linear temporal logic verification system system includes set theory defining temporal logic number proof rule proving soundness response property strategy aid conducting proof addition implementing framework existing rule also derived new method particularly useful deductive ltl system distributed rank rule verification response property parameterized system presented methodology detailed reducing compassion requirement justice requirement  special attention paid verification unbounded system — system number process unbounded — verification rule appropriate system
2003,robdd size simple cnf formula,reduced ordered binary decision diagram  nowadays one common dynamic data structure boolean function among many area application verification model checking computer aided design last year sat checker based cnf representation boolean function getting attention alternative robdd based method show difference cnf representation robdd representation one degenerate case – random monotone cnf formula examine model give almost matching lower upper bound robdd size different case show soon formula non-trivial robdd size becomes exponential thus showing perhaps one fundamental advantage sat solver robdds
2003,formal modeling c elegans development scenario-based approach,present preliminary  new approach formal modeling biological phenomenon approach stem conceptual compatibility method logic data collection analysis field developmental genetics language method tool scenario-based reactive system design particular use recently developed methodology consisting language live sequence chart play-in/play-out process model well-characterized process cell fate acquisition c elegans vulval development
2003,parameterized verification probabilistic abstraction,paper study automatic verification liveness property probability  parameterized program include probabilistic transition proposes two novel approach problem first approach based planner occasionally determines outcome finite sequence “random”choices random choice performed non-deterministicallyusing planner probabilistic protocol treated like non-probabilistic one verified second approach based γ-fairness notion fairness sound complete verifying simple temporal property  finite-state systemsthe paper present symbolic model checker based γ-fairnesswe show network invariant approach adapted accommodate probabilistic protocol utility planner approach demonstrated probabilistic mutual exclusion protocol utility approach γ-fairness network invariant demonstrated lehman rabins courteous philosopher algorithm
2003,smart play-out,describe smart play-out new method executing analyzing scenario based behavior part play-in/play-out methodology play-engine tool behavior played directly system gui done play-engine continuously construct live sequence chart  powerful extension sequence diagram later behavior played freely gui tool executes lscs directly thus driving system behavior inherent difficulty constructing ``play-out mechanism resolve nondeterminism allowed lsc specification order obtain executable model smart play-out recent strengthening play-out mechanism address problem using powerful verification method mainly model-checking execute analyze lscs helping execution avoid deadlock violation thus smart play-out utilizes verification technique run program rather verify program respect given requirement traditional verification approach idea appear relevant various stage system development including requirement specification analysis implementation testing
2003,model-checking abstraction aid parameterized system,parameterized system system involve numerous instantiation finite-state module example parameterized system include tele-communication protocol bus protocol cache coherence protocol many protocol underly current state-of-the-art system formal verification parameterized system known undecidable  thus cannot automated recent research shown many case possible use abstraction method generate finite-state system parameterized system finite-state system model-checked successful possible conclude original parameterized system satisfies requirement otherwise often case counter-example produced model checker indicate error original parameterized system combined technique allows automatic verification parameterized system
2002,timec time constraint language ilp processor compilation,enabled risc technology low-cost commodity microprocessor performing ever increasing level significantly via instruction level parallelism  turn increase opportunity use variety day-to-day application ranging simple control appliance microwave oven sophisticated system cabin control modern aircraft indeed embedded application represent segment computer industry great potential growth however growth currently impeded lack robust optimizing compiler technology support assured rapid inexpensive prototyping real-time software context microprocessor ilp paper describe novel notation timec specifying timing constraint program independent base language used develop embedded application timec specification language independent instrumented imperative object-oriented language non-intrusively show program synthesis problem arise time_tract specification subset timec always tractable contrast range specification mechanism proposed earlier yield substantially intractable synthesis question thereby limiting potential utility compare tractability related expressive power issue timec extant mechanism specifying property timed program
2002,voc translation validator optimizing compiler,growing awareness industry academia crucial role formally verifying translation high-level source-code low-level object code typically performed optimizing compiler formally verifying optimizing compiler one would verify large program feasible due size ongoing evolution modification possibly proprietary consideration translation validation novel approach offer alternative verification translator general compiler particular rather verifying compiler one construct validation tool every run compiler formally confirms target code produced run correct translation source program paper present voc methodology translation validation optimizing compiler distinguish structure preserving optimization establish simulation relation source target code based computational induction structure modifying optimization develop specialized permutation rule paper also describes voc- - prototype translation validator tool automatically produce verification condition global optimization sgi pro- compiler
2002,translation run-time validation optimized code,paper present approach validation optimizing compiler emphasis aggressive architecture-targeted optimization try obtain highest performance modern architecture particular epic-like micro-processors rather verify compiler approach translation validation performs validation check every run compiler producing formal proof produced target code correct implementation source codefirst survey standard approach validation optimization preserve loop structure code  present simulation-based general technique validating optimization describe tool voc- implement technique aggressive optimization typically alter loop structure code loop distribution fusion loop tiling loop interchange present set permutation rule establish transformed code satisfies implied data dependency necessary validity considered transformation describe necessary extension voc- order validate structure-modifying optimizationsfinally paper discus preliminary work run-time validation speculative loop optimization involves using run-time test ensure correctness loop optimization neither compiler compiler-validation technique guarantee correctness unlike compiler validation run-time validation task determining optimization generated incorrect code also task recovering optimization without aborting program producing incorrect result technique applied several loop optimization including loop interchange loop tiling software pipelining appears quite promising
2002,small model property small,efficient decision procedure equality logic  major importance proving logical equivalence system introduce efficient decision procedure theory equality based finite instantiation main idea analyze structure formula compute accordingly small domain variable formula satisfiable iff satisfied domain show problem finding small domain reduced interesting graph theoretic problem method enabled u verify formula containing hundred integer floating point variable could efficiently handled previously known technique
2002,complete proof system qptl,paper present axiomatic system quantified propositional temporal logic  propositional temporal logic equipped quantification proposition  advantage extended temporal logic expressive power strictly higher unquantified version  equal s well automaton another important application qptl use formulating verifying refinement relation reactive system fact completeness proof based reduction qptl formula bchi automaton performing equivalence transformation automaton formally justifying transformation bidirectional refinement
2002,validating software pipelining optimization,paper present method translation validation specific optimization software pipelining optimization used increase instruction level parallelism epic type architecture using methodology  establish simulation relation source target based computational induction describe algorithm automatically produce set decidable proof obligation paper also describes spv prototype translation validator automatically produce verification condition software pipelining optimization sgi pro- compiler verification condition checked automatically cvc  checker
2002,liveness 0 1 infty-counter abstraction,introduce  -counter abstraction method parameterized system unbounded size abstracted finite-state system assuming process parameterized system finite-state abstract variable limited counter count local state process number process currently local state counter saturated  mean κ =  whenever  process state emphasis paper derivation adequate sound set fairness requirement  enable proof liveness property abstract system safely conclude corresponding liveness property original parameterized system illustrate method parameterized system including szymanski’s algorithm mutual exclusion method also extended deal parameterized system whose process may infinitely many local state bakery algorithm choosing “interesting” state assertion -counting number process satisfying
2002,deductive proof system ctl,paper present sound  complete deductive proof system verification ctl* property possibly infinite-state reactive system proof system based set proof rule verification basic ctl* formula namely ctl* formula embedded path quantifier first show decompose proof general  ctl* formula proof basic ctl* formula present proof rule useful basic ctl formula present methodology transforming arbitrary basic formula one special case
2002,network invariant action,paper present method network invariant verifying wide spectrum ltl property including liveness parameterized system method applied establish validity property system every value parameter n application method requires checking abstraction relation two finite-state system present proof rule based method abstraction mapping abadi lamport implemented tlv modelc hecker incorporates history prophecy variable effectiveness network invariant method illustrated several example including deterministic probabilistic version dining-philosophers problem
2002,embedded system challenge specification verification,position paper mention challenge specification verification raised emerging discipline embedded system main proposition paper feasible solution problem effective reliable dependable construction embedded system provided seamless development process based formal specification required system proceeds activity verification analysis specification early stage design followed automatic code generation preceded necessary code distribution allocationas prototype example development process quote experience sacres project follow-up safeair necessary extension preliminary experiment discussed evaluated
2002,smart play-out behavioral requirement,describe methodology executing scenario-based requirement reactive system focusing “playing-out” behavior using formal verification technique driving execution methodology implemented full play-engine approach appears useful many stage development reactive system might also pave way system constructed directly requirement without need intra-object intra-component modeling coding
2002,understanding uml formal semantics concurrency communication real-time uml,define subset krtuml uml rich enough express behavioural modelling entity uml used real-time application covering aspect active object dynamic object creation destruction dynamically changing communication topology inter-object communication asynchronous signal based communication synchronous communication using operation call shared memory communication global attribute define formal interleaving semantics kernel language associating model m ∈ krtuml symbolic transition system sts outline compile industrial real-time uml model making use generalisation hierarchy weak- strong aggregation hierarchical state-machines krtuml propose modelling guideline real-time application uml work provides semantical foundation formal verification real-time uml model described companion paper 
2002,application formal method biology,first introduction notion “reactive systems” development specification language  verification method class system stated notion encompasses wider class system program hardware design applicable complex system unrelated computer similar vein acronym uml talk “modeling language” rather “programming language” implying approach applicable general class system computer-relatedwhile claim wider applicability always implied never seriously substantiated talk describe recent attempt apply discipline formal method modeling analysis prediction biological system corresponds emerging trend biology according biology st century direct attention towards understanding component part collaborate create whole system organism transition identifying building block  integrating part whole  use mathematics algorithmics need language legible biologist computer faithful logic biological system interestin search appropriate rigorous approach modeling biological system examined formal modeling method computer science originally developed specification design analysis reactive system found visual formalism statecharts address challenge within general framework object-oriented modeling  followed initial study carried constructed detailed executable model cell activation able using verification technique find correct flaw original modelfollowing preliminary study undertaken challenging project applying extending methodology constructing detailed model developmental process lead formation egg-laying system nematode c elegans model built capture natural yet rigorous analyzable way aspect concurrency multi scalar data hierarchical organization project involves close collaboration naaman kam david harel irun cohen department immunology weizmannn institute
2002,automatic verification probabilistic free choice,study automatic method establishing p-validity  simple temporal property finite-state probabilistic system proposed approach replaces p-validity validity non-probabilistic version system probabilistic choice replaced non-deterministic choice constrained compassion  requirement “simple” property temporal property whose temporal operator ◊  dual □  general appropriate compassion requirement “global” since involve global state system yet many case transformed “local” requirement enables verification model checker demonstrate methodology translating problem p-validity verification system local compassion requirement “courteous philosophers” algorithm  parameterized probabilistic system notoriously difficult verify outline verification algorithm obtained tlv model checker
2001,verification augmented abstraction automata-theoretic view,paper deal proof method verification finitary abstraction  present alternative approach verification  reactive system assume negation property verified given user form infinite-state nondeterministic bchi discrete system  method consists two-step process first step system  specification combined single infinite-state fair discrete system  abstracted finite-state automaton second step us model checking establish abstracted automaton infeasible ie computation  method considered viable alternative verification temporal deduction main method generally applicable verification infinite-state system paper present general recipe  abstraction shown sound soundness mean infeasibility abstracted  implies infeasibility unabstracted one implying turn validity property concrete  system make method applicable verification liveness property pure abstraction sometimes longer adequate show augmenting system appropriate  progress monitor obtain augmented system whose computation essentially original system may abstracted preserving desired liveness property refer extended method verification augmented abstraction  proceed show  method sound complete proving property whose negation expressible  given every linear temporal logic  property translated  establishes  method sound complete proving validity  property including safety liveness
2001,symbolic model checking rich assertional language,paper show appropriate choice rich assertional language possible extend utility symbolic model checking beyond realm bdd-represented finite-state system domain infinite-state system leading powerful technique uniform verification unbounded  process network main contribution paper formulation general framework symbolic model checking infinite-state system demonstration many individual example uniformly verified parameterized design appear literature special case general approach verifying correctness futurebus+ design single-bus configuration extending technique tree architecture
2001,scheduling time-constrained instruction pipelined processor,work investigate problem scheduling instruction idealized microprocessor multiple pipeline presence precedence constraint release-times deadline latency constraint latency lij specifies must least lij time-steps completion time instruction start time instruction j latency lij= used specify j may scheduled concurrently earlier present generic algorithm run o+ne time given n instruction e edge precedence dag  functional inverse ackermann function algorithm used construct feasible schedule various class instance including instance following configuration  one pipeline individual release-times deadline latency instruction restricted    pipeline individual release-times deadline monotone-interval order precedence  two pipeline latency   release-times deadline  one pipeline latency   individual processing time least one  pipeline intree precedence constant latency deadline  pipeline outtree precedence constant latency release-times instance deadline optimal schedule minimize maximal tardiness constructed using binary search iteration algorithm obtain  using backward scheduling general relaxation method extends unifies clarifies many previous  instruction scheduling pipelined parallel machine
2001,parameterized verification automatically computed inductive assertion,paper present method called method verification invisible invariant automatic verification large class parameterized system method based automatic calculation candidate inductive assertion checking inductiveness using symbolic model-checking technique task first show use model-checking technique finite  instance parameterized system order derive candidate invariant assertion next show premise standard deductive inv rule proving invariance property automatically resolved finite-state  method need interactive theorem proving combining automatic computation invariant automatic resolution vcs  yield  incomplete fully automatic sound method verifying large class parameterized system generated invariant transferred vc-validation phase without ever examined user explains refer “invisible” efficacy method demonstrated automatic verification diverse parameterized system fully automatic efficient manner
2001,beyond regular model checking,recent year established regular model checking successfully applied several parameterized verification problem however many parameterized verification problem cannot described regular language thus cannot verified using regular model checking study try practice symbolic model checking using class language expressive regular language provide three method uniform verification non-regular parameterized system
2001,falsification verification,paper enhances linear temporal logic model checking process ability automatically generate deductive proof system meet temporal specification thus emphasize point view model checkingcan also used justify system actually work show exploitingthe information graph generated failed search counterexample generate fully deductive proof system meet specification
2001,range allocation equivalence logic,range allocation problem recently introduced part efficient decision procedure deciding satisfiability equivalence logic formula without uninterpreted function type formula mainly used proving equivalence refinement system  problem find polynomial time small finite domain variable equality formula φ φ valid valid small domain heuristic presented finding small domain static ie find small set integer constant variable paper show new flexible range allocation method also show limitation related approach proving lower bound size state space generated procedure prove lower bound reduce question graph theoretic counting question believe independent interest
2001,stick stone coding scheme parameterized verification,consider problem uniform algorithmic verification parameterized system requires establishing single verification effort correctness parameterized family system value parameter observed several researcher using regular expression equivalent formalism  assertional language perform symbolic model checking system unbounded number stateswe start showing verification problem viewed taking place space  dimension time control data illustrate regular expression naturally applied deal dimension case becomes unbounded unfortunately extending tool regular expression  dimension lead undecidabilitywe therefore consider alternate way dealing system unbounded control unbounded data appropriate abstraction encoding frequently possible encode two dimension within single dimension using coding scheme refer “sticks stones” method illustrated parameterized version bakery petersons algorithm mutual exclusion among thing show case use language expressive regular expression still get manageable verification algorithm example case petersons algorithm n process cannot analyzed term purely regular expression
2001,automatic deductive verification invisible invariant,paper present method automatic verification certain class parameterized system bounded-data system consisting n process  process finite-state first show use standard deductive inv rule proving invariance property generated verification condition automatically resolved finite-state  method need interactive theorem provingnext show use model-checking technique finite  instance parameterized system order derive candidate invariant assertion combining automatic computation invariant previously mentioned resolution vcs  yield  incomplete fully automatic sound method verifying bounded-data parameterized system generated invariant transferred vc-validation phase without ever examined user explains refer “invisible”we illustrate method non-trivial example cache protocol provided steve german
2000,verification clocked hybrid system,paper present new computational model real-time system called clocked transition system  model ct model development previous timed transition model change inspired model timed automaton new model lead simpler style temporal specification verification requiring extension temporal language present verification rule proving safety nd liveness property clocked transition system rule associated verification diagram verification response property requires adjustment proof rule developed untimed system reflecting fact progress real time system ensured progress time fairness style verification rule close verification style untimed system allows use verification method tool developed u ntimed reactive system proving interesting property real-time systemswe conclude presentation branching-time based approach verifying arbitrary given ct non-zeno finally present extension model invariance proof rule hybrid system
2000,verification augmented finitary abstraction,paper deal proof method verification finitary abstraction  present feasible approach verification temporal property  reactive system method consists two-step process first step system temporal specification jointly abstracted finite-state system finite-state specification second step us model checking establish validity abstracted property abstracted system vfa method considered viable alternative verification temporal deduction main method generally applicable verification infinite-state system paper present general recipe joint abstraction shown sound soundness mean validity abstract system implies validity concrete  system make method applicable verification liveness property pure abstraction sometimes longer adequate show augmenting system appropriate  progress monitor obtain augmented system whose computation essentially original system may abstracted preserving desired liveness property refer extended method verification augmented abstraction  proceed show vaa method sound complete proving property expressible temporal logic  completeness establishes whenever property valid exists finitary abstraction abstract system augmented appropriate progress monitor finite-state system validated abstracted property
2000,propositional temporal logic decidability completeness,sound complete axiomatic system tableau-based decision procedure presented propositional temporal logic linear discrete time model axiomatic system decision procedure presented full logic including past operator contain clear identification part whose omission yield axiomatization decision procedure future fragment paper summarizes work  year intended provide definitive reference version propositional temporal logic used specification verification reactive system
2000,control data abstraction cornerstone practical formal verification,spite impressive progress development two main method formal verification reactive system  symbolic model checking deductive verification still limited ability handle large system generally recognized way method ever scale extensive use abstraction modularization break task verifying large system several smaller task verifying simpler systemsin paper review two main tool compositionality abstraction framework linear temporal logic illustrate application two method reduction infinite-state system finite-state system verified using model checkingthe technical contribution contained paper full formulation abstraction applied system weak strong fairness requirement general temporal formula presentation compositional framework shared variable application forming network invariant
2000,rigorous development embedded system,opinion differ main challenge posed meteoritically expanding area embedded system consider communication correct blending local-area wide-area network main obstacle overcome open way accelerated development field others consider customized hardware key open last blocking lock according opinion expressed talk important problem whose solution greatly improve ability construct reliable embedded system timely manner development methodology process talk outline rigorous development approach provides seamless passage requirement running code  special care taken validate correctness step process concept seamless development process embedded system grew european esprit project sacres constructed prototype development environment safety critical system component sacres environment included executable system specification using either statebased specification language statecharts dataflowbased specification language sildex combination thereof translated  specification common format provided tool formal verification resulting design verification tool provided unit verification could verify single module component within design using model-checking technique applied module one could invoke tool system verification combine  unit verification infer property bigger subsystem common design satisfactorily validated next development step invoked code generator translated high-level specification running code program language choice c ada java part code-generation process one could activate various allocation optimization process relevant  code distribution mean user earmark activities/modules allocated node distributed architecture providing information communication regime distributed net code generator could also generate necessary protocol support application important element sacres tool suit translation performed code generator continuously validated special code-validation tool presenting capability sacres kernel proceed outline extension stretch scope applicability methodology cover full range requirement full implementation extension end spectrum low end describe extension enable tool add software/hardware partition support system co-design appropriate technique hardware compilation make customized hardware design part seamless process upper end discus several approach help designer embedded system formulate requirement either visual style extending popular message-sequence-charts notation simulated test-driving mock-up system construction outline method automatic transformation formal requirement executable specification complete top link seamless vertically integrated development process embedded system
2000,keynote address abstraction composition symmetry little deduction remedy state explosion,talk consider possible remedy state explosion problem enabling verification large design require user interaction cannot done fully automatic manner explore tradeoff connection different approach deduction abstraction searching natural convenient mode user interaction speculate useful additional measure automation make task user supervision even simpler
2000,liveness acceleration parameterized verification,paper considers problem uniform verification parameterizedsystems symbolic model checking using formula f  symbolic representation set state technical difficulty addressed work many case standard model-checking computation fail convergeusing tool tlv  formulated general approach acceleration transition relation allowing unbounded number different process change local state  single step demonstrate acceleration process solves difficulty enables efficient symbolic model-checking many parameterized system mutual-exclusion token-passing protocol value n parameter specifying size systemmost previous approach uniform verification parameterized system considered safety property system paper present approach verification iveness property demonstrate application prove accessibility property considered protocol
2000,formal verification ricart-agrawala algorithm,paper present first formal verification ricart- agrawala algorithm  distributed mutual exclusion arbitrary number node us temporal methodology  establish safety property mutual exclusion liveness property accessibility establish property arbitrary number node parameterized proof rule used presented     new efficient notation introduced facilitate presentation liveness proof verification diagramsthe proof carried using stanford temporal prover   software package support formal verification temporal specification concurrent reactive system
2000,comparison two verification method speculative instruction execution,paper describe compare two methodology verifying correctness speculative out-of-order execution system interrupt method deductive  based refinement first proof direct refinement sequential system second proof combine refinement induction number retirement buffer slot
1999,proving refinement using transduction,summarywhen designing distributed system one faced problem verifying refinement two specification given different level abstraction suggested verification technique literature include refinement mapping various form simulation present verification method refinement two system proven constructing transducer input computation concrete system output matching computation abstract system transducer us fifo queue hold segment concrete computation matched yet allows finite delay occurrence concrete event determination corresponding abstract event delay often make use prophecy variable backward simulation unnecessary important generalization method prove refinement modulo transformation observed sequence event method adapted replacing fifo queue component allows appropriate transformation sequence event particular case partial-order refinement ie refinement preserve subset ordering event system example sequential consistency serializability case sequential consistency illustrated proof sequential consistency cache protocol
1999,decidable integration graph,integration graphsare computational model developed attempt identify simple hybrid system decidable analysis problem start class ofconstant slope hybrid system right-hand side differential equation integer constant refer continuous variable whose right-hand side constant always  astimers continuous variable calledintegrators first result shown paper simple question reachability given state undecidable even simple class system restrict model even impose requirement test refers integrator may appear within loop graph restricted class cshs calledintegration graph main  paper reachability problem integration graph decidable two special case case single timer case single test involving integrator expressive power integration-graphs formalism demonstrated showing typical problem studied within context calculus duration timed statecharts formulated reachability problem restricted integration graph high fraction fall subclass single timer single test involving integrator
1999,translation validation signal c,translation validation alternative verification translator  rather proving advance compiler always produce target code correctly implement source code  individual translation  followed validation phase verifies target code produced run correctly implement submitted source program order practical alternative compiler verification key feature validation full automationsince validation process attempt “xunravel” transformation effected translator task becomes increasingly difficult  increase sophistication variety optimization method employed translator paper address practicability translation validation highly optimizing industrial code generator signal widely used synchronous language c introduce new abstraction technique part automation approach
1999,deciding equality formula small domain instantiation,introduce efficient decision procedure theory equality based finite instantiation using finite instantiation method common practice take range   range non-boolean variable resulting state-space n n  although various attempt minimize range made typically either required various restriction investigated formula effective many case n n state-space cannot handled bdd-based tool within reasonable amount time paper show significantly smaller domain algorithmically found analyzing structure formula also show upper bound state-space based analysis method enabled u verify formula containing hundred integer floating point variable
1999,verifying liveness augmented abstraction,paper deal proof method verification augmented finitary abstraction  present effective approach verification temporal property  reactive system method consists two-step process first step system temporal specification combined abstracted finite-state büchi automaton second step us model checking establish emptiness abstracted automatonthe  method considered viable alternative verification temporal deduction main method shown complete verification infinite-state systemsthe paper present general recipe abstraction büchi automaton shown sound soundness mean emptiness abstract automaton implies emptiness concrete  automaton make method applicable verification liveness property pure abstraction sometimes longer adequatewe show augmenting system appropriate  progress monitor obtain augmented system whose computation essentially original system may abstracted preserving desired liveness property proceed show  method sound complete proving property expressible temporal logic  completeness establishes whenever infinite-state büchi automaton computation exists finitary abstraction abstract automaton augmented appropriate progress monitor finite-state büchi automaton computation
1999,perfect verification combining model checking deductive analysis verify real-life software,paper present approach formal verification complete software system intended support flagship product perfecto technology enforces application security open communication netbased initial experimentation decided verification method based combination model-checking using spin deductive verification handle data-intensive element design analysis combination cover formal verification important aspect complete systemin order enable model checking large portion design developed assume-guarantee approach support compositional verification describe general approach implemented spin frameworkthen explain need split verification activity modelchecking part deal control issue concurrency deadlocking deductive part handle data-intensive element design
1999,orthogonal polyhedron representation computation,paper investigate orthogonal polyhedron ie polyhedron finite union full-dimensional hyper-rectangles define representation scheme polyhedron based vertex show compact representation scheme canonical  polyhedron dimension develop efficient algorithm membership face-detection boolean operation representation
1999,framework scheduler synthesis,present framework integrating specification scheduler generation real time system first step system include arbitrarily designed task  specified timed petri net second step tool generates general non preemptive online scheduler specification using controller synthesis technique
1999,verifying tomasulos algoithm refinement,paper tomasulos algorithm out-of-order execution shown refinement sequential instruction execution algorithm correctness tomasulos algorithm established proving register file tomasulos algorithm sequential algorithm agree instruction completed
1998,code validation tool cvt automatic verification compilation process,describe cvt - fully automatic tool code validation ie verifying target code produced code-generator  correct implementation source specification approach viable alternative full formal verification code-generator program advantage freezing code generator design verification cvt developed context esprit project sacres validates translation statemate/slidex mixed specification c use novel technique based uninterpreted function analysis bdd-represented small model enables u validate source specification several thousand line represents typical industrial-size safety-critical application
1998,fast algorithm scheduling time-constrained instruction processor ilp,instruction scheduling central achieving performance modern processor instruction level parallelism  classical work area spanned theoretical foundation algorithm instruction scheduling provable optimality well heuristic approach experimentally validated performance improvement typically theoretical foundation developed context basic-blocks code paper provide theoretical foundation scheduling basic-blocks instruction time-constraints play important role compile-time ilp optimization embedded application present algorithm scheduling unit-execution-time instruction machine multiple pipeline presence precedence constraint release-times deadline latency l/sub ij/ pair instruction j algorithm run time /spl alpha/ functional inverse ackermann function used construct feasible schedule two class instance  one pipeline latency instruction restricted value    arbitrary number pipeline monotone-interval order precedence result seen natural extension previous work instruction scheduling pipelined machine presence deadline
1998,deductive v model-theoretic approach formal verification abstract invited talk,well-known duality proof- model-theoretic approach classic logic assumes even greater significance application approach formal verification software hardware designsin talk survey main model-theoretic deductive approach formal verification illustrated enumerative symbolic model checking technique deductive verification system step pvs hol etc motivate current feeling combination dual approach enable u formally verify really complex large system proposed idea model-checking deduction effectively combined mutually beneficial way described illustrated simple case study
1998,herbrand automaton hardware verification,paper present new computational model herbrand engine combine finite-state control uninterpreted data function register thus yielding finite representation infinite-state machine herbrand engine used provide high-level model out-of-order execution design micro-processors problem verifying highly parallel design out-of-order execution correctly implement instruction set architecture reduced establishing equivalence two herbrand engine show reasonably restricted class engine equivalence problem decidable present two algorithm solving problemultimately appropriate statement correctness out-of-order execution produce final state  purely sequential machine running program
1998,discretization delay timed automaton digital circuit,paper solve following problem “given digital circuit composed gate whose real-valued delay integer-bounded interval way discretize time preserving qualitative behavior circuit” problem described open  “preservation qualitative behavior” interpreted strict sense original sequence event original ordering obtain following two acyclic  circuit whose input change answer positive constant δ depending maximal number possible event circuit restrict event take place multiple δ still preserve qualitative behavior cyclic circuit answer negative simple circuit three gate demonstrate qualitative behavior cannot captured discretization  nevertheless show weaker notion preservation similar  allows many case verify discretized circuit δ= verification  valid dense time
1998,translation validation dc+ c*,translation validation alternative verification translator  rather proving advance compiler always produce target code correctly implement source code  individual translation  followed validation phase verifies target code produced run correctly implement submitted source program order practical alternative compiler verification key feature validation full automationin paper demonstrate feasibility translation validation industrial code generator dc+ -a widely used intermediate format synchronous languages- c explain compilation pattern dc+ c advocate new abstraction technique fragment first order logic part automation approach
1998,verification data-insensitive circuit in-order-retirement case study,large class circuit  formally verified completely ignoring precise characteristic  data manipulated circuit literature often described use uninterpreted function implying concrete operation applied data abstracted unknown featureless function paper briefly introduce abstract unifying model datainsensitive circuit claim development model perhaps even theory circuit schema significantly contribute development efficient comprehensive verification algorithm combining deductive well enumerative methodsas case study present paper algorithm out-of-order execution in-order retirement show refinement sequential instruction execution algorithm refinement established deductively proving  register file out-of-order algorithm sequential algorithm agree time two system synchronized instruction retirement time
1998,fair synchronous transition system liveness proof,present compositional semantics synchronous system capture safety progress property system fair synchronous transition system  model introduce paper extends basic αsts model  introducing operation parallel composition restriction variable addressing fairness introduce weak fairness  condition ensures communication deadlock system occur need external synchronization present extended version linear time temporal logic  expressing proving safety liveness property synchronous specification provide sound compositional proof system
1998,algorithmic verification linear temporal logic specification,methodological paper present coherent framework symbolic model checking verification linear-time temporal logic  property reactive system taking full fairness consideration use computational model fair kripke structure  take account justice  compassion  approach presented reduces model checking problem question whether given fks feasible contribution paper twofold methodological level present direct self-contained exposition full ltl symbolic model checking without resorting reduction either ctl automaton technical level extends previous method dealing compassion algorithmic level instead adding specification providing first symbolic method checking feasibility fkss presented algorithm also used  symbolic model-checking ctl formula fair kripke structure compassion requirement
1998,translation validation synchronous language,translation validation alternative verification translator  rather proving advance compiler always produce target code correctly implement source code  individual translation  followed validation phase verifies target code producted run correctly implement submitted source program order practical alternative compiler verification key feature validation full automationsince validation process attempt “unravel” transformation effected translator task becomes increasingly difficult  increase sophistication variety optimization method employed translator paper address feasibility translation validation highly optimizing industrial code generator dc+ widely used intermediate format synchronous language c
1998,modularization abstraction key practical formal verification,spite impressive progress development two main method formal verification reactive system — model checking  deductive verification still limited ability handle large system generally recognized way method ever scale extensive use abstraction modularization break task verifying large system several smaller task verifying simpler systemsin methodological paper review two main tool compositionality abstraction framework linear temporal logic illustrate application two method reduction infinite-state system finite-state system verified using model checkingthe modest technical contribution contained paper full formulation abstraction applied system weak strong fairness requirement general temporal formula presentation compositional framework shared variable application forming network invariant
1998,translation validation,present notion translation validation new approach verification translator  rather proving advance compiler always produce target code correctly implement source code  individual translation  followed validation phase verifies target code produced run correctly implement submitted source program several ingredient necessary set — fully automatic — translation validation process among area common semantic framework representation source code generated target code formalization notion “correct implementation” refinement relation syntactic simulation-based proof method allows automatically verify one model semantic framework representing produced target code correctly implement another model represents source  ingredient elaborated paper illustrate new approach challenging case consider translation  synchronous multi-clock data-flow language signal asynchronous  c-code
1997,progress symbolic verification timed automaton,paper discus practical difficulty analyzing behavior timed automaton report  obtained using experimental bdd-based extension kronos treated example originating timing analysis asynchronous boolean network cmos circuit delay uncertainty  outperform obtained previous implementation timed automaton verification tool
1997,symbolic model checking rich ssertional language,paper show appropriate choice rich assertional language possible extend utility symbolic model checking beyond realm bdd-represented finite-state system domain infinite-state system leading powerful technique uniform verification unbounded  process networksthe main contribution paper formulation general framework symbolic model checking infinite-state system demonstration many individual example uniformly verified parameterized design appear literature special case general approach verifying correctness futurebus+ design singlebus configuration extending technique tree architecture establishing presented method precise dual top-down invariant generation method used deductive verification
1997,verifying out-of-order execution,n/a
1997,compositional real-time semantics statemate design,paper present reference semantics verication tool currently development allowing verify temporal property embedded control sys- tems modelled using statemate system semantics reported divert others reported literature  faithfully modelling semantics supported statemate simulation tool diver recent paper harel naamad  providing compositional semantics prerequisite support compositional verication method degree math- ematical rigour use variant synchronous transition system introduced manna pnueli  base model semanticsthe statemate modelling language construct covered paper activity chart modelling functional decomposition design subunit called activity well information flow statecharts modelling reactive behaviour using well established approach hierarchically organized state-machines strive verication approach compositional wrt decomposition system subsystem allow activity “reasonable” complexity veried using symbolic model checking    larger activity veried basis proof-systems relating property individual activity property compound activity using well known assumption commitment paradigm    key topic paper construction called compositional model “rich enough” model statemate parallel composition intersection innite trace generated component parallel composition roughly compositional model provide room padding arbitrary  environment interaction computation component alternatively construction compositional model phrased requirement model support sufficiently rich class observables assumption-commitment style reasoning complete sense paper derives set atomic proposition included observables assumption- commitment style temporal logic supported verication tool
1997,two decade temporal logic achievement challenge abstract
1997,verifying liveness property reactive system tutorial abstract,n/a
1997,data-structures verification timed automaton,paper suggest numerical decision diagram bdd-based data-structure representing certain subset euclidean space namely encountered verification timed automaton unlike representation scheme ndds canonical provide necessary operation needed verification synthesis timed automaton report preliminary experimental 
1996,using ghost variable prove refinement,propose method proving refinement program based augmenting program ghost  variable statement assign value variable show many case augmentation replace need explicit refinement mapping variable one system private variable system novel feature proposed methodology expression assigned ghost variable may depend future may replace need prophecy variable defined decreasing induction require version finite-image hypothesis believe proving refinement program augmentation lead natural style refinement easier design comprehend allowing future-dependent expression program requires extension temporal methodology proving property program extension explained discussed paper
1996,platform combining deductive algorithmic verification,describe computer-aided verification system combine deductive algorithmic  verification method system called tlv  constructed additional layer superimposed top cmu smv system verify finite-state system relative linear temporal logic  well ctl specification system verified either hardware circuit written smv design language finite-state reactive program written simple programming language paper present common computational model support two type application high-level interactive language tlv-basic temporal verification rule proof complex assertion written illustrate efficiency generality gained combining deductive algorithmic technique several example culminating verification fragment futurebus+ system analysis futurebus+ system even managed detect bug discovered previous model-checking analysis system
1995,learnability infinitary regular set,paper extend automaton synthesis paradigm infinitary language subset set  infinite sequence alphabet  main result polynomial algorithm learning sub-class -regular set membership query counter-examples based framework suggested angluin  inform comput - learning regular subset *
1995,reachability analysis dynamical system piecewise-constant derivative,paper consider class hybrid system namely dynamical system piecewise-constant derivative  system consist partition euclidean space finite set polyhedral set  within region dynamic defined constant vector field hence discrete transition occur boundary region trajectory change directionwith respect system investigate reachability question given effective description system two polyhedral subset p q state-space trajectory starting xp reaching point q main  decision procedure two-dimensional system undecidability result three dimension
1995,timing analysis asynchronous circuit using timed automaton,paper present method modeling asynchronous digital circuit timed automaton constructed timed automaton serve “mechanical” verifiable object asynchronous sequential machine sense  automaton synchronous machine  combined recent  concerning analysis synthesis timed automaton provide systematic treatment large class problem could treated conventional simulation method ad-hoc fashion problem solved due  presented paper include reachability analysis circuit uncertainty gate delay input arrival time inferring necessary timing constraint input signal guarantee proper functioning circuit calculating delay characteristic component required order meet given behavioral specificationsnotwithstanding existence negative theoretical  concerning worst-case complexity timed automaton analysis algorithm initial experimentation kronos tool timing analysis suggest timed automaton derived circuit might hard analyze practice
1995,verifying clocked transition system,paper present new computational model real-time system called clocked transition system  model ct model development previous timed transition model change inspired model timed automaton new model lead simpler style temporal specification verification requiring extension temporal language present verification rule proving safety property  clocked transition system separate rule proving  response property rule associated verification diagram verification response property requires adjustment proof rule developed untimed system reflecting fact progress real time system ensured progress time fairness style verification rule close verification style untimed system allows use verification method tool developed untimed reactive system proving property real-time system
1995,complete proof system qptl,paper present axiomatic system quantified propositional temporal logic  propositional temporal logic equipped quantification proposition  advantage extended temporal logic expressive power strictly higher unquantified version  equal si well /spl omega/-automata another important application qptl use formulating verifying refinement relation reactive system fact completeness proof based reduction qptl formula buchi automaton performing equivalence transformation automaton formally justifying transformation
1995,synthesis discrete controller timed system extended abstract,paper present algorithm automatic synthesis real-time controller finding winning strategy certain game defined timed-automata alur dill game outcome depends player action well timing believe  pave way application program synthesis technique construction real-time embedded system specification
1994,temporal proof methodology timed transition system,extend specification language temporal logic corresponding verification framework underlying computational model deal real-time property reactive system abstract notion timed transition system generalizes traditional transition system conservatively qualitative fairness requirement replaced  quantitative lower-bound upper-bound timing constraint transition framework model real-time system communicate either shared variable message passing real-time issue timeouts process priority  process scheduling exhibit two style specification real-time system first approach us time-bounded version temporal operator second approach allows explicit reference time special clock variable corresponding two style specification present compare two different proof methodology verification timing requirement expressed style bounded-operator style provide set proof rule establishing bounded-invariance bounded-responce property timed transition system approach generalizes standard temporal proof rule verifying invariance response property conservatively explicit-clock style exploit observation every time-bounded property safety property use standard temporal proof rule establishing safety property
1994,proving partial order property,temporal verification method based upon partial order semantics trace  presented semantic model used express distributed aspect program eg property serializability database transaction layering program snapshot parallel execution program segment proof rule shown sound relatively complete
1994,development hybrid system,consider goal perspective area hybrid system particular compare several semantic model proof approach temporal logic proposed formal treatment hybrid system
1994,prooving safety property hybrid system,propose methodology specification verification design hybrid system methodology consists computational model concrete phase transition system  specification language hybrid temporal logic  graphical system description language hybrid automaton proof system verifying hybrid automaton satisfy htl specificationsthe novelty approach lie continuous-time logic allows specification point-based interval-based property  provides direct reference derivative variable proof system support verification point-based interval-based property proof rule demonstrate sound convenient induction rule established continuous-time logic proof rule illustrated several example
1994,symbolic controller synthesis discrete timed system,paper present algorithm symbolic synthesis discrete real-time controller semantic level controller synthesized finding winning strategy certain game defined automaton timed-automata algorithm finding strategy need way another search state-space system grows exponentially number component symbolic method allow search conducted without necessarily enumerating state-space achieved representing set state using formula  state variable although worst case method bad enumerative one many huge practical problem treated fine-tuned symbolic method paper scope method extended analysis synthesis purely discrete system real-time systemswe believe  pave way application program synthesis technique construction real-time embedded system specification solution related design problem associated real-time system general asynchronous circuit particular
1994,compositional verification real-time system,present compositional proof system verification real-time system real-time system modeled timed transition module explicitly model interaction environment may combined using composition operator composition rule devised correctness system may determined correctness component proof rule demonstrated fischer mutual exclusion algorithm mutual exclusion bounded response proven< >
1994,temporal verification diagram,formal approach verification temporal property reactive program infer temporal verification condition state formula ie contain temporal operator proof often effectively presented use verification diagram paper present self-contained presentation verification diagram proving various temporal propertiesbeginning safety property present wait-por invariance diagram proving wait-for  invariance formula proceeding liveness property present verification diagram response property require bounded number helpful step  response property require unbounded number helpful step additional type diagram proposed handling response property parameterized program  response property rely full spectrum fairness requirement including compassionate helpful transition 
1993,model reactivity,hierarchy model capture realistic aspect reactive real-time hybrid system introduced abstract level qualitative  model ofreactive system capture temporal precedence aspect time refined model ofreal-time system represents metric aspect time third detailed model ofhybrid system allows incorporation ofcontinuous component reactive systemfor three level present computational model requirement specification language based extension temporal logic system description language based statecharts textual programming language proof rule proving validity property example proof
1993,probabilistic verification,probabilistic element often introduced concurrent program order solve problem either cannot solved efficiently cannot solved deterministic program temporal logic often used specify correctness condition concurrent program paper present procedure given probabilistic finite state program  temporal logic specification decides whether program satisfies specification probability  paper also present notion -fairness show program satisfies temporal specification probability  -fair computation satisfy property
1993,decision algorithm full propositional temporal logic,paper present efficient algorithm checking satisfiability propositional linear time temporal logic formula may past well future operator algorithm used check validity formula model well computation finite-state program  unlike previous theoretical presentation decision method checking satisfiability validity whose first step construct full set possible atom tableau  immediately pay worst case exponential complexity price algorithm presented build tableau incrementally mean algorithm construct atom reachable possible initial atom satisfying formula checkedwhile incremental tableau construction future fragment linear time temporal logic done single pas presence past operator requires multiple pass successively construct augmented version existing atom still maintaining consistency reachabilitythe proof correctness algorithm based showing model considered formula embedded path tableau construction stage delineated construction terminatesthe paper also describes implementation algorithm attention efficiency implementation available support system book  name “temporal prover” used verify propositional temporal formula model-check finite-state program appearing book
1993,reachability analysis planar multi-limear system,paper study reachability analysis simple class hybrid system namely multi-linear system system consist partition euclidean space finite set polyhedral set  within region dynamic defined constant vector field hence discrete transition occur boundary region trajectory change direction system described finite set guarded command guard conjunction linear inequality command differential equation constant right hand side corresponding vector fieldsour goal verify based description system various reachability question region plane particular show planar deterministic system question whether exists trajectory connecting state source region state target region decidable
1993,temporal logic,two-way translation various version temporal logic temporal logic finite sequence star-free regular expression presented main result translation normal-form temporal logic formula formula use future operator translation offer new proof theorem claimed gabbay et al  stating restricting temporal logic future operator impair expressive power theorem basis many temporal proof systems< >
1993,temporal verification simulation refinement,paper present temporal logic method proving simulation refinement relation program introducing notion fair transition system specification language temporal logic present proof rule verifying property program define relation simulation refinement program relate inclusion relation computation observation compared systemswe show semantic definition formalized temporal logic use temporal observational semantics formula representation express simulation refinement implication pair formula provide proof rule based rule verifying program property proof rule illustrated several simple example towards end recognize usefulness stuttering robust version temporal logicthe second part paper present proposed temporal logic called tlr insensitive stuttering logic interpreted sequence sarnpling point alternating persistent transient sample point logic posse idempotent next-time operator give insight stuttering robustness present decision procedure complete axiomatic system propositional version tlr shown system variable taken left-continuous rule regular temporal logic still sound tlrfinally present stronger proof rule refinement illustrate use prove refinement two program cannot done within regular temporal logic framework
1992,vital liveness verifying timing property reactive hybrid system extended abstract,extended abstract discus importance notion liveness property verification main observation provide useful abstraction qualitative  level modeling construct refined model take real-time account importance liveness fairness decrease many important property move safety classin talk presented propose framework formal specification verification timed hybrid system timed system propose specification language refers time age function measure length recent time interval given formula continuously truewe consider hybrid system system consisting non-trivial mixture discrete continuous component digital controller control continuous environment proposed framework extends temporal logic approach proven useful formal analysis discrete system reactive program new framework consists semantic model hybrid time notion phase transition system extends formalism discrete transition system extended version statecharts specification hybrid behavior extended version temporal logic enables reasoning continuous changethe talk based extensive collaboration z manna henzinger maler kesten whose  reported   
1992,system specification refinement temporal logic,consider two type specification reactive system requirement specification list property system satisfy system specification describes response system incoming input difference two style specification analyzed  type needed orderly system developmenttraditionally temporal logic used requirement specification process algebra csp cc used system specification recent development mainly represented lamports temporal logic action  demonstrated temporal logic used effectively also system specificationthis paper explores use temporal logic system specification evaluates advantage disadvantage use demonstrates use temporal logic refinement systematic development system allow simulation single high level step several lower level step go back temporal logic tlr based dense time domain real
1992,timed hybrid statecharts textual representation,structured operational semantics presented timed hybrid statecharts generalization visual specification language statecharts intended model real-time hybrid system order study basic feature statecharts extension necessary treat real-time continuous behavior without distracted graphical representation introduce concurrent real-time language viewed textual representation statechartsthe language contains statement delay preemption timeouts structured operational semantics language illustrative example use specification presented extension specification hybrid system obtained allowing differential equation statement extended language structured operational semantics also given hybrid versionthe extension applied visual statechart language similar compositional semantics defined
1992,verifying hybrid system,hybrid system modeled phase transition system sampling semantics identifying set important event ensured significant state change observed thus correcting previous drawback sampling computation semantics proof rule verifying property hybrid system presented illustrated several example
1992,towards refining temporal specification hybrid system,propose formal framework designing hybrid system stepwise refinement starting specification hybrid temporal logic make successively transition explicit obtain executable system
1992,integration graph class decidable hybrid system,integration graph computational model developed attempt identify simple hybrid system decidable analysis problem start class constant slope hybrid system  right hand side differential equation integer constant refer continuous variable whose right hand side constant always  timer continuous variable called integrator first result shown paper simple question reachability given state undecidable even simple class systemsto restrict model even impose requirement test refers integrator may appear within loop graph restricted class cshs called integration graph main  paper reachability problem integration graph decidable two special case case single timer case single test involving integratorsthe expressive power integration graph formalism demonstrated showing typical problem studied within context calculus duration timed statecharts formulated reachability problem restricted integration graph high fraction fall subclass single timer single dangerous test
1992,characterization temporal property class,paper present two novel characterization class property reactive system term expression temporal logic first family characterization concern safety-progress classification describes hierarchy within set temporal property previous characterization hierarchy depended critically use past temporal operator characterization presented identifies future formula belong class characterization shown completethe second characterization concern safety-liveness classification partition temporal property class safety liveness automata-theoretic temporal logic characterization safety class known time complete characterization liveness class temporal logic remained open paper provides characterization
1992,good digital clock,real-time system operate “real” continuous time state change may occur real-numbered time point yet many verification method based assumption state observed integer time point conclude real-time system shown “correct” integral observationsinteger time verification technique suffice problem whether real-numbered behavior system satisfy property reduced question whether integral observation satisfy  property show reduction possible large important class system property class system includes system modeled timed transition system class property includes time-bounded invariance time-bounded response
1992,time concurrency,hierarchy model capture realistic aspect reactive real-time system introduced abstract level qualitative  model capture temporal precedence aspect time refined model timed transition system representing metric aspect time third detailed model hybrid system model allows incorporation continuous component studied reactive system
1992,temporal proof methodology reactive system,paper present minimal proof theory adequate proving main important temporal property reactive program property consider consist class invariance response precedence property class present small set rule complete verifying property belonging class illustrate application rule several example discus concise presentation complex proof using device transition table proof diagram
1991,completing temporal picture,paper present relatively complete proof system proving validity temporal property reactive program presented proof system improves previous temporal system reduces validity program property pure assertional reasoning involving additional temporal reasoning proof system based classification temporal property according borel hierarchy providing appropriate proof rule class safety response reactivity property
1991,specifying proving serializability temporal logic,serializability database transaction first defined within framework linear temporal logic commutativity-based serializability alternative specification given temporal logic whose semantic interpretation especially tailored reasoning equivalence sequence history alternative specification method given istl* limited specification concurrency control algorithm based commutativity formal verification system serializability us classical logic reasoning provided within proving serializability transaction executing concurrency control algorithm done along line proving property concurrent program serializability multiversion-timestamp algorithm verified< >
1991,faithfulness formal model,paper present critical examination way certain central aspect concurrent program formally modeled main formal model examined operational model fair transition system represents concurrency interleaving action considered atomic several question concerning faithfulness representation naturally arise paper considers question presenting analyzing alternative attempt justify design decision actually taken construction model
1991,communication directed logic variable,n/a
1991,temporal proof methodology real-time system,n/a
1991,timed transition system,incorporate time interleaving model concurrency timed transition system qualitative fairness requirement traditional transition system replaced  quantitative lower-bound upperbound timing constraint transition purpose paper explore scope applicability abstract model timed transition system demonstrate model represent wide variety phenomenon routinely occur conjunction timed execution concurrent process treatment cover process executed parallel separate processor communicate either shared variable message passing process time-share limited number processor given scheduling policy often scheduling policy determines system meet real-time requirement thus explicitly address question time-out interrupt static dynamic priority
1991,timed hybrid system,propose framework formal specification verification timed hybrid system timed system propose specification language refers time age function measure length recent time interval given formula continuously truewe consider hybrid system system consisting non-trivial mixture discrete continuous component digital controller control continuous environment proposed framework extends temporal logic approach proven useful formal analysis discrete system reactive program new framework consists semantic model hybrid time notion phase transition system extends formalism discrete transition system extended version statecharts specification hybrid behavior extended version temporal logic enables reasoning continuous change
1991,step semantics statecharts,paper present proposal definition step execution statechart proposed semantics maintains synchrony hypothesis system infinitely faster environment always finish computing response next stimulus arrives however corrects inconsistency present previous definition requiring global consistency step
1990,statemate working environment development complex reactive system,statemate set tool heavy graphical orientation intended specification analysis design documentation large complex reactive system enables user prepare analyze debug diagrammatic yet precise description system development three interrelated point view capturing structure functionality behavior view represented three graphical language intricate language statecharts used depict reactive behavior time addition use statecharts main novelty statemate fact understands entire description perfectly point able analyze crucial dynamic property carry rigorous execution simulation described system create running code automatically feature invaluable come quality reliability final outcome<>
1990,tight bound complexity cascaded decomposition automaton,exponential upper lower bound size cascaded  decomposition automaton given  used obtain elementary algorithm various translation automaton temporal logic previously known translation nonelementary relevance result discussed< >
1990,distributed reactive system hard synthesize,problem synthesizing finite-state distributed reactive system considered given distributed architecture comprises several processor p/sub /    p/sub k/ interconnection scheme propositional temporal specification phi  solution synthesis problem consists finite-state program pi /sub /    pi /sub k/  whose joint  behavior maintains phi possible input environment solution referred realization specification phi architecture specifically shown problem realizing given propositional specification given architecture undecidable nonelementarily decidable restricted class hierarchical architecture extensive characterization architecture class realizability problem elementarily decidable class undecidable given< >
1990,proving partial order liveness property,temporal verification method based upon partial order semantics trace  presented semantic model used express distributed nature program eg property serializability database transaction layering program snapshot parallel execution program segment
1990,interleaving model real-time,real-time incorporated interleaving model used practical specification verification many property concurrent system defining abstract notion real-time transition system conservative extension traditional transition system qualitative fairness requirement replaced  quantitative lower-bound upper-bound real-time requirement transition proof rule presented used establish lower upper real-time bound response property real-time transition system proof system used verify bounded-invariance bounded-response property timely termination shared-variables multiprocessing system whose semantics defined term real-time transition systems< >
1990,explicit clock temporal logic,author present single exponent decision procedure validity xctl formula double exponent decision procedure validity xctl formula finite state program  expressive power xctl compared logic proposed expression real time property shown incomparable expressive power recently proposed logic tptl < >
1990,hierarchy temporal property,propose classification temporal property hierarchy refines known safety-liveness classification property new classification recognizes class safety guarantee persistence fairness hyper-fairness classification suggested based different way property finite computation extended property infinite computation property expressible temporal logic predicate automaton provide syntactic characterization formula automaton specify property different class consider verification property given program provide unique proof principle class
1989,learning omega-regular language query counter-examples preliminary report,paper discus problem concerning learnability ω-regular language example via synthesis corresponding finite-state acceptor main technical contribution paper polynomial algortihm learns sub-class ω-regular language query counter-examples similar setting suggested  learning  regular language algorithm given produce minimal automaton accepting desired language using polynomially many  query computation step algorithm tackle special problem arise adapting framework infinitary case
1989,synthesis asynchronous reactive module,consider synthesis reactive asynchronous module communicates environment via shared input variable x shared output variable assuming module specified linear temporal formula ϕ derive ϕ another linear formula χ additional scheduling variable rw show exists program satisfying ϕ iff branching time formula aχ valid tree model restricted case variable range finite domain validity problem decidable present algorithm doubly exponential time space complexity constructing program implement specification whenever implementable addition provide matching lower bound
1989,specification verification vlsi system,hardware verification approach based linear time temporal logic described author show introducing appropriate abbreviation linear temporal logic facilitate expression precise timing constraint obtain convenient language description behavior hardware system development formal verification system used proving design meet specification author automatically verified several sequential circuit example describe specification verification edge-triggered d-type flip-flop discovery error published specification demonstrated approach practical offer viable alternative simulation comparison made formal methods< >
1989,synthesis reactive module,consider synthesis reactive module input x output specified linear temporal formula @@@@ show exists program satisfying @@@@ iff branching time formula   a@@@@ valid tree model restricted case variable range finite domain validity problem decidable present algorithm constructing program whenever exists algorithm based new procedure checking emptiness rabin automaton infinite tree time exponential number pair polynomial number state lead synthesis algorithm whose complexity double exponential length given specification
1988,grammar dimension machine drawing,dimensioning important constituent machine drawing recognition dimension machaine drawing prerequisite development machine drawing understanding system  special class image understanding system  approach proposed work syntactic analysis dimension represented undirected labeled graph called web utilizing convention web grammar set web rewriting rule established specify possible dimension-sets generated detected recognition process start detecting arrow using statistical method location orientation arrow together rewriting rule dimensioning grammar used detect rest component tree structure corresponding dimension set
1988,framework synthesis reactive module,consider synthesis reactive module input x output specified linear temporal formula ϕ show exists program satisfying ϕ iff branching time formula aϕ valid tree model
1988,application temporal logic specification real-time system,n/a
1988,anchored version temporal framework,survey paper present recent development temporal formal system specification verification development reactive program general methodology remains much one presented earlier work subject  several technical improvement gained insight understanding computational model logic proof system presentation connection alternative formalism finite automaton paper explicate improvement extensionsthe main difference preceding version consider notion validity temporal formula anchored initial state computation paper discus consequence decision
1987,high level concurrent programming,concurrent system typically large complex requiring long development time much labor therefore prime candidate simplification automation design programming process major application area include real time system operating system cooperative computation new application emerging trend towards wide usage personal computer connected network towards use parallel processing supercomputer architecture
1987,formal semantics statecharts extended abstract,n/a
1987,hierarchy temporal property abstract,n/a
1987,specification verification concurrent program forall-automata,∀-automata non-deterministic finite-state automaton infinite sequence differ conventional automaton sequence accepted run automaton sequence accepting automaton suggested formalism specification verification temporal property concurrent program shown expressive extended-temporal-logic  case provide compact representation property temporal logic structured diagram notation suggested graphical representation automaton single sound complete proof rule presented proving computation program property specified ∀-automaton
1987,specification implementation concurrently accessed data structure abstract data type approach,paper extended abstract data type method question specification implementation data structure accessed concurrently several process approach provides underlying theory modularity development stepwise refinement strategy systemswe identified property must checked order prove implementation correct consist two group first one similar property usually required proving implementation classical non-concurrent algebraic specification dealt usual fashion second group state new undesirable interleavings occur implementation designed proof method thisone direction future research investigate introduction sophisticated primitive construction non-atomic process  several new question arise particular notion strong implementation refined proof method extended accordingly
1986,verification multiprocess probabilistic protocol,paper demonstrate utility temporal logic formal verification probabilistic distributed program approach taken represent quantitative notion probabilistic computation qualitative abstraction ofextreme fairness method illustrated first dining philosopher problem  new probabilistic symmetric solution then-processes mutual exclusion problem two related solution presented corresponding different assumption granularity compound test
1986,specification development reactive system invited paper,n/a
1986,choppy logic,n/a
1986,probabilistic verification tableau,n/a
1986,really abstract concurrent model temporal logic,paper advance radical notion computational model based <i>reals</i> provides abstract description concurrent reactive system conventional <i>integers</i> based behavioral model execution <i>sequences</i> real model studied setting temporal logic illustrate advantage providing <i>fully abstract</i> temporal semantics simple concurrent language example verification concurrent program within real temporal logic defined shown imposing crucial condition <i>finite variability</i> achieve balanced formalism insensitive <i>finite</i> stuttering recognize <i>infinite</i> stuttering distinction essential obtaining fully abstract semantics non-terminating process among advantage going real-based semantics obviates need controversial representation concurrency interleaving associated fairness constraint
1985,linear branching structure semantics logic reactive system,presentation reviewed dichotomy branching linear view reactive system reflected three different approach formalization reactive system hopefully succeeded convincing reader view distinct represent different attitude desired level abstractness semantics reactive system branching view always detailed linear view important question left open user approach whether additional detail necessary applicationin presentation considered branching v linear dichotomy treatment nondeterminism similar dichotomy exists treatment concurrency namely partial order  representation causality concurrency linearization total order consistent partial order suggest similar study identification element captured partial order lost linearization
1985,proving termination prolog program,paper presented two kind proof rule prove b-termination kind termination obtained combination backtracking recursion displayed prolog first kind rule take account context whole program based tree oriented operational semantics second kind compositional dealing separate procedure context independent way based stream oriented semanticswe would like stress proof rule may successfully used defining search strategy actual one used prolog interesting question define way probabilistic backtracking search strategy
1985,glory past,extension propositional temporal logic includes operator referring bounded past considered exponential time decision procedure complete axiomatic system presented suggested normal form lead syntactic classification safety liveness formula adequacy temporal logic modular verification examined finally present notion α-fairness proved fully capture behavior probabilistic finite state program
1985,checking finite state concurrent program satisfy linear specification,present algorithm checking satisfiability linear time temporal logic formula finite state concurrent program running time algorithm exponential size formula linear size checked program algorithm yield also formal proof case formula valid program algorithm four version check satisfiability unrestricted impartial fair computation given program
1984,adequate proof principle invariance liveness property concurrent program,paper present proof principle establishing invariance liveness property concurrent program invariance property established systematically checking preserved every atomic instruction program method establishing liveness property based well-founded assertion applicable fair computation method assume decrease rank computation step sufficient exists one process decrease rank activated fairness ensures program eventually attain goal finite state case proof represented diagram several example given
1984,verification probabilistic program,general method proving property probabilistic program presented method generalizes intermediate assertion method extends given assertion output distribution invariant assertion intermediate distribution proof method shown sound complete program terminate probability  dual approach based expected number visit intermediate state also presented method presented uniform framework considers probabilistic program discrete markov process
1984,interesting part process logic uninteresting translation pl pdl, condition atomic program process logic  binary present algorithm translation pl formula p program $ $ propositional dynamic logic  finite path satisfies p belongs $ $ reduction two immediate corollary  validity pl tested testing validity formula pdl  state property expressible pl expressible pdl translation however nonelementary time complexitythe significance result search natural powerful logic program discussed
1984,linear-history semantics language distributed programming,denotational semantics given language distributed programming based communication  semantics us linear sequence communication record computation special state called expectation set characterizing potential deadlock well-formed program segment semantics relation attainable state communication sequence needed attain state binding two process match merge communication sequence assumed process obtain sequence state combined process approach taken distinguished relatively simple semantic domain ordering
1984,fair termination revisited-with delay,proof method establishing fair termination total correctness nondeterministic concurrent program presented method call extension state auxiliary delay variable count instant certain action scheduled us well-founded ranking prove fair termination allowing nested fair selection loop
1984,symmetric economical solution mutual exclusion problem distributed system,mutual exclusion problem distributed system process memory exclusive write privilege others may read reconsidered symmetric solution looked shown though solution may deterministic probabilistic solution different solution provided two process solution proposed number process solution offered amenable formal proof correctness small effort solution correct even well informed scheduler unlike rabins probabilistic solution mutual exclusion problem centralized system solution correct even evil scheduler know advance  future random draw sharp contrast algorithm lehmann rabin  solution economical mutual exclusion two process may achieved variable capable holding four different value  mutual exclusion n process may achieved variable capable holding ten different value  solution attained careful reasoning exhaustive computer search exhibit general principle design may useful solving similar problem
1984,automatic program generation distributed cooperative computation,describes use high-level equational language distributed processing methodology development large-scale system natural social science engineering methodology denoted cooperative computation consists dividing labour among number organizationally geographically dispersed group responsible respective local area integration local area global system equational language user able express computation term equation commonly used science engineering without detail required programming computer object program produced automatically use program generator configurator methodology discussed primarily example using model language applied environment project link
1984,scope static checking definitional language,paper concern use software development class high level language characterized definitional specification program consists assertion expressed conditional equation compared logic programming assertion expressed form horn clause definitional language amenable efficient compilation also use equation natural way expressing mathematical model science engineering economics computer simulation model often required finally definitional language well suited programming dataflow machine another important building block fifth generation project thus many application definitional language preferred choice programming new generation computer using definitional language develop program user relies heavily static analysis compilation stage development compared traditional practice relying much extensively dynamic analysis performed execution program test data seems common trend development software tool fifth generation computer limit static checking investigated definitional language paper comprehensive approach selecting implementing automatic check compiler proposed checking methodology consists representing specification program directed graph propagating various attribute throughout entire graph choice attribute check depends greatly type error user prone make approach described context model language compiler paper report also experiment evaluate effectiveness various checking method incorporated compiler reliance static v dynamic method checking type checking constructed syntax analysis ambiguity naming completeness definition data type consistency dimensionality  range dimension  circular logic
1984,hardware implementation csp primitive verification,design hardware interface implement csp-like communication primitive presented design based bus scheme allows process “eavesdrop” message directly addressed temporal logic specification given network outline verification proof sketched
1984,temporal verification carrier-sense local area network protocol,examine local area network protocol verify correctness two representative algorithm using temporal logic introduce interval temporal logic allows u make assertion form “in next k unit x holds” logic encodes intuitive argument contention protocol quite directly present two proof ethernet-like contention protocol one using interval temporal logic one using classical temporal logic also verify contention-free protocol using invariant seems wide applicability protocol
1984,may compose temporal logic specification,compositional temporal logic proof system specification verification concurrent program presented version system developed shared variable communication based programming language include procedure
1983,temporal logic branching time,summarya temporal logic defined contains linear branching operator underlying model tree possible computation following metatheoretical  proven  exponential decision procedure satisfiability  finite model property  completeness axiomatization
1983,propositional dynamic logic nonregular program,borderline decidable undecidable propositional dynamic logic  sought iterative program represented regular expression augmented increasingly complex recursive program represented nonregular language  paper indicate line extremely close original regular pdl moreover version pdl show beyond borderline shown actually highly undecidable main  paper  validity problem pdl single additional context-free program atomic program b defined iaibai -complete  exists recursive  one-letter program l  validity problem pdl single additional program l -complete undecidability -completeness le restricted version pdl one  proved separately using different technique
1983,termination probabilistic concurrent program,asynchronous execution behavior several concurrent process may use randomization studied viewing process discrete markov chain set common execution state give necessary sufficient condition proc
1983,compilation nonprocedural specification computer program,paper describes compilation program specification written high level nonprocedural model language object pl/ cobol procedural language program nonprocedural programming language descriptive devoid procedural control therefore easier use require le programming skill procedural language model language briefly presented illustrated followed description compilation process important early phase compilation representation specification dependency graph denoted array graph express data flow interdependency statement two class algorithm utilize graph next described first class check various completeness nonambiguity consistency aspect specification upon detecting problem system attempt automatic correcting measure reported user alternately correction appear reasonable report error solicits modification user second class algorithm produce intermediate design object program language independent form finally pl/ cobol code generated
1983,solution problem no2,n/a
1983,symmetric economical solution mutual exclusion problem distributed system extended abstract,mutual exclusion problem distributed system process memory exclusive write privilege others may read reconsidered symmetric solution looked shown though solution may deterministic probabilistic solution different solution provided two process solution proposed number process solution offered amenable formal proof correctness small effort solution correct even well informed scheduler unlike rabins probabilistic solution mutual exclusion problem centralized system solution correct even evil scheduler know advance  future random draw sharp contrast algorithm  solution economical mutual exclusion two process may achieved variable capable holding four different value  mutual exclusion n process may achieved variable capable holding ten different value  solution attained careful reasoning exhaustive computer search exhibit general principle design may useful solving similar problem
1983,proving precedence property temporal way,paper explores three important class temporal property concurrent program invariance liveness precedence present first methodological approach precedence property providing review invariance liveness property approach based unless operator {a} weak version operator u class property present single complete proof principle
1983,exit decidable context free propositional dynamic logic,shown pdl remains decidable allow program regular expression finite alphabet well single context free program a‡b‡ = {aibi | ≥ } decision algorithm construct finite push-down model satisfiable pdl rg formula generalization additional context free program whose addition destroy decidability discussed
1983,cook temporal proof system pet language,abstract temporal proof system presented whose program-dependent part high-level interface programming language actually studied given new language sufficient deline interface notion atomic transition justice fairness order obtain full temporal proof system language construction particularly useful analysis concurrent system illustrate construction shared-variable model csp generic proof system shown relatively complete respect pure first-order temporal logic
1983,extremely fair treatment probabilistic algorithm,proof system based linear temporal logic qualitative verification concurrent probabilistic program proposed concept extreme fairness introduced approximation notion probabilistic execution proof system proposed shown relatively complete respect validity extremely fair computation proof methodology demonstrated proving correctness new probabilistic algorithm solving mutual exclusion problem 
1982,deterministic propositional dynamic logic finite model complexity completeness,let p formula deterministic propositional dynamic logic decision procedure satisfiability p given along construction finite model every satisfiable p decision procedure run deterministic time cn size model bounded n  n n length p finally complete axiomatization deterministic propositional dynamic logic given based segerberg axoms propositional dynamic logic
1982,termination probabilistic concurrent program,asynchronous execution behavior several concurrent process may use randomization studied viewing process discrete markov chain set common execution state give necessary sufficient condition process converge almost surely given set goal state fair otherwise arbitrary schedule provided state space finite  interesting feature proof method depends topology transition actual value probability also show model synchronization protocol use randomization certain case powerful deterministic protocol demonstrated  proving lower bound size shared variable necessary ensure mutual exlusion lockout-free behavior protocol  showing fully symmetric randomized protocol ensure mutual exclusion freedom lockout
1982,interesting part process logic uninteresting - translation pl pdl, condition atomic program pl binary present algorithm translation pl formula x pdl program τ  finite path satisfies x iff belongs τ  reduction two immediate corollary  validity pl tested testing validity formula pdl  finite-path program property expressible pl expressible pdlthe translation however seems non-elementary time complexity significance result search natural powerful logic program discussed
1981,automatic programming finite state linear program,finite state linear program  introduced model simple data processing application essentially finite automaton added capability performing linear operation set register input algorithmic construction given test equivalence fslp program minimize number state register linear algebraic method used register minimization procedure 
1981,temporal semantics concurrent program,formalism temporal logic suggested appropriate tool formalizing semantics concurrent program simple model concurrent program presented n processor executing concurrent n disjoint program shared memory environment semantics program specifies class state sequence admissible proper execution sequence programthe two main criterion required state obtained predecessor sequence exactly one processor performing atomic instruction process fair scheduling processor infinitely often enabled indefinitely delayedthe basic element temporal logic introduced particular logic framework dx usefulness temporal logic notation describing property concurrent program demonstrated construction given assigning program p temporal formula w true proper execution sequence p order prove program p posse property r one prove implication wran example proof given demonstrated specification temporal character program behavior absolutely essential unambiguous understanding meaning programming construct
1981,propositional dynamic logic context-free program,borderline decidable undecidable propositional dynamic logic  sought iterative program represented regular expression augmented increasingly complex recursive program represented context-free language  paper companion  indicate line extremely close original regular pdl main result present paper validity problem pdl additional program αδγδ regular α β γ defined uiαi β γi π-complete one   show single program aδ aδ atomic b actually sufficient obtaining π- completeness however proof paper use different technique seem worthwhile right
1981,finite model deterministic propositional dynamic logic,n/a
1981,impartiality justice fairness ethic concurrent termination,method well founded structure proving termination program extended concurrent program complicated case program terminates fair execution different version fairness introduced impartiality fairness justice method proving termination presented
1981,realizing equational specification,n/a
1981,result propositional dynamic logic nonregular program,main  paper arethe validity problem pdl single additional context-free program aδaδ atomic program ab defined   {i  o} aibai ∏   -complete exists recursive  one-letter program l* validity problem pdl single additional program l ∏   -complete 
1981,verification concurrent program temporal proof principle,paper second series application temporal logic concurrent program present proof method establishing invariance  eventuality  propertiesthe proof principle establishing invariance property based computational induction generalization inductive assertion method restricted class concurrent program present algorithm automatic derivation invariant assertionsin order establish eventuality property present several proof principle translate structure program basic temporal statement behavior principle viewed providing temporal semantics program basic statement thus derived combined temporal proof establishment eventuality property method generalizes intermittent assertion methodthe proof principle amply illustrated example
1980,linear history semantics distributed language extended abstract,denotational semantics given distributed language based communication  semantics us linear sequence communication record computation well formed program segment semantics relation attainable state communication sequence needed attain state binding two process match merge communication sequence assumed process obtain sequence state combined process approach taken distinguished relatively simple semantic domain ordering
1980,synchronous scheme decision problem,class scheme called synchronous scheme defined synchronous scheme several variable active one required keep synchronized rate computation measured height respective herbrand value reset statement cause variable restart new computation admitted shown equivalence convergence property decidable scheme class class synchronous scheme contains special case known decidable class ianov scheme one-variable scheme reset progressive scheme
1980,temporal basis fairness,use temporal logic formalism program reasoning reviewed several aspect responsiveness fairness analyzed leading need additional temporal operator operator -u general question involving operator discussed shown addition operator temporal language becomes expressively complete two deductive system dx dux proved complete language without new operator respectively
1979,use nonprocedural specification language associated program generator software development,model ii language associated program generator used explain illustrate use high level nonprocedural language computer programming effect high level language obtained model ii elimination procedural control facility exist high level programming language pl/i cobol particular statement may given order control construct input/output iteration memory allocation task ordering statement execution providing control statement performed automatic program generator specification program therefore much shorter  equivalent high level procedural language program important user need regard task specifying program defining process rather describing data relation point view greatly reduces computer programming proficiency required user paper focus example use language business data processing advantage novelty briefly review methodology incorporated existing program generator detailed description may found reference
1979,modal logic program,explore general framework modal logic applicability program reasoning relate basic concept modal logic programming environment concept world corresponds program state concept accessibility relation corresponds relation derivability state execution thus adopt temporal interpretation modal logic variety program property expressible within modal formalism demonstratedthe first axiomatic system studied sometime system adequate proving total correctness ‘eventuality’ property however inadequate proving invariance property stronger nexttime system obtained adding next operator shown adequate invariance well
1978,proof method cyclic program,consider specification verification cyclic  program input-output based concept correctness traditionally applied functional program replaced another based concept eventual behaviour various type eventual behaviour introduced case concurrency introduction interface-predicates reduces proof complexity achieves greater readability specification use explicitly auxiliary variable location counter  elapsing time
1977,backtracking recursive computation,summarya mathematical  semantics constructed formalism recursive equation alternative operator formalism enables combination recursion backtracking semantics defined applying fixpoint theory set valued function introduce notion strategy produce subset result two implementation suggested using auxiliary stack trade recomputation time space auxiliary stack concept sub-fixpoint introduced implementation shown incomplete even wrt sub-fixpoint value one special strategy leftmost strategy stem problem pattern matching parsing discussed
1977,direct algorithm checking equivalence llk grammar,deal problem testing equivalence two grammar problem shown decidable general k rosenkrantz stearns  solved reduction equivalence problem special dpdas paper korenjak hopcroft  equivalence problem grammar solved branching algorithm operating directly grammar work present direct branching algorithm general grammar equivalence problem
1977,temporal logic program,unified approach program verification suggested applies sequential parallel program main proof method suggested temporal reasoning time dependence event basic concept two formal system presented providing basis temporal reasoning one form formalization method intermittent assertion adaptation tense logic system kb particularly suitable reasoning concurrent program
1977,simple program decision problem,n/a
1977,complete axiomatic system proving deduction recursive program,denoting version hoares system proving partial correctness recursive program h present extension may thought h &ugr {@@@@@@@@@@@@@@@@} &ugr h- including rule h four special purpose rule inverse rule hoare shown complete system  proving deduction form &sgr&sgrn @@@@ &sgr language wffs assertion assertion language l partial correctness specification form pq valid formula l taken axiom shown sufficient proving partial correctness total correctness program equivalence well important property program proof impossible h entire presentation worked framework nondeterministic program employing iteration mutually recursive procedure
1974,axiomatic approach total correctness program,summarywe present axiomatic approach enables one prove formal method program “totally correct”  approach similar hoares approach  proving program “partially correct”  extension hoares method lie possibility proving correctness termination one unified formalism one choose prove total correctness single step incremental proof step step establishing property program
1973,decidable property monadic functional schema,class  functional schema properly includes “ianov” flowchart schema defined shown termination divergence freedom problem functional schema decidable although possible translate large class non-free functional schema equivalent free functional schema shown general cannot done also shown equivalence problem free functional schema decidable  obtained well-known  formal language automaton theory
1972,permutation graph transitive graph,graph g vertex set n = {   n} called permutation graph exists permutation p n j n j joined edge g structural relationship established permutation graph transitive graph algorithm determining whether given graph permutation graph given efficient algorithm finding maximum size clique minimum coloration transitive graph presented algorithm shown applicable solving problem memory allocation circuit layout
1971,marked directed graph,n/a
1970,formalization property functional program,problem convergence correctness equivalence computer program formulated mean satisfiability validity certain first-order formula algorithm presented constructing formula functional program ie program defined lisp-like conditional recursive expression
1969,formalization property recursively defined function,paper concerned relationship convergence correctness equivalence recursively defined function satisfiability  certain first-order formula
