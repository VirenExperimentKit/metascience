2017,non-preemptive preemptive scheduling using synchronization synthesis,present computer-aided programming approach concurrency approach allows programmer program assuming friendly non-preemptive scheduler synthesis procedure insert synchronization ensure final program work even preemptive scheduler correctness specification implicit inferred non-preemptive behavior let u consider sequence call program make external interface specification requires sequence produced preemptive scheduler included set sequence produced non-preemptive scheduler guarantee synthesis introduce deadlock synchronization inserted optimal wrt given objective function solution based finitary abstraction algorithm bounded language inclusion modulo independence relation generation set global constraint synchronization placement model global constraint set corresponds correctness-ensuring synchronization placement placement optimal wrt given objective function chosen synchronization solution apply approach device-driver programming driver thread call software interface device api provided operating system experiment demonstrate synthesis method precise efficient implicit specification helped u find one concurrency bug previously missed model-checking using explicit user-provided specification implemented objective function coarse-grained fine-grained locking observed different synchronization placement produced experiment favoring minimal number synchronization operation maximum concurrency respectively
2016,solving qbf counterexample guided refinement,article put forward application counterexample guided abstraction refinement  solving well-known pspace-complete problem quantified boolean formula  article study application cegar two scenario first scenario cegar used expand quantifier formula subsequently satisfiability  solver applied first shown two level quantification generalized arbitrary number level recursion also shown idea generalized non-prenex non-cnf qbf solver second scenario cegar employed additional learning technique existing dpll-based qbf solver experimental evaluation implemented prototype show cegar-driven solver outperforms existing solver number benchmark family dpll solver benefit additional type learning
2016,cybercardia project modeling verification validation implantable cardiac device,paper survey recent progress cybercardia project cps frontier project funded national science foundation cybercardia project lead significant advance state art system verification cardiac therapy based use formal method closed-loop control verification animating vision work enable development true silico design methodology medical device used speed development new device provide greater assurance behavior match designer intention pas regulatory muster quickly used patient needing care acceleration medical-device innovation achievable result cybercardia research also long-term sustained societal benefit better diagnostic therapeutic technology enter practice medicine quickly
2016,bifurcation analysis cardiac alternans using \delta -decidability,present bifurcation analysis electrical alternans two-current mitchell-schaeffer  cardiac-cell model using theory ofδδ-decidability real electrical alternans phenomenon characterized variation successive action potential duration  generated single cardiac cell tissue alternans known initiate re-entrant wave important physiological indicator impending life-threatening arrhythmia ventricular fibrillation bifurcation analysis perform determines control parameterττof m model bifurcation point range ofττsuch small perturbation value  transition alternans non-alternans behavior best knowledge analysis represents first formal verification non-trivial dynamic numerical cardiac-cell modelour approach problem rest encoding alternans-like behavior m model -mode multinomial hybrid automaton  model parameter apply sophisticated guided-search-based reachability analysis ha estimate parameter range alternans non-alternans behavior bifurcation point separate two range uncertainty region due underlyingδδ-decision procedure uncertainty region however reduced decreasingδδat expense increasing model exploration time experimental  provided highlight effectiveness method
2016,formal modeling analysis pancreatic cancer microenvironment,focus pancreatic cancer research shifted pancreatic cancer cell towards microenvironment involving pancreatic stellate cell interact cancer cell influence tumor progression quantitatively understand pancreatic cancer microenvironment construct computational model intracellular signaling network cancer cell stellate cell well intercellular communication extend rule-based bionetgen language depict intra- inter-cellular dynamic using discrete continuous variable respectively framework also enables statistical model checking procedure analyzing system behavior response various perturbation  demonstrate predictive power model identifying important system property consistent existing experimental observation also obtain interesting insight development novel therapeutic strategy pancreatic cancer
2016,high-level modeling verification cellular signaling,use computational modeling formal analysis technique study temporal behavior discrete logical model naïve cell differentiation model analyzed formally automatically performing temporal logic query via statistical model checking model verified explored using monte carlo simulation model checking allows much efficient analysis testing large set system property much smaller runtime one required simulation  obtained using model checking provide detail relative timing event system would otherwise cumbersome time consuming obtain simulation efficiently test large number property confirm reject hypothesis drawn previous analysis experimental simulation data
2016,probabilistic reachability analysis tap withdrawal circuit caenorhabditis elegans,present probabilistic reachability analysis  model neural circuit caeorhabditis elegans  common roundworm particular consider tap withdrawal  reflexive behavior exhibited c elegans worm response vibrating surface moving neural circuit underlying response subject investigation specially perform bounded-time reachability analysis tw circuit model wick et al  estimate probability various tw response wick et al model number parameter demonstrate various tw response probability occurrence population worm viewed problem parameter uncertainty approach problem rest encoding tw response hybrid automaton parametric uncertainty perform probabilistic reachability analysis automaton using technique combine δ-decision procedure statistical test  obtain significant extension wick et al  equip model fixed parameter value reproduce single tw response contrast technique allow u thoroughly explore model parameter space using statistical sampling theory identifying process distribution tw response wick et al conducted number ablation experiment population worm one neuron tw circuit surgically ablated  show technique used correctly estimate tw response-probabilities four ablation group also use technique predict tw response behavior two ablation group previously considered wick et al
2016,formal modeling biological system,biomedical research advance complicated system increasing need model analyze system better understand decade biologist using diagrammatic model describe understand mechanism dynamic behind experimental observation although model simple built understood offer rather static picture corresponding biological system scalability limited thus increasing need develop formalism dynamic form capture time-dependent process together increase model scale complexity invited review paper argue formal modeling formalism applied fruitfully biological system complementary traditional mathematical descriptive modeling approach used system biology also discus one example stochastic hybrid model effect estrogen different level specie population freshwater ecosystem
2016,smt-based analysis virtually synchronous distributed hybrid system,paper present general technique verifying virtually synchronous distributed control system interconnected physical environment cyber-physical system  notoriously hard verify due combination nontrivial continuous dynamic network delay imprecise local clock asynchronous communication etc simplify analysis first extend pal methodology---that allows abstract timing event asynchronous communication network delay imprecise clock long infrastructure guarantee bound network delay clock skews---from real-time hybrid system prove bisimulation equivalence hybrid pal synchronous asynchronous model show various verification problem synchronous hybrid pal model reduced smt solving nonlinear theory real number illustrate hybrid pal modeling verification methodology number cps including control system turning airplane
2015,sreach probabilistic bounded delta-reachability analyzer stochastic hybrid system,paper present new tool sreach solves probabilistic bounded reachability problem two class model stochastic hybrid system first one  hybrid automaton parametric uncertainty second one probabilistic hybrid automaton additional randomness transition probability variable reset standard approach reachability problem linear hybrid system require numerical solution large optimization problem become infeasible system involving nonlinear dynamic real stochasticity sreach encodes stochastic information using set introduced random variable combinesδδ-complete decision procedure statistical test solveδδ-reachability problem sound manner compared standard simulation-based method support non-deterministic branching increase coverage simulation avoids zero-crossing problem demonstrate sreach’s applicability discussing three representative biological model additional benchmark nonlinear hybrid system multiple probabilistic system parameter
2015,formal analysis provides parameter guiding hyperoxidation bacteria using phototoxic protein,work developed methodology analyze bacteria model mimic stage bacteria change phage therapy applied due widespread misuse overuse antibiotic drug resistant bacteria pose significant risk health agriculture environment therefore interested alternative conventional antibiotic phage therapy model designed according experimental procedure engineer temperate phage lambda  kill bacteria via light-activated production superoxide applied formal analysis model  show approach speed evaluation system would impractical possibly even feasible study wet lab
2015,towards personalized prostate cancer therapy using delta-reachability analysis,recent clinical study suggest efficacy hormone therapy prostate cancer depends characteristic individual patient paper develop computational framework identifying patient-specific androgen ablation therapy schedule postponing potential cancer relapse model population dynamic heterogeneous prostate cancer cell response androgen suppression nonlinear hybrid automaton estimate personalized kinetic parameter characterize patient employ δ-reachability analysis predict patient-specific therapeutic strategy  show method promising may lead prognostic tool prostate cancer therapy
2015,dreach δ-reachability analysis hybrid system,dreach bounded reachability analysis tool nonlinear hybrid system encodes reachability problem hybrid system first-order formula real number solved delta-decision procedure smt solver dreach way dreach able handle wide range highly nonlinear hybrid system scaled well various realistic model biomedical robotics application
2014,pathway-gene identification pancreatic cancer survival via doubly regularized cox regression,recent global genomic analysis identified  gene set  core signaling pathway genetically altered pancreatic cancer highly malignant disease comprehensive understanding genetic signature signaling pathway directly correlated pancreatic cancer survival help cancer researcher develop effective multi-gene targeted personalized therapy pancreatic cancer patient different stage previous work applied lasso penalized regression method considered individual genetic effect identified  gene associated pancreatic cancer survivalin work integrate pathway information pancreatic cancer survival analysis introduce apply doubly regularized cox regression model identify gene signaling pathway related pancreatic cancer survivalsfour signaling pathway including ion transport immune phagocytosis tgf  regulation dna-dependent transcription pathway  gene within four pathway identified verified directly correlated pancreatic cancer survival finding help cancer researcher design new strategy early detection diagnosis pancreatic cancer
2014,parameter synthesis cardiac cell hybrid model using δ-decisions,central problem system biology identify parameter value biological model satisfies behavioral constraint  paper focus parameter synthesis hybrid  model many biological system posse multiple operational mode specific continuous dynamic mode biological system naturally modeled hybrid automaton often nonlinear continuous dynamic however hybrid automaton notoriously hard analyze — even simple reachability hybrid system linear differential dynamic undecidable problem paper present parameter synthesis framework based δ-complete decision procedure sidestep undecidability demonstrate method two highly nonlinear hybrid model cardiac cell action potential  show parameter synthesis framework convenient efficient enabled u select suitable model study identify crucial parameter range related cardiac disorder
2014,25 year model checking,model checking automatic verification technique large state transition system originally developed reasoning finite-state concurrent system technique used successfully debug complex computer hardware communication protocol software beginning used analyzing cyber-physical biological financial system well major challenge technique phenomenon called state explosion problem issue impossible avoid worst case using sophisticated data structure clever search algorithm possible verify state transition system astronomical number state paper briefly review development model checking past  year emphasis model checking stochastic hybrid system
2014,compositional approximate quantitative reasoning medical cyber-physical system application patient-specific cardiac dynamic device,design bug-free safe medical device software challenging especially complex implantable device control actuate organ who’s response fully understood safety recall pacemaker implantable cardioverter defibrillator   affected  device   due firmware issue continue increase frequency according fda software failure resulted  medical device recall  currently formal methodology open experimental platform test verify correct operation medical-device software within closed-loop context patientthe goal effort develop foundation modeling synthesis development verified medical device software system verified closed-loop model device organ research span implantable medical device cardiac pacemaker physiological control system drug infusion pump multiple networked medical system device physically connected body exert direct control physiology safety patient focus effort  extending current binary safety property quantitative verification  development patient-specific model therapy  multi-scale modeling complex physiological phenomenon compositional reasoning across range model abstraction refinement  bridging formal reasoning automated generation safe effective software future medical device
2014,model checking hybrid system - invited talk,present framework delta-complete analysis bounded reachability problem hybrid system perform bounded reachability checking solving delta-decision problem real technique take account robustness property system numerical perturbation implementation technique scale well several highly nonlinear hybrid system model arise biomedical application
2014,proof generation delta-decisions,show generate validate logical proof unsatisfiability delta-complete decision procedure rely error-prone numerical algorithm solving problem important ensuring correctness decision procedure time new approach automated theorem proving real number design first-order calculus transform computational step constraint solving logic proof validated using proof-checking algorithm application demonstrate proof generated solver establish many nonlinear lemma theormal proof kepler conjecture
2013,bayesian statistical model checking application stateflow/simulink verification,address problem model checking stochastic system ie checking whether stochastic system satisfies certain temporal property probability greater  fixed threshold particular present statistical model checking  approach based bayesian statistic show approach feasible certain class hybrid system stochastic transition generalization simulink/stateflow model standard approach stochastic discrete system require numerical solution large optimization problem quickly become infeasible larger state space generalization technique hybrid system stochastic effect even challenging smc approach pioneered younes simmons discrete non-bayesian case solves verification problem combining randomized sampling system trace  hypothesis testing  estimation  believe smc essential scaling large stateflow/simulink model answer verification problem guaranteed correct prove bayesian smc make probability giving wrong answer arbitrarily small advantage answer usually obtained much faster standard exhaustive model checking technique apply bayesian smc approach representative example stochastic discrete-time hybrid system model stateflow/simulink fuel control system featuring hybrid behavior fault tolerance show technique enables faster verification state-of-the-art statistical technique emphasize bayesian smc mean restricted stateflow/simulink model principle applicable variety stochastic model domain eg system biology
2013,study biological network statistical model checking application immune system cell,use computational modeling formal analysis technique study temporal behavior discrete logical model naïve cell differentiation model analyzed formally automatically performing temporal logic query via statistical model checking  obtained using model checking provide detail relative timing event system would otherwise cumbersome time consuming obtain simulation
2013,dreal smt solver nonlinear theory real,describe open-source tool dreal smt solver nonlinear formula real tool handle various nonlinear real function polynomial trigonometric function exponential function etc dreal implement framework δ-complete decision procedure return either unsat δ -sat input formula δ numerical error bound specified user dreal also produce certificate correctness δ -sat  unsat answer 
2013,automatic abstraction smt-based unbounded software model checking,software model checker based under-approximations smt solver successful verifying safety  property combine two key idea –  concreteness counterexample under-approximation counterexample original program well  generalization proof safety under-approximation produced smt solver generalizable proof safety original program paper present combination automatic abstraction under-approximation-driven framework explore two iterative approach obtaining refining abstraction – proof based counterexample based – show combined unified algorithm best knowledge first application proof-based abstraction primarily used verify hardware software verification implemented prototype framework using z evaluate many benchmark software verification competition show experimentally combination quite effective hard instance
2013,solving qbf free variable,open quantified boolean formula  qbf contains free  variable solution qbf quantifier-free formula logically equivalent given qbf although recent qbf research focused closed qbf number interesting application require one consider formula free variable article show clause/cube learning dpll-based closed-qbf solver extended solve qbfs free variable introducing sequents generalize clause cube allow learning fact form “under certain class assignment input formula logically equivalent certain quantifier-free formula”
2013,satisfiability modulo ode,study smt problem real containing ordinary differential equation important formal verification realistic hybrid system embedded software develop δ-complete algorithm smt formula purely existentially quantified well ∃∀-formulas whose universal quantification restricted time variable demonstrate scalability algorithm implemented open-source solver dreal smt benchmark several hundred nonlinear ode variable
2013,finding error python program using dynamic symbolic execution,statically typed language dynamic symbolic execution  mature approach automated test generation however extending dynamic language present several challenge complex semantics fragmented incomplete type information call foreign function lacking precise model make symbolic execution difficult propose symbolic execution approach mix concrete symbolic value incrementally solves path constraint search alternate execution lazily instantiating axiomatizations called function needed present symbolic execution model underlying approach illustrate working prototype concolic testing tool actual python software package
2013,turing computable real number still important today,although every undergraduate computer science learns turing machine well known originally proposed mean characterizing computable real number long time formal verification paid little attention computational application involve manipulation continuous quantity even though application ubiquitous recent year however great interest safety-critical hybrid system involving discrete continuous behavior including autonomous automotive aerospace application medical device various sort control program electric power plant result formal analysis numerical computation longer ignored talk focus one successful verification technique temporal logic model checking current industrial model checker scale handle realistic hybrid system believe key handling complex system make better use theory computable real computable analysis generally argue new formal method hybrid system combine existing discrete method model checking new algorithm based computable analysis particular discus model checker currently developing along line
2012,computable real number still important today,although every undergraduate computer science learns turing machine well known originally proposed mean characterizing computable real number long time formal verifi cation paid little attention computational application involve manipulation continuous quantity even though application ubiquitous recent year however great interest safety-critical hybrid system involving discrete continuous behavior including autonomous automotive aerospace application medical device various sort control program electric power plant result formal analysis numerical computation longer ignoredthis talk focus one successful verifi cation technique temporal logic model checking current industrial model checker scale handle realistic hybrid system key handling complex system make better use theory computable real computable analysis generally new formal method hybrid system combine existing discrete method model checking new algorithm based computable analysis particular talk discus model checker currently developed along line
2012,δ-complete decision procedure satisfiability real,introduce notion “δ-complete decision procedures” solving smt problem real number aim handling wide range nonlinear function including transcendental function solution lipschitz-continuous ode given smt problem ϕ positive rational number δ δ-complete decision procedure determines either ϕ unsatisfiable “δ-weakening” ϕ satisfiable δ-weakening ϕ variant ϕ allows δ-bounded numerical perturbation ϕ establish existence complexity δ-complete decision procedure bounded smt real function mentioned propose use δ-completeness ideal requirement numerically-driven decision procedure concrete example formally analyze dpll〈icp〉 framework integrates interval constraint propagation dpll establish necessary sufficient condition δ-completeness discus practical application δ-complete decision procedure correctness-critical application including formal verification theorem proving
2012,assume-guarantee abstraction refinement probabilistic system,describe automated technique assume-guarantee style checking strong simulation system specification expressed non-deterministic labeled probabilistic transition system  first characterize counterexample strong simulation stochastic tree show simpler structure insufficient use tree abstraction refinement algorithm computes assumption assume-guarantee reasoning conservative lpts abstraction system component abstraction automatically refined based tree counterexample obtained failed simulation check remaining component implemented algorithm counterexample generation assume-guarantee abstraction refinement report encouraging 
2012,assumption generation asynchronous system abstraction refinement,compositional verification provides way deducing property complete program property constituent particular assume-guarantee style reasoning split specification assumption guarantee according given inference rule generation assumption machine learning make automatic reasoning possible however existing work purely focused synchronous parallel composition labeled transition system  kripke structure natural model real software program asynchronous framework paper shared variable structure used system model asynchronous parallel composition shared variable structure defined based new simulation relation introduced paper prove inference rule widely used literature hold asynchronous system long components’ alphabet satisfy certain condition automating assumption generation approach proposed based counterexample-guided abstraction refinement rather using learning algorithm experimental  provided demonstrate effectiveness proposed approach
2012,rare-event verification stochastic hybrid system,paper address problem verifying stochastic hybrid system temporal logic property whose probability true small --- rare event well known sampling-based  technique statistical model checking perform well estimating rare-event probability problem sample size required good accuracy grows large event probability tends zero however several technique developed address problem focus importance sampling technique bias original system compute highly accurate efficient estimate main difficulty importance sampling devise good biasing density density yielding low-variance estimator paper show use cross-entropy method generating approximately optimal biasing density statistical model checking apply method importance sampling statistical model checking estimating rare-event probability stochastic hybrid system coded stateflow/simulink diagram
2012,delta-decidability real,given collection f computable function real show exists algorithm given sentence containing bounded quantifier function f positive rational number delta decides either “a true” “a delta-strengthening false” moreover f computed complexity class c mild assumption “delta-decision problem” bounded sigma k-sentences resides sigma k  stand sharp contrast well-known undecidability general first-order theory function serve theoretical basis use numerical method decision procedure formula real
2012,learning probabilistic system tree sample,consider problem learning non-deterministic probabilistic system consistent given finite set positive negative tree sample consistency defined respect strong simulation conformance propose learning algorithm use traditional new stochastic state-space partitioning latter resulting minimum number state use solve problem active learning us knowledgeable teacher generate sample counterexample simulation equivalence query show problem undecidable general becomes decidable suitable condition teacher come naturally way sample generated failed simulation check latter problem shown undecidable impose additional condition learner always conjecture minimum state hypothesis therefore propose semi-algorithm using stochastic partition finally apply proposed  algorithm infer intermediate assumption automated assume-guarantee verification framework probabilistic system
2012,statistical model checking markov decision process,statistical model checking  computationally efficient verification technique based selective system sampling one well identified shortcoming smc unlike probabilistic model checking cannot applied system featuring nondeterminism markov decision process  address limitation developing algorithm resolve nondeterminism probabilistically us multiple round sampling reinforcement learning provably improve resolution nondeterminism respect satisfying bounded linear temporal logic  property algorithm thus reduces mdp fully probabilistic markov chain smc may applied give approximate solution problem checking probabilistic bltl property integrate algorithm parallelised modification prism simulation framework extensive validation new prism benchmark demonstrates approach scale well scenario symbolic algorithm fail
2011,analog circuit verification statistical model checking,show statistical model checking used verifying property analog circuit integrated circuit technology scale manufacturing variation device make analog design behave like stochastic system problem verifying stochastic system often difficult large state space statistical model checking efficient verification technique stochastic system paper use sequential statistical technique model checking verify property analog circuit temporal frequency domain particular randomly sampled system trace sequentially generated spice passed trace checker determine whether satisfy given specification desired statistical strength achieved
2011,statistical model checking cyber-physical system,statistical model checking useful situation either inconvenient impossible build concise representation global transition relation happens frequently cyber-physical system two example verifying stateflow-simulink model reasoning biochemical reaction system biology main problem statistical model checking caused rare event describe statistical model checking work demonstrate problem rare event describe importance sampling cross-entropy technique used address problem
2011,quantifier elimination finite field using gröbner base,give algebraic quantifier elimination algorithm first-order theory given finite field using gröbner basis method algorithm relies strong nullstellensatz property elimination ideal finite field analyze theoretical complexity algorithm show application formal analysis biological controller model
2011,formal analysis logical model pancreatic cancer,apply formal verification technique studying behavior signaling pathway important cancer particular use model checking verifying behavioral property single-cell silico model pancreatic cancer interested property associated apoptosis  cell cycle arrest proliferation property specified temporal logic include example whether checkpoint cancer cell go reach given state model includes several major signaling pathway including hedgehog wnt kras rb-ef nfkb p tgfβ apoptosis pathway recently found mutated frequently pancreatic cancer model formally analyzed via symbolic model checking shown agree well qualitatively experiment conclude model checking offer powerful approach studying logical model relevant biological process
2011,model checking state explosion problem,model checking automatic verification technique hardware software system finite state finite state abstraction used successfully verify computer hardware beginning used verify computer software well number state variable system increase size system state space grows exponentially called “state explosion problem” much research model checking past  year involved developing technique dealing problem lecture note explain basic model checking algorithm work describe recent approach state explosion problem emphasis bounded model checking
2010,analysis verification hmgb1 signaling pathway,recent study found overexpression high-mobility group box-  protein conjunction receptor advanced glycation end product  toll-like receptor  associated proliferation various cancer type including breast pancreaticwe developed rule-based model crosstalk hmgb signaling pathway key cancer signaling pathway model simulated using ordinary differential equation  discrete stochastic simulation applied automated verification technique statistical model checking validate interesting temporal property modelsour simulation show hmgb overexpressed oncoproteins cyclind/e regulate cell proliferation overexpressed tumor suppressor protein regulate cell apoptosis  p repressed discrete stochastic simulation show p mdm oscillation continue even  hour observed experiment property exhibited deterministic ode simulation chosen parameter moreover model also predict mutation ra arf p context hmgb signaling influence cancer cell fate - apoptosis survival - crosstalk different pathway
2010,simulation-based probabilistic model checking mixed-analog circuit,paper consider verifying property mixed-signal circuit ie circuit interaction analog  digital  value use simulation-based approach consists evaluating property representative subset behavior answering question whether circuit satisfies property probability greater equal threshold propose logic adapted specification property mixed-signal circuit temporal domain well frequency domain also demonstrate applicability method different model δ–σ modulators previous formal verification attempt conservative required excessive computation time
2010,computational modeling verification signaling pathway cancer,propose analyze rule-based model hmgb signaling pathway protein hmgb activate number regulatory network – p nfκb ra rb pathway – control many physiological process cell hmgb recently shown implicated cancer inflammation disease paper focus nfκb pathway construct crosstalk model hmgb-p-nfκb-ras-rb network investigate coupling influence proliferation apoptosis  cancer cell first built single-cell model hmgb network using rule-based bionetgen language analyzed verified qualitative property model mean simulation statistical model checking model simulation used ordinary differential equation gillespie’s stochastic simulation algorithm statistical model checking enabled u verify model respect behavioral property expressed temporal logic analysis showed hmgb-activated receptor generate sustained oscillation irregular amplitude nfκb iκb p protein also knockout destroy iκb-nfκb negative feedback loop leading development severe inflammation cancer model also predicted knockout overexpression iκb kinase influence cancer cell’s fate – apoptosis survival – crosstalk different pathway finally work show computational modeling statistical model checking effectively combined study biological signaling pathway
2010,localization reduction counterexample-guided abstraction refinement,automated abstraction widely recognized key method computer-aided verification hardware software paper describe evolution counterexample-guided refinement iterative abstraction refinement technique
2010,automated assume-guarantee reasoning implicit learning,propose purely implicit solution contextual assumption generation problem assume-guarantee reasoning instead improving l * algorithm — learning algorithm finite automaton algorithm computes implicit representation contextual assumption cdnf algorithm — learning algorithm boolean function report three parametrized test case solution outperforms monolithic interpolation-based model checking algorithm
2010,integrating icp lra solver deciding nonlinear real arithmetic problem,propose novel integration interval constraint propagation  smt solver linear real arithmetic  decide nonlinear real arithmetic problem use icp search interval solution nonlinear constraint use lra solver either validate solution provide constraint incrementally refine search space icp serf goal separating linear nonlinear solving stage show proposed method preserve correctness guarantee icp experimental  show separation useful enhancing efficiency
2010,bayesian statistical model checking application simulink/stateflow verification,address problem model checking stochastic system ie~checking whether stochastic system satisfies certain temporal property probability greater  fixed threshold particular present novel statistical model checking  approach based bayesian statistic show approach feasible hybrid system stochastic transition generalization simulink/stateflow model standard approach stochastic  system require numerical solution large optimization problem quickly become infeasible larger state space generalization technique hybrid system stochastic effect even challenging smc approach pioneered younes simmons discrete non-bayesian case solves verification problem combining randomized sampling system trace  hypothesis testing estimation believe smc essential scaling large stateflow/simulink model answer verification problem guaranteed correct prove bayesian smc make probability giving wrong answer arbitrarily small advantage answer usually obtained much faster standard exhaustive model checking technique apply bayesian smc approach representative example stochastic discrete-time hybrid system model stateflow/simulink fuel control system featuring hybrid behavior fault tolerance show technique enables faster verification state-of-the-art statistical technique retaining error bound emphasize bayesian smc mean restricted stateflow/simulink model fact successfully applied large stochastic model system biology
2010,comparing learning algorithm automated assume-guarantee reasoning,compare two learning algorithm generating contextual assumption automated assume-guarantee reasoning cdnf algorithm implicitly represents contextual assumption conjunction dnf formula obdd learning algorithm us ordered binary decision diagram representation using learning algorithm performance assume-guarantee reasoning compared monolithic interpolation-based model checking parametrized hardware test case
2010,non-prenex non-clausal qbf solver game-state learning,describe dpll-based solver problem quantified boolean formula  non-prenex non-cnf form make two contribution first reformulate clause/cube learning extending non-prenex instance call resulting technique game-state learning second introduce propagation technique using ghost literal exploit structure non-cnf instance manner symmetric universal existential variable experimental  qbflib benchmark indicate approach outperforms state-of-the-art solver certain benchmark family including tipfixpoint tipdiam family model checking problem
2010,statistical verification probabilistic property unbounded,consider statistical  solution method verifying probabilistic property unbounded statistical solution method probabilistic verification use sample execution trajectory system verify property level confidence main challenge property expressed using unbounded ensure termination face potentially infinite sample execution trajectory describe two alternative solution method one merit first method relies reachability analysis suitable primarily large markov chain reachability analysis performed efficiently using symbolic data structure numerical probability computation expensive second method employ termination probability weighted sampling method rely specific structure model error control challenging show choice termination probability—when applied markov chains—is tied subdominant eigenvalue transition probability matrix relates iterative numerical solution technique problem
2009,functional equivalence verification tool high-level synthesis flow,high-level synthesis facilitates use formal verification methodology check equivalence generated rtl model original source specification article provides overview sequential equivalence checking technique challenge success real-world design
2009,efficient craig interpolation linear diophantine disequations linear modular equation,use craig interpolants enabled development powerful hardware software model checking technique efficient algorithm known computing interpolants rational real linear arithmetic focus subset integer linear arithmetic main  polynomial time algorithm obtaining interpolants conjunction linear diophantine equation linear modular equation  linear diophantine disequations also present interpolation result conjunction mixed integer linear equation show utility proposed interpolation algorithm discovering modular/divisibility predicate counterexample guided abstraction refinement  framework enabled verification simple program cannot checked using existing cegar based model checker
2009,computing differential invariant hybrid system fixedpoints,introduce fixedpoint algorithm verifying safety property hybrid system differential equation whose right-hand side polynomial state variable order verify nontrivial system without solving differential equation without numerical error use continuous generalization induction algorithm computes required differential invariant mean combining local differential invariant global system invariant sound way fixedpoint algorithm work compositional verification logic hybrid system compositional approach exploit locality system design improve verification power introduce saturation procedure refines system dynamic successively differential invariant safety becomes provable complementing symbolic verification algorithm robust version numerical falsification obtain fast sound verification procedure verify roundabout maneuver air traffic management collision avoidance train control car control
2009,bayesian approach model checking biological system,recently considerable interest use model checking system biology unfortunately state space stochastic biological model often large classical model checking technique model statistical approach model checking shown effective alternative extending earlier work present first algorithm performing statistical model checking using bayesian sequential hypothesis testing show bayesian approach outperforms current statistical model checking technique rely test classical  statistic requiring fewer system simulation another advantage approach ability incorporate prior biological knowledge model verified demonstrate algorithm variety model system biology literature show enables faster verification state-of-the-art technique even prior knowledge available
2009,efficient sat solving non-clausal formula using dpll graph watched cut,boolean satisfiability  solver used heavily hardware software verification tool checking satisfiability boolean formula state-of-the-art sat solver based davis-putnam-logemann-loveland  algorithm require input formula conjunctive normal form  present new sat solver operates negation normal form  given boolean formulas/circuits nnf formula usually succinct cnf formula term number variable algorithm applies dpll algorithm graph-based representation nnf formula adapt idea two-watched-literal scheme cnf sat solver order efficiently carry boolean constraint propagation  key task dpll algorithm evaluate new solver large collection boolean circuit benchmark obtained formal verification problem new solver outperforms top solver sat  competition sat-race  term run time large majority benchmark
2009,formal verification curved flight collision avoidance maneuver case study,aircraft collision avoidance maneuver important complex application curved flight exhibit nontrivial continuous behavior combination control choice air traffic maneuver yield hybrid system challenging interaction discrete continuous dynamic case study illustrating use new proof assistant logic nonlinear hybrid system analyze collision freedom roundabout maneuver air traffic control appropriate curved flight good timing compatible maneuvering crucial guaranteeing safe spatial separation aircraft throughout flight show formal verification hybrid system scale curved flight maneuver required aircraft control application introduce fully flyable variant roundabout collision avoidance maneuver verify safety property compositional verification
2009,27-year quest overcome state explosion problem,model checking automatic verification technique state-transition system finite-state finite-state abstraction early series joint paper graduate student ea emerson ap sistla proposed model checking could used verifying concurrent system gave algorithm purpose roughly time joseph sifakis student jp queille university grenoble independently developed similar technique model checking used successfully reason computer hardware communication protocol beginning used verifying computer software specification written temporal logic particularly valuable expressing concurrency property intelligent exhaustive search used determine specification true specification true model checker produce counterexample execution trace show specification hold feature extremely useful finding obscure error complex system main disadvantage model checking state-explosion problem occur system verification many process complex data structure although state-explosion problem inevitable worst case past  year considerable progress made problem certain class state-transition system occur often practice talk describe model checking work main technique developed combating state explosion problem
2009,model checking - 27-year quest overcome state explosion problem,model checking automatic verification technique state-transition system finite-state finite-state abstraction early series joint paper graduate student ea emerson ap sistla proposed model checking could used verifying concurrent system gave algorithm purpose roughly time joseph sifakis student jp queille university grenoble independently developed similar technique model checking used successfully reason computer hardware communication protocol beginning used verifying computer software specification written temporal logic particularly valuable expressing concurrency property intelligent exhaustive search used determine specification true specification true model checker produce counterexample execution trace show specification hold feature extremely useful finding obscure error complex system main disadvantage model checking state-explosion problem occur system verification many process complex data structure although state-explosion problem inevitable worst case past  year considerable progress made problem certain class state-transition system occur often practice talk describe model checking work main technique developed combating state explosion problem
2009,learning minimal separating dfas compositional verification,algorithm learning minimal separating dfa two disjoint regular language proposed adapted different application one important application learning minimal contextual assumption automated compositional verification propose paper efficient learning algorithm called learns generates minimal separating dfa algorithm quadratic query complexity product size minimal dfa’s two input language contrast recent algorithm gupta et al exponential query complexity size two dfa’s moreover experimental  show learning algorithm significantly outperforms existing algorithm randomly-generated example problem describe algorithm adapted automated compositional verification adapted version evaluated ltsa benchmark compared automated compositional verification approach result show algorithm surpasses others   benchmark problem
2008,verification evolving software via component substitutability analysis,paper present automated compositional procedure solve substitutability problem context evolving software system solution contributes two technique checking correctness software upgrade  technique based simultaneous use over-and under-approximations obtained via existential universal abstraction  dynamic assume-guarantee reasoning algorithmpreviously generated component assumption reused altered on-the-fly prove disprove global safety property updated system upgrade found non-substitutable solution generates constructive feedback developer showing improve component substitutability approach implemented validated comfort reasoning framework report encouraging  industrial benchmark
2008,word-level predicate-abstraction refinement technique verifying rtl verilog,first step model checker used hardware industry convert high-level register-transfer-level  design netlist however algorithm operate netlist level unable exploit structure higher abstraction level thus le scalable rtl hardware description language verilog similar software program special feature hardware design bit-vector arithmetic concurrency paper us predicate abstraction software verification technique verifying rtl verilog two challenge applying predicate abstraction circuit  computation abstract model presence large number predicate  discovery suitable word-level predicate abstraction refinement address first problem using technique called predicate clustering address second problem computing weakest precondition verilog statement order obtain new word-level predicate abstraction refinement compare performance technique localization reduction netlist-level abstraction technique report improvement set benchmark
2008,statistical model checking biolab application automated analysis t-cell receptor signaling pathway,present algorithm called biolab verifying temporal property rule-based model cellular signalling networksbiolab model encoded bionetgen language property expressed formula probabilistic bounded linear temporal logic temporal logic formalism representing reasoning proposition qualified term time property verified using sequential hypothesis testing execution generated using stochastic simulation biolab optimal sense generates minimum number execution necessary verify given property biolab also provides guarantee probability generating type-i  type-ii  error moreover error bound pre-specified user demonstrate biolab verifying stochastic effect bistability dynamic t-cell receptor signaling network
2008,statistical model checking mixed-analog circuit application third order delta-sigma modulator,paper consider verifying property mixed-signal circuit ie circuit interaction analog  digital  quantity follow statistical model checking approach  consists evaluating property representative subset behavior generated simulation answering question whether circuit satisfies property probability greater equal value answer correct certain probability error pre-specified method automatically determines minimal number simulation needed achieve desired accuracy thus providing convenient way control trade-off precision computational cost propose logic adapted specification property mixed-signal circuit temporal domain well frequency domain logic unique allows u compare fourier transform two signal demonstrate applicability method model third order δ − σ modulator previous formal verification attempt conservative required excessive computation time
2008,verification supervisory control software using state proximity merging,paper describes approach bounded-time verification safety property supervisory control software interacting continuous-time plant combination software model checking numerical simulation used compute conservative approximation reachable state technique verifies system property presence nondeterministic behavior software due instance interleaving task notion program equivalence used characterize behavior controller bisimulation function girard pappa employed characterize behavior plant approach conservatively merge trace reach state proximity technique implemented case affine plant dynamic allows efficient operation ellipsoidal set based convex optimization involving linear matrix inequality  present illustrative example model position controller unmanned aerial vehicle 
2008,birth model checking,“when time ripe certain thing thing appear different place manner violet coming light early spring” 
2008,design synthesis synchronization skeleton using branching time temporal logic,propose method constructing concurrent program synchronization skeleton program automatically synthesized high-level  temporal logic specification synchronization skeleton abstraction actual program detail irrelevant synchronization suppressed example synchronization skeleton solution critical section problem process’s critical section may viewed single node since internal structure critical section unimportant solution synchronization problem literature fact given synchronization skeleton synchronization skeleton general finite state propositional version temporal logic used specify property
2008,extending automated compositional verification full class omega-regular language,recent study suggested applicability learning automated compositional verification however current learning algorithm fall short come learning liveness property extend automaton synthesis paradigm infinitary language presenting algorithm learn arbitrary regular set infinite sequence  alphabet σ main result algorithm learn nondeterministic büchi automaton recognizes unknown ω-regular language done learning unique projection σ * using framework suggested angluin learning regular subset σ *
2008,proving ptolemy right environment abstraction framework model checking concurrent system,parameterized verification concurrent algorithm protocol addressed variety recent method experience show trade-off technique widely applicable depend non-trivial human guidance fully automated approach tailored narrow class application spectrum propose new framework based environment abstraction exhibit large degree automation easily adjusted different field application approach based two insight first argue natural abstraction concurrent software derived “ptolemaic” perspective human engineer focus single reference process class abstraction demonstrate soundness abstraction general assumption second protocol given class protocol – instance cache coherence protocol mutual exclusion protocol – modeled small set compound statement two insight allow u efficiently build precise abstract model given protocol model checked demonstrate power method applying various well known class protocol
2007,verification specc using predicate abstraction,language systemc specc offer modeling hardware whole system design high level abstraction however formal verification technique widely applied hardware design industry low level design netlist rtl higher abstraction level offered new language yet amenable rigorous formal verification paper describes apply predicate abstraction specc system description technique support concurrency construct offered specc model bit-vector semantics language accurately used property checking checking refinement together traditional low-level design given verilog
2007,model checking software beyond,paper introduces model checking originally conceived checking finite statesystems survey evolution encompass finitely checkable property system unbounded state space application software system
2007,sat-based compositional verification using lazy learning,recent approach automated assume-guarantee reasoning  concurrent system relies computing environment assumption component using l * algorithm learning regular language approach investigated extensively message passing system still remains challenge scale technique large shared memory system mainly assumption exponential communication alphabet size paper propose sat-based methodology employ induction interpolation implement automated agr shared memory system method based new lazy approach assumption learning avoids explicit enumeration exponential alphabet set learning using symbolic alphabet clustering iterative counterexample-driven localized partitioning preliminary experimental  benchmark verilog smv encouraging show approach scale well practice
2007,reachability linear hybrid automaton using iterative relaxation abstraction,paper introduces iterative relaxation abstraction  new method reachability analysis lha aim improve scalability combining capability current tool analysis low-dimensional lha power linear programming  large number constraint variable ira inspired success counterexample guided abstraction refinement  technique verification discrete system iteration low-dimensional lha called relaxation abstraction constructed using subset continuous variable original lha hybrid system reachability analysis generates regular language called discrete path abstraction containing possible counterexample  relaxation abstraction discrete path abstraction non-empty particular counterexample selected lp infeasibility analysis determines counterexample spurious using constraint along path original high-dimensional lha counterexample spurious lp technique identify irreducible infeasible subset  constraint set continuous variable selected construction next relaxation abstraction ira stop discrete path abstraction empty legitimate counterexample found effectiveness approach illustrated example
2007,image computation problem hybrid system model checking,paper analyze limit approximation technique  continuous image computation model checking hybrid system particular show even single step continuous image computation semidecidable numerically even restricted class function moreover show symbolic insight derivative bound provides sufficient additional information approximation refinement model checking finally prove purely numerical algorithm perform continuous image computation arbitrarily high probability using  analyze prerequisite safe operation roundabout maneuver air traffic collision avoidance
2007,arithmetic strengthening shape analysis,shape analysis often imprecise numerical reasoning whereas numerical static analysis often largely unaware shape program’s heap paper propose lazy method combining shape analysis based separation logic arbitrary arithmetic analysis potentially spurious counterexample reported shape analysis method construct purely arithmetic program whose trace over-approximate set counterexample trace us arithmetic program together arithmetic analysis construct refinement shape analysis method aimed proving property require comprehensive reasoning heap together targeted arithmetic reasoning given sufficient precondition technique automatically prove memory safety program whose error-free operation depends combination shape size integer invariant implemented algorithm tested number common list routine using variety arithmetic analysis tool refinement
2007,vcegar verilog counterexample guided abstraction refinement,first step model checker used hardware industry convert high-level register transfer language  design netlist however algorithm operate netlist level unable exploit structure higher abstraction level thus le scalable rtl level hardware description language verilog similar software program special feature hardware design bit-vector arithmetic concurrency describe hardware model checking tool vcegar performs verification rtl level using software verification technique implement predicate abstraction refinement loop used software verification novel aspect generation new word-level predicate efficient predicate image computation presence large number predicate precise modeling bit-vector semantics hardware design
2006,ranking attack graph,majority attack computer system result combination vulnerability exploited intruder break system attack graph general formalism used model security vulnerability system possible sequence exploit intruder use achieve specific goal attack graph constructed automatically using off-the-shelf model-checking tool however real system size complexity attack graph greatly exceeds human ability visualize understand analyze therefore useful identify relevant portion attack graph achieve propose ranking scheme state attack graph rank state show importance based factor like probability intruder reaching state given ranked attack graph system administrator concentrate relevant subgraphs figure start deploying security measure also define metric security system based rank system administrator use compare attack graph determine effectiveness various defense measure present two algorithm rank state attack graph based probability attacker reaching state first algorithm similar pagerank algorithm used google measure importance web page world wide web flexible enough model variety situation efficiently computable large sized graph offer possibility approximation using graph partitioning second algorithm rank individual state based reachability probability attacker random simulation finally give example application ranking technique multi-stage cyber attack
2006,satisfiability checking non-clausal formula using general mating,state-of-the-art sat solver based dpll search require input formula clausal form  however typical formula arise practice non-clausal present new non-clausal sat-solver based general mating instead dpll search technique able handle non-clausal formula involving ∨∧¬ operator without destroying structure introducing new variable present technique performing search space pruning learning non-chronological backtracking context general mating based sat solver experimental  show sat solver competitive current state-of-the-art sat solver class non-clausal benchmark
2006,verifying concurrent message-passing c program recursive call,consider model-checking problem c program  data ranging large domain   procedure call  concurrent parallel component communicate via synchronizing action model program using communicating pushdown system reduce reachability problem model deciding emptiness intersection two context-free language l  l  tackle undecidable problem using counterexample guided abstraction refinement  scheme implemented technique model checker magic found previously unknown bug version window nt bluetooth driver
2006,environment abstraction parameterized verification,many aspect computer system naturally modeled parameterized system render automatic verification difficult well-known example cache coherence protocol mutual exclusion protocol unbounded parameter number concurrent process run distributed algorithm paper introduce environment abstraction tool verification concurrent parameterized system environment abstraction enriches predicate abstraction idea counter abstraction enables u reduce concurrent parameterized system unbounded variable precise abstract finite state transition system verified finite state model checker demonstrate feasibility approach verifying safety liveness property lamport’s bakery algorithm szymanski’s mutual exclusion algorithm best knowledge first time safety liveness property bakery algorithm verified level automation
2005,concurrent software verification state event deadlock,present framework model checking concurrent software system incorporates state event contrary state/event approach work also integrates two powerful verification technique counterexample-guided abstraction refinement compositional reasoning specification language state/event extension linear temporal logic allows u express many property software concise intuitive manner show standard automata-theoretic ltl model checking algorithm ported framework extra cost enabling u directly benefit large body research efficient ltl verificationwe also present algorithm detect deadlock concurrent message-passing program deadlock- freedom important desirable property right also prerequisite soundness model checking algorithm even though deadlock inherently non-compositional preserved classical abstraction iterative algorithm employ  abstraction compositional reasoning alleviate state-space explosion problem resulting framework differs key respect instance counterexample-guided abstraction refinement paradigm found literaturewe implemented work magic verification tool concurrent c program performed test broad set benchmark experiment show new approach eas writing specification also yield important gain space time verification certain case even encountered specification could verified using traditional pure event-based state-based approach became tractable within state/event framework also recorded substantial reduction time memory consumption performing deadlock-freedom check new abstraction finally report two bug  source code micro-c/os version   discovered experiment
2005,iterative framework simulation conformance,magic software verification project c source code verifies conformance software component statemachine specification aim magic extract abstract software model using predicate abstraction resolve inherent trade-off model accuracy scalability iterative abstraction refinement methodology paper present core principle implemented magic verification engine ie specification conformance using simulation abstraction refinement viewing counterexample winning strategy simulation game implementation specification describe algorithm abstraction refined basis multiple winning strategy simultaneously refinement process iterated either conformance specification established strategy violate specification found realizable addition increase expressiveness achieved using simulation instead trace containment experimental  using openssl indicate approach lead order magnitude improvement verification time
2005,computational challenge bounded model checking,describe several observation regarding completeness complexity bounded model checking propose technique solve associated computational challenge begin defining completeness threshold prove complexity standard sat-based bmc doubly exponential consequently complexity gap exponent procedure standard ltl model checking discus way bridge gap
2005,automated assume-guarantee reasoning simulation conformance,address issue efficiently automating assume-guarantee reasoning simulation conformance finite state system specification focus non-circular assume-guarantee proof rule show weakest assumption represented canonically deterministic tree automaton  present algorithm l learns dta automatically incremental fashion time polynomial number state equivalent minimal dta algorithm assumes teacher answer membership candidate query pertaining language unknown dta show teacher implemented using model checker implemented framework comfort toolkit report encouraging   non-trivial benchmark
2005,word level predicate abstraction refinement verifying rtl verilog,model checking technique applied large industrial circuit suffer state space explosion problem major technique address problem abstraction commonly used abstraction technique hardware verification localization reduction remove latch relevant property however localization reduction fails reduce size model property actually depends latch paper proposes use predicate abstraction verifying rtl verilog technique successfully used software verification main challenge using predicate abstraction discovery suitable predicate propose use weakest precondition verilog statement order obtain new predicate abstraction refinement technique applied circuit benchmark taken industrial microprocessor successfully verified safety property  latch cone influence compare performance technique modern model checker implement localization reduction
2005,dynamic component substitutability analysis,paper present automated compositional procedure solve substitutability problem context evolving software system solution contributes two technique checking correctness software upgrade  technique based simultaneous use approximation obtained via existential universal abstraction  dynamic assume-guarantee reasoning algorithm – previously generated component assumption reused altered on-the-fly prove disprove global safety property updated system upgrade found non-substitutable solution generates constructive feedback developer showing improve component substitutability approach implemented validated comfort model checking tool set report encouraging  industrial benchmark
2005,program compatibility approach,paper survey several technique proven useful establishing compatibility among behaviorally similar program  give comparative analysis technique evaluating applicability various aspect compatibility problem
2005,refining abstraction hybrid system using counterexample fragment,counterexample guided abstraction refinement powerful technique verifying property discrete-state system extended recently hybrid system verification unlike discrete system however establishing successor relation hybrid system fairly expensive step since requires evaluation over-approximation continuous dynamic observed often sufficient consider fragment counterexample rather complete counterexample paper develop idea fragment extend notion cut set directed graph cutting set fragment abstraction cutting set fragment used guide abstraction refinement order prove safety property hybrid system
2005,reconsidering cegar learning good abstraction without refinement,abstraction technique successful model checking large system enabling model checker ignore irrelevant detail abstraction technique literature based refinement introduce notion broken trace capture necessary sufficient condition existence error path abstract model formulate abstraction learning abstract model sample broken trace iterative algorithm abstraction-based model checking based refinement generate smallest abstract model prof property present implementation algorithm verification safety property gate-level net-lists localization abstraction experimental  prove viability technique
2005,state/event software verification branching-time specification,domain concurrent software verification evident need specification formalism efficient algorithm verify branching-time property involve data communication address problem defining new branching-time temporal logic se-aωωwhich integrates state-based action-based property se-aωωis universal ie preserved simulation relation thus amenable counterexample-guided abstraction refinement provide model-checking algorithm logic based upon compositional abstraction-refinement loop exploit natural decomposition concurrent system component abstraction refinement step performed component separately model checking step requires explicit composition abstracted component experimental evaluation integrated algorithm within comfort reasoning framework used verify piece industrial robot control software
2005,satabs sat-based predicate abstraction ansi-c,paper present model checking tool satabs implement predicate abstraction refinement loop existing software verification tool slam blast magic use decision procedure abstraction simulation limited integer satabs overcomes limitation using sat-solver allows model checker handle semantics ansi-c standard accurately includes sound treatment bit-vector overflow ansi-c pointer arithmetic construct
2005,grand challenge model check software,model checking successfully employed verification industrial hardware system recently model checking technique also enjoyed limited success verifying software system viz device driver however several hurdle must overcome model checking used handle industrial-scale software system article review prominent model checking technique used verification software summarizes existing challenge field
2005,model checking back forth hardware software,interplay back forth software model checking hardware model checking fruitful originally intended analysis concurrent software model checking first used hardware verification abstraction method developed hardware verification however stepping stone new generation software verification tool including slam blast magic focus control-intensive software c recently experience software verification providing new leverage verifying hardware design high level language
2004,veriagent approach integrating uml formal verification tool,mathematical notation formal verification tool  prevent u wrongly defining behavior system modern case tool software rapidly growing size complexity graphical specification language like uml need formally verified implementation phase order guarantee development reliable system enterprise integrating case fvts reasonable success translation simple diagram model checker notation progress regarding fundamental aspect interface fully integrate work present interface joining technology reliable solution bridging gap
2004,predicate abstraction ansi-c program using sat,predicate abstraction major method verification software however generation abstract boolean program set predicate original program suffers exponential number theorem prover call well soundness issue paper present novel technique us efficient sat solver generating abstract transition relation ansi-c program sat-based approach computes precise safe abstraction compared existing predicate abstraction technique
2004,efficient verification sequential concurrent c program,considerable progress domain software verification last year advancement driven large extent emergence powerful yet automated abstraction technique predicate abstraction however state-space explosion problem model checking remains chief obstacle practical verification real-world distributed system even case purely sequential program crucial requirement make predicate abstraction effective use predicate possible worst case state-space abstraction generated  exponential number predicate involved addition concurrent program number reachable state could grow exponentially number componentswe attempt address issue context verifying concurrent  c program safety specification specifically present fully automated compositional framework combine two orthogonal abstraction technique  within counterexample-guided abstraction refinement scheme way algorithm incrementally increase granularity abstraction specification either established refuted additionally key feature approach property proved hold hold based given finite set predicate p predicate refinement procedure propose article find automatically minimal subset p sufficient proof along explicit use compositionality delay onset state-space explosion long possible describe approach detail report encouraging experimental  obtained tool magic
2004,sat-based counterexample-guided abstraction refinement,describe new technique model checking counterexample-guided abstraction-refinement framework abstraction phase hide logic various variable hence considering input type abstraction may lead spurious counterexample ie trace cannot simulated original  machine check whether counterexample real spurious satisfiability  checker use combination - integer linear programming machine learning technique refining abstraction based counterexample process repeated either real counterexample found property verified implemented technique top model checker nusmv sat solver chaff experimental  prove viability new technique
2004,modular verification software component c,present new methodology automatic verification c program finite state machine specification approach compositional naturally enabling u decompose verification large software system subproblems manageable complexity decomposition reflects modularity software design use weak simulation notion conformance program specification following counterexample guided abstraction refinement  paradigm tool magic first extract finite model c source code using predicate abstraction theorem proving subsequently weak simulation checked via reduction boolean satisfiability magic interfaced several publicly available theorem provers sat solver report experimental  procedure linux kernel openssl toolkit several industrial strength benchmark
2004,verification network decomposition,describe new method verify network homogeneous process communicate token passing given arbitrary network graph indexed ltl ∖ x property show decompose network graph multiple constant size network thereby reducing one model checking call large network several call small network thus obtain cut-offs arbitrary class network adding previous work emerson namjoshi ring topology  ltl ∖ x complemented negative result precludes existence reduction ctl ∖ x general network
2004,sat-based algorithm reparameterization symbolic simulation,parametric representation used symbolic simulation circuit usually use bdds step symbolic simulation state set representation converted one parametric representation another smaller representation process called reparameterization large circuit reparametrization step often  blowup bdds expensive due large number quantification input variable involved efficient sat solver applied successfully many verification problem paper present novel sat-based reparameterization algorithm largely immune large number input variable need quantified show experimental  large industrial circuit compare new algorithm sat-based bounded model checking bdd based symbolic simulation able achieve average x improvement time space bmc able complete many example bdd based approach could even finish
2004,checking consistency c verilog using predicate abstraction induction,common practice write c model circuit due greater simulation efficiency c program satisfies requirement circuit designed hardware description language  verilog therefore highly desirable automatically perform correspondence check c model circuit given hdl present algorithm check consistency ansi-c program circuit given verilog using predicate abstraction algorithm exploit fact c program circuit share many basic predicate contrast existing tool perform predicate abstraction approach sat-based allows ansi-c verilog operator predicate report experimental  out-of-order risc processor compare performance new technique bounded model checking 
2004,tutorial software model checking,model checking automated technique systematic exploration state space state transition system first part tutorial provides introduction basic concept model checking including bdd- sat-based symbolic model checking partial order reduction abstraction compositional verification model checking applied sucessfully hardware past however software become complex part safety ciritcal system second part tutorial cover tool use model checking formally verify computer software
2004,counterexample guided abstraction refinement via program execution,software model checking tool based counterexample guided abstraction refinement  framework attained considerable success limited domain however scaling approach larger program complex data structure initialization behavior proven difficult explicit-state model checker making use state operational semantics closely related actual program execution dealt complex data type semantic issue successfully deal well large state space paper present approach software model checking actually executes program order drive abstraction-refinement input required execution derived abstract model driving abstraction-refinement loop combination constant-sized  boolean satisfiability-based simulation actual program execution extends abstraction-based software model checking much wider array program current tool handle case program containing error experimental  applying crunner tool implement execution-based refinement faulty correct c program demonstrate practical utility idea
2004,state/event-based software model checking,present framework model checking concurrent software system incorporates state event contrary state/event approach work also integrates two powerful verification technique counterexample-guided abstraction refinement compositional reasoning specification language state/event extension linear temporal logic allows u express many property software concise intuitive manner show standard automata-theoretic ltl model checking algorithm ported framework extra cost enabling u directly benefit large body research efficient ltl verificationwe implemented work within concurrent c model checker magic checked number property openssl-c  micro-c o version   experiment show new approach eas writing specification also yield important gain space time verification certain case even encountered specification could verified using traditional pure event-based state-based approach became tractable within state/event framework report bug source code micro-c o version  found experiment
2004,automated compositional iterative deadlock detection,present algorithm detect deadlock concurrent message-passing program even though deadlock inherently noncompositional absence preserved standard abstraction framework employ abstraction compositional reasoning alleviate state space explosion problem iteratively construct increasingly precise abstraction basis spurious counterexample either detect deadlock prove deadlock exists approach inspired counterexample-guided abstraction refinement paradigm however notion abstraction well scheme verification abstraction refinement differs key respect existing abstraction refinement framework algorithm also compositional abstraction counterexample validation refinement carried component-wise require construction complete state space concrete system consideration finally approach completely automated provides diagnostic feedback case deadlock detected implemented technique magic verification tool present encouraging   concurrent message-passing c program also report bug real-time operating system microc/os version 
2004,tool checking ansi-c program,present tool formal verification ansi-c program using bounded model checking  emphasis usability tool support almost ansi-c language feature including pointer construct dynamic memory allocation recursion float double data type perspective user verification highly automated input required bmc bound tool integrated graphical user interface essential presenting long counterexample trace tool allows stepping trace way debugger allows stepping program
2004,completeness complexity bounded model checking,every finite model ltl property ϕ exists numberctc counterexample ϕ lengthctcor le m⊧ϕ finding number sufficiently small offer practical method making bounded model checking complete describe compute over-approximation toctcfor general ltl property using büchi automaton following vardi-wolper ltl model checking framework based value ofctc prove complexity standard sat-based bmc doubly exponential consequently complexity gap exponent procedure standard ltl model checking discus way bridge gapthe article mainly focus observation regarding bounded model checking rather presentation new technique
2003,bounded model checking,symbolic model checking binary decision diagram  successfully used last decade formally verifying finite state system sequential circuit protocol since introduction beginning integrated quality assurance process several major hardware company main bottleneck method bdds may grow exponentially hence amount available memory restricts size circuit verified efficiently article survey technique called bounded model checking  us propositional sat solver rather bdd manipulation technique since introduction  bmc well received industry find many logical error complex system handled competing technique therefore widely perceived complementary technique bdd-based model checking observation supported several independent comparison published last year
2003,automated compositional abstraction refinement concurrent c program two-level approach,state space explosion problem model checking remains chief obstacle practical verification real-world distributed system attempt address problem context verifying concurrent  c program safety specification specifically present fully automated compositional framework combine two orthogonal abstraction technique  within counterexample-guided abstraction refinement  scheme way algorithm incrementally increase granularity abstraction specification either established refuted explicit use compositionality delay onset state space explosion long possible knowledge first compositional use cegar context model checking concurrent c program describe approach detail report encouraging preliminary experimental  obtained tool magic
2003,abstraction counterexample-guided refinement model checking hybrid system,hybrid dynamic system include continuous discrete state variable property hybrid system infinite state space often verified using ordinary model checking together finite-state abstraction model checking inconclusive however case abstraction must refined paper present new procedure perform refinement operation abstraction hybrid system following approach originally developed finite-state system  refinement procedure construct new abstraction eliminates counterexample generated model checker hybrid system analysis counterexample requires computation set reachable state continuous state space show reachability computation varying degree complexity used refine hybrid system abstraction efficiently example illustrate counterexample-guided refinement procedure experimental  prototype implementation indicate significant advantage existing method
2003,counterexample-guided abstraction refinement symbolic model checking,state explosion problem remains major hurdle applying symbolic model checking large hardware design state space abstraction essential verifying design industrial complexity typically manual process requiring considerable creativity insightin article present automatic iterative abstraction-refinement methodology extends symbolic model checking method initial abstract model generated automatic analysis control structure program verified abstract model may admit erroneous  counterexample devise new symbolic technique analyze counterexample refine abstract model correspondingly describe asmv prototype implementation methodology nusmv practical experiment including large fujitsu ip core design  latch  line smv code confirm effectiveness approach
2003,efficient verification security protocol using partial-order reduction,paper explore partial-order reduction make task verifying security protocol efficient reduction technique implemented tool brutus partial-order reduction proved useful domain model checking reactive system reduction directly applicable context additional complication caused tracking knowledge various agent present partial-order reduction context verifying security protocol prove correctness experimental  demonstrating effectiveness reduction technique also presented
2003,hardware verification using ansi-c program reference,describe algorithm verify hardware design given verilog using ansi-c program specification use sat based bounded model checking  order reduce equivalence problem bit vector logic decision problem case study describe experimental  hardware software implementation data encryption standard  algorithm
2003,counterexample revisited principle algorithm application,algorithmic counterexample generation central feature model checking set method apart approach theorem proving practical value counterexample verification engineer evident many year counterexample generation algorithm employed model checking system even though subject adequate fundamental investigation recent advance model checking technology counterexample-guided abstraction refinement put strong emphasis counterexample lead renewed interest fundamental pragmatic aspect counterexample generation paper survey several key contribution subject including symbolic algorithm  graph-theoretic structure counterexample application automated abstraction well software verificationirrefutability virtue theory  vice karl r popper
2003,sat-based counterexample guided abstraction refinement model checking,introduce sat based automatic abstraction refinement framework model checking system several thousand state variable cone influence specification abstract model constructed designating large number state variable “invisible” contrast previous work invisible variable treated free input describe computationally advantageous approach abstract transition relation approximated “pre-quantifying” invisible variable image computation abstract counterexample obtained model-checking abstract model symbolically simulated concrete system using state-of-the-art sat checker concrete counterexample found subset invisible variable reintroduced system process repeatedwe discus two new algorithm identifying relevant variable reintroduced algorithm monitor sat checking phase order analyze impact individual variable method complete safety property ag p sense – performance permitting – property either verified disproved concrete counterexample experimental  given demonstrate power method real-world design
2003,making predicate abstraction efficient eliminate redundant predicate,paper consider technique identify remove redundant predicate predicate abstraction give three criterion identifying redundancy predicate redundant following three hold  predicate equivalent propositional function predicate  removing predicate preserve safety property satisfied abstract model  removing preserve bisimulation equivalence also show efficiently remove redundant predicate identified experimental  included demonstrate effectiveness method
2003,predicate abstraction minimum predicate,predicate abstraction popular abstraction technique employed formal software verification crucial requirement make predicate abstraction effective use predicate possible since abstraction process worst case exponential  number predicate involved property proven hold hold based given finite set predicatespp procedure propose paper find automatically minimal subset ofppthat sufficient proof explain technique used efficient verification c program experiment show predicate minimization result significant reduction verification time memory usage compared earlier method
2003,behavioral consistency c verilog program using bounded model checking,present algorithm check behavioral consistency ansi-c program circuit given verilog using bounded model checking circuit program unwound translated formula represents behavioral consistency formula checked using sat solver able translate c program include side effect pointer dynamic memory allocation loop condition cannot evaluated statically describe experimental  various reactive circuit program including small processor given verilog instruction set architecture given ansi-c
2003,model checking dependable software-intensive system,model checking indispensable development modern digital circuitry emerging valuable instrument software verification model checking uncovered error variety software-intensive system including spacecraft redundancy management aircraft collision avoidance weapon control system approach offer potential help ensure behavioral property eliminate catastrophic error software system require high level dependability 
2003,specifying verifying system multiple clock,multiple clock domain challenge hardware specification verification present method specifying relation multiple clock modeling possible behavior verify hardware design assuming clock meet constraint implement idea context sat based bounded model checking  using ansi-c program specify functional behavior design
2003,sat-based algorithm logic minimization,introduce new method two-level logic minimization unlike previous approach new method us sat solver underlying engine overall minimization strategy new method based operator defined espresso-ii sat-based implementation significantly different new minimizer sat-espresso found perform - time faster espresso-ii - time faster boom set large example
2003,high level verification control intensive system using predicate abstraction,predicate abstraction widely used model checking hardware/software system however control intensive system existing predicate abstraction technique potentially result blowup size abstract model deal problem retaining important control variable abstract model method avoid introduce unreasonable number predicate simulate behavior control variable also show improve predicate abstraction extracting useful information high level representation hardware/software system technique work first extracting relevant branch condition branch condition used invalidate spurious abstract counterexample new counterexample-based lazy refinement algorithm experimental  included demonstrate effectiveness method
2003,sat based predicate abstraction hardware verification,predicate abstraction important technique extracting compact finite state model large infinite state system predicate abstraction us decision procedure compute model amenable model checking used successfully software verification little work however done applying predicate abstraction large scale finite state system notably hardware decision procedure sat solver consider predicate abstraction hardware framework counterexample-guided abstraction refinement course verification abstract model repeatedly refined goal refinement eliminate spurious behavior abstract model present original model give rise false negative paper present two efficient sat-based algorithm refine abstract hardware model deal spurious transition spurious counterexample respectively algorithm make use conflict graph generated sat solver first algorithm extract constraint conflict graph used make abstract model accurate abstract transition determined spurious algorithm need make additional call sat solver second algorithm generates compact predicate eliminates spurious counterexample algorithm us conflict graph identify important concrete variable render counterexample spurious creates additional predicate concrete variable add abstract model experiment hardware design several thousand register demonstrate effectiveness method
2003,verification hybrid system based counterexample-guided abstraction refinement,hybrid dynamic system include continuous discrete state variable property hybrid system infinite state space often verified using ordinary model checking together finite-state abstraction model checking inconclusive however case abstraction must refined paper present new procedure perform refinement operation abstraction infinite-state system particular hybrid system following approach originally developed finite-state system  refinement procedure construct new abstraction eliminates counterexample generated model checker hybrid system analysis counterexample requires computation set reachable state continuous state spacewe showhowsuch reachability computation varying degree complexity used refine hybrid system abstraction efficiently detailed example illustrates counterexample-guided refinement procedure experimental  prototype implementation procedure indicate advantage existing method
2003,counterexample-guided abstraction refinement,main practical problem model checking combinatorial explosion system state commonly known state explosion problem abstraction method attempt reduce size state space employing knowledge system specification order model relevant feature kripke structure counterexample-guided abstraction refinement automatic abstraction method starting relatively small skeletal representation system verified increasingly precise abstract representation system computed key step extract information false negative  due over-approximation
2002,verification out-of-order processor design using model checking light-weight completion function,present new technique verification complex hardware device allows generality high degree automation technique based new way constructing “light-weight” completion function together new encoding uninterpreted function called reference file representationour technique combine completion function method reference file representation compositional model checking theorem proving extends state art two direction first obtain general verification methodology second easier use since higher degree automationas benchmark take tomasulos algorithm scheduling out-of-order instruction execution used many modern superscalar processor like pentium-ii powerpc  algorithm parameterized processor configuration approach allows u prove correctness general independent actual design
2002,program slicing vhdl,hardware description language  used today describe circuit level large hdl program need source code reduction technique address myriad problem design simulation testing formal verification program slicing static program analysis technique allows analyst automatically extract portion program relevant aspect analyzed slicing fundamentally based data control dependence program point however program slicing algorithm traditionally designed sequential language presence concurrent construct found hdl complicates slicing considerably paper develop concept needed slicing vhdl technique extend readily hdl verilog technique based slicing-oriented vhdl execution semantics augments traditional dependence inter-procedural dependence vhdl process based concept developed automatic vhdl slicing tool composed traditional slicer front-end capture vhdl simulation semantics paper discus technique vhdl slicing slicer tool slicing application design simulation testing formal verification vhdl program particularly important application hdl slicing source code reduction leading reduced state space model checking also present empirical 
2002,sat based abstraction-refinement using ilp machine learning technique,describe new technique model checking counterexample guided abstraction/refinement framework abstraction phase ‘hides’ logic various variable hence considering input type abstraction may lead ‘spurious’ counterexample ie trace simulated original  machine check whether counterexample real spurious sat checker use combination integer linear programming  machine learning technique refining abstraction based counterexample process repeated either real counterexample found property verified implemented technique top model checker nusmv sat solver chaff experimental  prove viability new technique
2002,nusmv 2 opensource tool symbolic model checking,paper describes version  nusmv tool nusmv symbolic model checker originated reengineering reimplementation extension smv original bdd-based model checker developed cmu  nusmv project aim development state-of-the-art symbolic model checker designed applicable technology transfer project well structured open flexible documented platform model checking robust close industrial system standard 
2002,automated abstraction refinement model checking large state space using sat based conflict analysis,introduce sat based automatic abstraction refinement framework model checking system several thousand state variable cone influence specification abstract model constructed designating large number state variable invisible contrast previous work invisible variable treated free input describe computationally advantageous approach abstract transition relation approximated pre-quantifying invisible variable image computation abstract counterexample obtained model-checking abstract model symbolically simulated concrete system using state-of-the-art sat checker concrete counterexample found subset invisible variable reintroduced system process repeated main contribution paper two new algorithm identifying relevant variable reintroduced algorithm monitor sat checking phase order analyze impact individual variable method complete safety property  sense that-performance permitting - property either verified disproved concrete counterexample experimental  given demonstrate power method real-world design
2002,tree-like counterexample model checking,counter example specification violation provide engineer important debugging information although counterexample considered one main advantage model checking state-of art model checker restricted relatively simple counterexample surprisingly little research effort put counterexample paper introduce new general framework counterexample paper three main contribution  determine general form actl counterexample end investigate notion counterexample show large class temporal logic beyond actl admits counterexample simple tree-like transition relation show existence tree-like counterexample related universal fragment extended branching time logic based w-regular temporal operator  present new symbolic algorithm generate tree-like counterexample actl specification  based tree-like counterexample extend abstraction refinement methodology developed recently clarke et al  full actl demonstrates conceptual simplicity elegance tree-like counterexample
2002,sat-based counterexample guided abstraction refinement,describe new technique model checking counterexample guided abstraction / refisnement framework abstraction phase ‘hides’ logic various variable hence considering input type abstraction may lead ‘spurious’ counterexample ie trace cannot simulated original  machine check whether counterexample real spurious sat checker use combination integer linear programming  machine learning technique refining abstraction based counterexample process repeated either real counterexample found property verifiedwe implemented technique top model checker nusmv sat solver chaff experimental  prove viability new technique
2001,bounded model checking using satisfiability solving,phrase model checking refers algorithm exploring state space transition system determine obeys specification intended behavior algorithm perform exhaustive verification highly automatic manner thus attracted much interest industry model checking program commercially marketed however model checking held back state explosion problem problem number state system grows exponentially number system component much research devoted ameliorating problemin tutorial first give brief overview history model checking date focus recent technique combine model checking satisfiability solving technique known bounded model checking fast exploration state space type problem seem offer large performance improvement previous approach review experiment bounded model checking public domain industrial design propose methodology applying technique industry invariance checking summarize pro con new technology discus future research effort extend capability
2001,verus language representing time efficiently bdds,significant advance formal method verify complex system recently nevertheless method yet accepted realistic alternative verification industrial system one reason formal method still difficult apply efficiently another reason current verification algorithm still efficient enough handle many complex system work address problem presenting language designed especially simplify writing time-critical program imperative language syntax similar c special construct provided allow straightforward expression timing property familiar syntax make easier non-experts use tool special construct make possible model timing characteristic system naturally accurately symbolic representation using bdds model checking quantitative algorithm used check system timing property efficiency representation allows complex realistic system verified
2001,using combinatorial optimization method quantification scheduling,model checking process verifying whether model concurrent system satisfies specified temporal property symbolic algorithm based binary decision diagram  significantly increased size model verified main problem symbolic model checking image computation problem ie efficiently computing successor predecessor set state paper in-depth study image computation problem analyze evaluate several new heuristic metric algorithm problem algorithm use combinatorial optimization technique hill climbing simulated annealing ordering recursive partitioning obtain better  previously case theoretical analysis systematic experimentation used evaluate algorithm
2001,progress state explosion problem model checking,model checking automatic verification technique finite state concurrent system approach verification temporal logic specification checked exhaustive search state space concurrent system since size state space grows exponentially number process model checking technique based explicit state enumeration handle relatively small example phenomenon commonly called “state explosion problem” past ten year considerable progress made problem  representing state space symbolically using bdds  using abstraction reduce size state space must searched result model checking used successfully find extremely subtle error hardware controller communication protocol spite success however additional research needed handle large design industrial complexity aim paper give succinct survey symbolic model checking introduce reader recent advance abstraction
2001,using cutwidth improve symbolic simulation boolean satisfiability,paper propose cutwidth based heuristic improve efficiency symbolic simulation sat algorithm algorithm underlying engine many formal verification technique present new approach computing variable ordering reduce cnf/circuit cutwidth show circuit cutwidth peak number live bdds symbolic simulation equal thus using ordering reduces cutwidth scheduling gate symbolic simulation significantly improve runtime memory requirement shown time complexity sat problem bounded exponentially formula cutwidth many practical circuit cutwidth logarithmic size formula developed cutwidth based heuristic practice speed existing sat algorithm especially sat instance small cutwidth demonstrate power approach number standard benchmark
2001,non-linear quantification scheduling image computation,computing set state reachable one step given set state ie image computation crucial step several symbolic verification algorithm including model checking reachability analysis far best method quantification scheduling image computation conjunctively partitioned transition relation restricted linear schedule  loss flexibility image computation view image computation problem constructing optimal parse tree image set optimality parse tree defined largest bdd encountered computation tree present dynamic static version new algorithm varscore exploit flexibility offered parse tree approach image computation show extensive experimentation technique outperform best known technique far
2001,efficient filtering publish-subscribe system using binary decision,implicit invocation publish-subscribe become important architectural style large-scale system design evolution publish-subscribe style facilitates developing large-scale system composing separately developed component style permit loose coupling various component one major bottleneck using publish-subscribe system large scale system efficiency filtering incoming message ie matching published event event subscription challenging problem realistic publish subscribe system number subscription large present approach matching published event subscription scale large number subscription approach us binary decision diagram compact data structure representing boolean function successfully used verification technique model checking experimental  clearly demonstrate efficiency approach
2000,selective quantitative analysis interval model checking verifying different facet system,work propose verification methodology consisting selective quantitative timing analysis interval model checking method aid determining system work correctly also understanding well system work selective quantitative algorithm compute minimum maximum delay selected subset system execution linear-time temporal logic  formula used select either infinite path finite interval computation performed show tableau ltl formula used selecting either path interval also model checking formula interpreted path intervalsto demonstrate usefulness method verified complex realistic distributed real-time system tool able analyze system compute response time various component moreover able identify inefficiency caused response time increase significantly  changing design verified response time lower also able determine cause poor performance original model using interval model checking
2000,verification safety-critical railway interlocking system real-time constraint,ensuring correctness computer system used life-critical application difficult commonly used verification method simulation testing exhaustive miss error work describes alternative verification technique based symbolic model checking automatically exhaustively search state space system verify property satisfied method also provides useful quantitative timing information behavior system applied technique using verus tool complex safety-critical system designed control medium large-size railway station identified anomalous behavior model serious potential consequence actual implementation fact error identified safety-critical system deployed field eliminates source serious problem also make significantly le expensive debug system
2000,automatic verification hardware software system,logical error finite-state concurrent system sequential circuit design communication protocol important problem computer scientist delay getting new product market cause failure critical device already use research group developed verification method called temporal logic model checking class system approach specification expressed propositional temporal logic circuit protocol modeled state-transit ion system efficient search procedure used determine automatically specification satisfied transition system technique used past find subtle error number non-trivial example
2000,nusmv new symbolic model checker,paper describes new symbolic model checker called nusmv developed part joint project cmu irst nusmv result reengineering reimplementation limited extent extension cmu smv model checker core paper consists detailed description nusmv functionality architecture implementation
2000,verifying security protocol brutus,due rapid growth “internet” “world wide web” security become important concern design implementation software system since security become important issue number protocol domain become large protocol diverse nature software architect want deploy protocol system sure protocol right property dictated requirement system article present brutus tool verifying property security protocol tool viewed special-purpose model checker security protocol also present reduction technique make tool efficient experimental  provided demonstrate efficiency brutus
2000,model checking algorithm  -calculus,propositional mu-calculus powerful language expressing property transition system using least greatest fixpoint operator recently mu-calculus generated much interest among researcher computer-aided verification interest stem fact many temporal program logic encoded mu-calculus addition important relation transition system weak strong bisimulation equivalence also fixpoint characterization wide-spread use binary decision diagram made fixpoint based algorithm even important since method require manipulation individual state take advantage representation
2000,combining decision diagram sat procedure efficient symbolic model checking,paper show symbolic model checking using boolean expression diagram  non-canonical representation boolean formula instead binary decision diagram  traditionally used canonical representation method based standard fixed point algorithm combined bdds sat-solvers perform satisfiability checking result able model check system standard bdd-based method fail example model check liveness property  bit shift-and-add multiplier able find previously undetected bug specification  bit multiplier opposed bounded model checking  method complete practiceour technique based quantification procedure allows u eliminate quantifier quantified boolean formula  basic step procedure up-one operation bed addition list number important optimization reduce number basic step particular optimization rule quantification-by-substitution turned useful∃xg∧≡g rule used  fixed point iteration  deciding whether initial set state subset another set state finally  iterative squaring
2000,efficient variable ordering using abdd based sampling,variable ordering bdds extensively investigated recently sampling based ordering technique proposed overcome problem structure based static ordering method sifting based dynamic reordering technique however existing sampling technique lead unacceptably large deviation size final bdd paper propose new sampling technique based abstract bdds  suffer problem new technique easy implement automate consistently creates high quality variable ordering combinational well sequential function experimental  show many application approach significantly superior existing technique
2000,executable protocol specification esl,hardware specification english frequently ambiguous often self-contradictorywe propose new logic esl facilitates formal specification hardware protocolsour logic closely related ltl express regular safety property developed protocol synthesis methodology generates mealy machine esl specification mealy machine automatically translated executable code either verilog smv methodology exploit observation protocol naturally composed many semantically distinct component structure reflected syntax esl specificationswe use modified ltl tableau construction build mealy machine component mealy machine connected together verilog smv framework many case make possible circumvent state explosion problem code generation identify conflict component simulation model checkingwe implemented tool based logic used specify verify significant part pci bus protocol
2000,theory consistency modular synchronous system,propose model modular synchronous system combinational dependency define consistency using model show derive model modular specification individual module specified kripke structure give algorithm check system consistency implemented algorithm symbolically using bdds tool speccheck used tool check example bus protocol derived industrial specification counterexample obtained protocol highlight need consistency checking
2000,partial order reduction security protocol verification,paper explore partial order reduction make task verifying cryptographic protocol efficient reduction technique implemented tool brutus although implemented several reduction technique tool brutus due space restriction paper focus partial order reduction partial order reduction proved useful domain model checking reactive system reduction directly applicable context additional complication caused tracking knowledge various agent present partial order reduction context verifying security protocol prove correctness experimental  showing benefit reduction technique also presented
1999,semantic foundation probabilistic synchronous reactive program,paper consider synchronous parallel program composed sequential randomized process … k communicate via shared variable first give operational semantics sequential component basis transition relation defined classical sos-style à la plotkin  use specify behaviour markov chain whose transition stand cumulative effect activity component …k within one time step second provide denotational semantics also model markov chain based  least fixed point semantics sequential component formalizes input/output behaviour sequential component within one time step operational  semantics might one designer  mind denotational  semantics one compiler might use establish consistency result stating markov chain induced operational denotational semantics bisimilar sense 
1999,combining local global model checking,verification process reactive system local model checking  explicit state model checking on-the-fly therefore state system traversed necessary prove property addition property hold often small subset state space traversed produce counterexample global model checking  particular symbolic model checking  utilize compact representation state space eg bdds  handle much larger design possible local explicit model checking present new model checking algorithm ltl combine approach essence generalization tableau construction  enables use bdds still on-the-fly
1999,model checking semi-continuous time model using bdds,verification timed system extremely important also extremely difficult several method proposed assist task including extension symbolic model checking one possible use model checking analyze timed system modeling passage time number taken transition applying quantitative algorithm determine timing parameter system advantage method simplicity efficiency paper extend technique two way first present new quantitative algorithm efficient predecessor new algorithm determine number occurrence event path set starting state set final state use algorithm introduce new model time passage time dissociated occurrence event new model possible verify system previously thought require dense time model use new method verify two example previously analyzed hytech tool steam boiler example fuel injection controller
1999,verifying srt division algorithm using theorem proving technique,verify correctness srt division circuit similar one intel pentium processor circuit correctness condition formalized set algebraic relation real number main obstacle applying theorem proving technique hardware verification need detailed user guidance proof overcome need detailed proof guidance example using powerful theorem prover called analytica analytica us symbolic algebra technique carry proof paper much le guidance existing general purpose theorem provers require algebraic reasoning
1999,analysis verification real-time system using quantitative symbolic algorithm,task checking computer system satisfies timing specification extremely important system often used critical application failure meet deadline serious even fatal consequence paper present efficient method performing verification task proposed method real-time system modeled state-transition graph represented binary decision diagram efficient symbolic algorithm exhaustively explore state space determine whether system satisfies given specification addition approach computes quantitative timing information minimum maximum time delay given event  provide insight behavior system assist determination temporal correctness technique evaluates well system work seriously fails opposed whether work based technique verification tool called verus constructed used verification several industrial real-time system robotics system described demonstrates method proposed efficient enough used real-world design example verified show information produced assist designing efficient reliable real-time system
1999,state space reduction using partial order technique,advancement computer technology highly concurrent system developed verification system challenging task state space grows exponentially number process partial order reduction effective technique address problem relies observation effect executing transition concurrently often independent ordering paper present basic principle behind partial order reduction implementation
1999,probverus probabilistic symbolic model checking,model checking tell u whether system correct probabilistic model checking also tell u whether system timely reliable moreover probabilistic model checking allows one verify property may true probability one may still hold acceptable probability challenge developing probabilistic model checker able handle realistic system construction state space necessity solve huge system linear equation address problem developed probverus tool formal verification probabilistic real-time system probverus implementation probabilistic computation tree logic  model checking using symbolic technique present probverus demonstrate use simple manufacturing example report current status tool probverus able analyze within minute safety logic railway interlocking controller  state
1999,multiple state single state tableau combining local global model checking,verification process reactive system local model checking  explicit state model checking  on-the-fly therefore state system traversed necessary prove property addition property hold often small subset state space traversed produce counterexample global model checking  particular symbolic model checking  utilize compact representation state space eg bdds  handle much larger design possible local explicit model checking present new model checking algorithm ltl combine approach essence generalization tableau construction  enables use bdds still on­the­fly
1999,verifiying safety property power pc microprocessor using symbolic model checking without bdds, bounded model checking aid satisfiability solving  introduced alternative symbolic model checking bdds paper show bounded model checking take advantage specialized optimization present bounded version cone influence reduction successfully applied idea checking safety property powerpc microprocessor motorola’s somerset powerpc design center based experience propose verification methodology feel bring model checking mainstream industrial chip design
1999,nusmv new symbolic model verifier,paper describes nusmv new symbolic model checker developed joint project carnegie mellon university  istituto per la ricerca scientifica e tecnolgica  nusmv designed well structured open flexible documented platform model checking order make nusmv applicable technology transfer project designed robust close standard required industry allow expressive specification language nusmv result reengineering reimplementation extension smv  version   respect smv nusmv extended upgraded along three dimension first point view system functionality nusmv feature textual interaction shell graphical interface extended model partitioning technique allows ltl model checking second system architecture nusmv designed highly modular open interdependency different module separated external state art bdd package  integrated system kernel third quality implementation strongly enhanced make nusmv robust maintainable well documented system relatively easy modify source code
1999,abstract bdds technique using abstraction model checking,propose new methodology exploiting abstraction context model-checking new technique us abstract bdds underlying data structure show technique build refined model traditional compiler-based method proposed clarke grumberg long also provide experimental  demonstrate usefulness method verified pipelined carry-save multiplier simple version pci local bus protocol verification pci bus revealed subtle inconsistency pci standard believe interesting result
1999,program slicing hardware description language,hardware description language  used today describe circuit level large hdl program need source code reduction technique address myriad problem formal verification design simulation testing program slicing static program analysis technique allows analyst automatically extract portion program relevant aspect analyzed extend program slicing hdl thus allowing automatic program reduction allow user focus relevant code portion implemented vhdl slicing tool composed general inter-procedural slicer front-end capture vhdl execution semantics paper provides overview program slicing discussion slice vhdl program description resulting tool brief overview application experimental 
1999,symbolic model checking using sat procedure instead bdds,paper study application propositional decision procedure hardware verification particular apply bounded model checking equivalence invariant checking present several optimization reduce size generated propositional formula many instance sat-based approach significantly outperform bdd-based approach observe sat-based technique particularly efficient detecting error combinational sequential design 
1999,symbolic model checking without bdds,symbolic model checking   proven powerful technique verification reactive system bdds  traditionally used symbolic representation system paper show boolean decision procedure like stålmarck’s method  davis & putnam procedure  replace bdds new technique avoids space blow bdds generates counterexample much faster sometimes speed verification addition produce counterexample minimal length introduce bounded model checking procedure ltl reduces model checking propositional satisfiabilitywe show bounded ltl model checking done without tableau construction implemented model checker bmc based bounded model checking preliminary  presented
1998,analytica - experiment combining theorem proving symbolic computation,analytica automatic theorem prover theorem elementary analysis prover written mathematica language run mathematica environment goal project use powerful symbolic computation system prove theorem beyond scope previous automatic theorem provers theorem prover also able deduce correctness certain simplification step would otherwise performed describe structure analytica explain main technique us construct proof analytica able prove several nontrivial theorem paper show prove series lemma lead bernstein approximation theorem
1998,symmetry reduction inmodel checking,use symmetry alleviate state-explosion problem model-checking become important research topic paper investigates several problem important technique exploiting symmetry important problem orbit problem prove orbit problem equivalent important problem computational group theory least hard graph isomorphism known np-complete paper also show class commonly occurring group orbit problem easy method deriving symmetry shared variable model concurrent program also investigated experimental  providing evidence reduction state space using symmetry also provided
1998,combining symbolic model checking uninterpreted function out-of-order processor verification,present new approach verification hardware system data dependency using temporal logic symbolic model checking benchmark take tomasulo’s algorithm  out-of-order instruction scheduling approach similar idea uninterpreted function symbol  use symbolic value instruction instead concrete one allows u show correctness machine independently actual instruction set architecture implementation functional unit instead using first order term  represent symbolic value new compact encoding addition apply reduction technique model significantly reduces state space allows use highly efficient symbolic model checker like smv instead special decision procedure correctness method proven formally pvs theorem prover
1998,model checking vhdl cv,article describes prototype implementation symbolic model checker subset vhdl model checker applies number technique reduce search space thus allowing efficient verification real circuit completed initial release vhdl model checker used verify complex circuit including control logic commercial risc microprocessor
1998,using state space exploration natural deduction style message derivation engine verify security protocol,n/a
1998,model checking historical perspective example extended abstract,model checking automatic verification technique finite state concurrent system sequential circuit design communication protocol specification expressed propositional temporal logic exhaustive search global state transition graph system model used determine specification true specification satisfied counterexample execution trace generated possible encoding model using binary decision diagram  possible search extremely large state space many  reachable state paper describe theory underlying technique outline historical development demonstrate power model checking find subtle error verifying space shuttle three-engines-out contingency guidance protocol
1997,editorial,n/a
1997,another look ltl model checking,show ltl model checking reduced ctl model checking fairness constraint using reduction also describe construct symbolic ltl model checker appears quite efficient practice particular show smv model checking system developed mcmillan  extended permit ltl specification  obtained quite surprising specification expressed ctl ltl ltl model checker required twice much time space ctl model checker also succeeded verifying non-trivial ltl specification amount time space required quite reasonable based example considered appears efficient ltl model checking possible specification excessively complicated
1997,spectral transforms large boolean function application technology mapping,walsh transform numerous application computer-aided design usefulness technique practice limited size boolean function transformed currently available technique limit function le  variable paper show compute concise representation walsh transform function several hundred variable applied technique boolean technology mapping certain case obtained speed much  matching phase
1997,symbolic technique formally verifying industrial system,design correct computer system extremely difficult however also important task system frequently used application failure catastrophic consequence cause significant financial loss simulation testing widely used verification technique show presence error cannot demonstrate correctness lately formal method expensive used industrial problem recent research made possible apply formal technique verification complex real-world system symbolic model checking example technique successful verifying large finite-state system also extended produce timing performance information property extremely important design high-performance system time-critical application detailed analysis model possible using extension simply determining whether property satisfied present algorithm determine exact bound delay two specified event number occurrence another event interval demonstrate method work present two complex example verification futurebus+ cache coherence protocol timing analysis pci local bus  show usefulness symbolic model checking analyzing modern industrial design
1997,improved algorithm evaluation fixpoint expression,many automated finite-state verification procedure viewed fixpoint computation finite lattice  reason fixpoint calculus proposed kozen park proved useful way describe verification algorithm specification formalism right consider problem evaluating expression calculus given model naive algorithm task may require time nq n maximum length chain lattice q depth fixpoint nesting  emerson lei presented method requiring nd step number alternation least greatest fixpoints recent algorithm succeeded reducing exponent one two complexity remained nd paper present new algorithm make extensive use monotonicity consideration solve problem aboutsteps
1997,verifying parameterized network,article describes technique based network grammar abstraction verify family state-transition system family state-transition system represented context-free network grammar using structure network grammar technique construct process invariant simulates state-transition system family novel idea introduced article use regular language express state property implemented technique verified two nontrivial example
1997,verus tool quantitative approach formal verification real-time system,work describes verus new tool used formal verification realtime system verus designer specifies system verified c-like language us temporal logic model checking quantitative timing analysis verify correctness information produced tool help verifying real-time system many way assist determining correctness also provides insight behavior system allows better understanding system case even suggests optimization designwe used tool analyze several real-time system industrial complexity aircraft controller robotics controller distributed heterogeneous system case able determine temporal correctness system several instance  produced suggested modification design resulted efficient system
1997,compositional reasoning model checking,main problem model checking prevents used verification large system state explosion problem problem often arises combining parallel process together many technique proposed overcome difficulty thus increase size system model checker handle describe several compositional model checking technique used practice show example demonstrating performance
1997,model cheking,model checking automatic technique verifying finite-state reactive system sequential circuit design communication protocol specification expressed temporal logic reactive system modeled statetransition graph efficient search procedure used determine whether state-transition graph satisfies specificationswe describe basic model checking algorithm show used binary decision diagram verify property large state-transition graph illustrate power model checking find subtle error verifying part contingency guidance requirement space shuttle
1997,symbolic model checking probabilistic process,introduce symbolic model checking procedure probabilistic computation tree logic pctl labelled markov chain model model checking probabilistic logic typically involves solving linear equation system order ascertain probability given formula holding state algorithm based idea representing matrix used linear equation system multi-terminal binary decision diagram  introduced clarke et al  procedure based algorithm used hansson jonsson  us bdds represent formula mtbdds represent markov chain efficient avoids explicit state space construction pctl model checker implemented verus 
1997,equivalence checking using abstract bdds,introduce new equivalence checking method based abstract bdds  basic idea following given abstraction function abdds reduce size bdds merging node abstract value abdd bounded size constructed without constructing original bdd show method equivalence checking always sound complete important class arithmetic circuit includes integer multiplication also suggest heuristic finding suitable abstraction function based structure circuit efficiency technique illustrated experiment iscas benchmark circuit
1997,temporal logic model checking abstract,n/a
1996,tool partial analysis,n/a
1996,formal method state art future direction,n/a
1996,exploiting symmetry temporal logic model checking,practice finite state concurrent system often exhibit considerable symmetry investigate technique reducing complexity temporal logic model checking presence symmetry particular show symmetry frequently used reduce size state space must explored model checking past symmetry exploited computing set reachable state system transition relation represented explicitly  however research consider arbitrary temporal property complication arise bdds used procedureswe formalized mean finite state system symmetric described technique reducing system transition relation given explicitly term state symbolically bdd moreover identified important class temporal logic formula preserved reduction paper also investigates complexity various critical step like computation orbit relation arise symmetry used type verification finally tested idea simple cache-coherency protocol based ieee futurebus + standard
1996,symbolic model checking,symbolic model checking powerful formal specification verification method applied successfully several industrial design using symbolic model checking technique possible verify industrial-size finite state system state space  state exhaustively searched minute model  state verified using special techniquesseveral extension original technique developed making even powerful timing property verified performing quantitative timing analysis  designer analyze performance system gain insight well system work early design process word-level model checking allows verification datapaths addition control  symmetry  abstraction  compositional reasoning  technique significantly extend power model checking exploiting hierarchical structure complex circuit design protocolsmore information smv well source code model checker found http//wwwcscmuedu/∼modelcheck
1996,word level model checking - avoiding pentium fdiv error,highly-publicized division error pentium emphasized importance formal verification arithmetic circuit symbolic model checking technique based binary decision diagram  successful verifying control logic however lack proper representation function map boolean vector integer prevented technique used verifying arithmetic operation developed new technique verifying arithmetic circuit new technique called word level model checking used successfully verify circuit division square root computation based srt algorithm used pentium technique make possible handle control logic data path circuit total number state variable exceeds  
1996,verification circuit floating-point unit using word-level model checking,paper present formal verification sub-circuits floating-point arithmetic unit  intel microprocessor using word-level model checker work represents first large-scale application word-level model checking technique fpu perform addition subtraction multiplication square root division remainder rounding operation verifying broad range functionality required coupling model checker number technique property decomposition property-specific model extraction latch removal illustrate verification technique using weitek wtl/ sparc floating point coprocessor example principal contribution paper practical verification methodology explaining technique apply  verifying floating-point arithmetic circuit applied method floating-point unit state-of-the-art intel microprocessor capable extended precision  computation success effort demonstrates word-level model checking help verification technique verify arithmetic circuit size complexity found industry
1996,deadlock prevention flexible manufacturing system using symbolic model checking,paper illustrates use symbolic model checking design deadlock-free flexible manufacturing system verification methodology consists following stage first extract state machine model system second write system specification using propositional temporal logic finally use model checker check state machine system requirement deadlock identified counterexample automatically generated scenario lead deadlock counterexample used design proper operational policy prevent corresponding deadlock verification approach allows exhaustive search possible behavior scenario designed flexible manufacturing system capable producing  type part  machine  robot took  second find possible deadlock assuming machine processing capacity one part time  second increased machine processing capacity two part time size state space order /sup / state
1996,word level model checking abstract,n/a
1996,model checking,model checking automatic technique verifying finite-state reactive system sequential circuit design communication protocol specification expressed temporal logic reactive system modeled state-transition graph efficient search procedure used determine whether state-transition graph satisfies specification describe basic model checking algorithm show used binary decision diagram verify property large state-transition graph illustrate power model checking find subtle error verifying part contingency guidance requirement space shuttle
1995,verification futurebus+ cache coherence protocol,used hardware description language construct formal model cache coherence protocol described ieee futurebus+standard applying temporal logic model checking technique found error standard result project concise comprehensible unambiguous model protocol useful futurebus+working group member responsible protocol actual designer futurebus+boards
1995,temporal verification real-time system,paper present general method computing quantitative information finite-state real-time system developed algorithm compute exact bound delay two specified event number occurrence event given interval technique allows u determine performance measure schedulability response time system load algorithm produce detailed information traditional method information lead better understanding system behavior addition determining correctness algorithm presented paper efficiently implemented using binary decision diagram incorporated smv symbolic model checker using method verified model aircraft control system  state  obtained demonstrate method successfully applied verification real-time system design
1995,veryfying parameterized network using abstraction regular language,paper describes technique based network grammar abstraction verify family state-transition system family state-transition system represented context-free network grammar using structure network grammar technique construct invariant simulates state-transition system family novel idea used paper use regular language express state property implemented technique verified two non-trivial example
1995,efficient generation counterexample witness symbolic model checking,model checking automatic technique verifying sequential circuit design protocol efficient search procedure used determine whethe specification satisfied satisfied technique produce counter-example execution trace show cause problem describe efficient algorithm produce counter-examples witness symbolic model checking algorithm algorithm used smv model checker work quite well practice also discus extend technique complicated specification 
1995,hybrid decision diagram,function map boolean vector integer important design verification arithmetic circuit mtbdds bmds proposed representing class function discus relationship method describe generalization called hybrid decision diagram often much concise show implement arithmetic operation efficiently hybrid decision diagram practice one main limitation bmds since performing arithmetic operation function expressed notation expensive order extend symbolic model checking algorithm handle arithmetic property essential able compute bdd set variable assignment satisfy arithmetic relation paper give efficient algorithm purpose moreover prove class linear expression time complexity algorithm linear number variable
1995,verifying performance pci local bus using symbolic technique,symbolic model checking successful technique checking property large finite-state system method used verify number real-world hardware design however able determine timing performance property directly since property extremely important design high-performance system time-critical application extended model checking technique produce timing information  allow detailed analysis model possible tool simply determine whether property satisfied present algorithm determine exact bound time interval two specified event number occurrence another event interval demonstrate method work modelled pci local bus analyzed temporal behavior  demonstrate usefulness technique analyzing complex modem design
1995,verus tool quantitative analysis finite-state real-time system,symbolic model checking technique verifying finite-state concurrent system model  state often verified minute paper present new tool analyze real-time system based technique designed language called verus description real-time system description compiled state-transition graph represented symbolically using binary decision diagram developed new algorithm exploring state space computing quantitative information system addition determining exact bound length time interval two specified event compute number occurrence event interval technique allows u determine performance measure schedulability response time system load algorithm produce detailed information traditional method information lead better understanding behavior system addition verifying timing requirement satisfied integrate idea verus tool currently development demonstrate technique work verified robotics control system  obtained demonstrate method successfully applied analysis real-time system design
1995,automatic verification industrial design,study present new risk analysis tool demonstrates feasibility applicability tool design verification railway interlocking control system deadlock prevention automated manufacturing system verification methodology consists following stage first analyze rule executed controller extract state machine model controller second compose safety reliability operability system specification using propositional temporal logic finally use model checker check state machine model system requirement verification approach allows exhaustive search possible behavior scenario verified two real railway interlocking control application   constraint respectively checking two opposing signal protection specification involving  signal ranged   second depending size complexity interlocking traditional verification method typically require several person week
1995,timing analysis industrial real-time system,describe formal method modelling real-time system procedure compute model timing characteristic automatically present algorithm compute exact bound delay two specified event also describe algorithm count minimum maximum number time event occurs given starting condition ending condition algorithm based symbolic model checking technique successfully used find bug several industrial design technique used search exhaustively state space /sup / state illustrate usefulness method describe timing analysis patient monitoring system /sup / state also present timing analysis verification aircraft controller size example verify demonstrate tool applied realistic industrial design
1994,symbolic model checking sequential circuit verification,temporal logic model checking algorithm clarke emerson sistla  modified represent state graph using binary decision diagram  partitioned transition relation representation capture regularity state space circuit data path logic able verify circuit extremely large number state demonstrate new technique synchronous pipelined design approximately /spl times//sup / state model checking algorithm handle full ctl fairness constraint consequently able express number important liveness fairness property would otherwise expressible ctl give empirical  performance algorithm applied synchronous asynchronous circuit data path logic< >
1994,model checking abstraction,describe method using abstraction reduce complexity temporal-logic model checking using technique similar involved abstract interpretation construct abstract model program without ever examining corresponding unabstracted model show abstract model used verify property original program implemented system based technique demonstrate practicality using number example including program representing pipelined alu circuit  state
1994,automatic verification finite-state concurrent system,logical error finite-state concurrent system sequential circuit design communication protocol important problem computer scientist delay getting new product market cause failure critical device already use research group developed verification method called temporal logic model checking class system approach specification expressed propositional temporal logic circuit protocol modeled state-transition system efficient search procedure used determine automatically specification satisfied transition system technique used past find subtle error number non-trivial examplesduring last year size state-transition system verified model checking technique increased dramatically representing transition relation implicitly using binary decision diagram  able check example would required  state original algorithm various refinement bdd-based technique pushed state count  combining model checking various abstraction technique able handle even larger system one example able verify pipelined alu  state recently used model checking technique verify cache coherence protocol ieee futurebus+ standard found several error previously undetected apparently first time formal method used find nontrivial error ieee standard result project concise comprehensible unambiguous model cache coherence protocol useful futurebus+ working group member responsible protocol actual designer futurebus+ board believe experience demonstrates model checking technique already sufficiently powerful useful verifying real industrial design
1994,combining symbolic computation theorem proving problem ramanujan,one way building powerful theorem provers use technique symbolic computation challenge problem paper taken chapter  ramanujans notebook selected non-trivial require use symbolic computation technique developed theorem prover based symbolic computation system mathematica prove challenge problem completely automatically axiom inference rule constructing proof also briefly discussed
1994,fast spectrum computation logic function using binary decision diagram,show efficient method compute walsh spectrum logic function large number input  using binary decision diagram bud structure extended integer value leaf  node result efficient representation integer vector integer matrix proposed procedure work directly extended bdd logic function computes full walsh spectrum form extended bdd algorithm presented efficient version matrix-multiplication method method embeds walsh transform matrix implicitly program code recursive call  significant speed improvement algorithm complexity fastest known walsh algorithm utilizes much efficient data structure traditional truth table furthermore case complete set spectrum coefficient either infeasible impractical also present method compute subset walsh coefficient present experimental  showing logic function  input cannot processed published method computed within  second sparc < >
1994,computing quantitative characteristic finite-state real-time system,present general method computing quantitative information finite-state real-time system developed algorithm compute exact bound delay two specified event number occurrence event given interval technique allows u determine performance measure schedulability response time system load algorithm produce detailed information traditional method information lead better understanding system behavior addition determining correctness algorithm presented paper efficiently implemented using binary decision diagram incorporated smv symbolic model verifier using method verified model aircraft control system /sup / state  obtained demonstrate method successfully applied verification real-time system designs< >
1993,new used temporal model issue time,special issue application temporal model raise many issue time important property time time best represented one reason time-dependent property important direction temporal research introductory piece briefly survey current wide variety temporal model temporal reasoning method application time-varying phenomenon promising area investigation verification concurrent system knowledge-base representation method dealing theframe problem pas fleeting review brief introduction work volume close section
1993,unified approch showing language inclusion equivalence various type omega-automata,consider language inclusion equivalence problem six different type ω-automata büchi muller rabin streett l-automata kurshan ∀-automata manna pnueli give six six matrix row column associated one type automaton entry ith row jth column complexity showing inclusion ith type automaton jth thus example give complexity showing language inclusion equivalence büchi automaton muller streett automaton  obtained uniform method associate formula computation tree logic ctl∗ type automaton algorithm use model checking procedure logic formula obtained automaton  paper important verification finite state concurrent system fairness constraint natural way reasoning system model finite state program one ω-automaton specification another
1993,efficient verification parallel real-time system,paper present efficient model checking algorithm one-safe time petri net timed temporal logic approach based idea  using difference timing variable able construct finite representation set reachable state  reducing size representation exploiting concurrency net ie one several equivalent interleavings generated evaluation given formula reduction state space possible considered linear-time temporal logic stuttering invariant paper concrete model checking algorithm developed experimental  demonstrate efficiency method given
1993,automatic verification sequential circuit design,temporal logic model checking method automatically deciding sequential circuit satisfies specification approach circuit modelled state transition system specification given temporal logic formula efficient search algorithm used determine specification satisfied procedure used successfully past find subtle error number non trivial circuit design recently size circuit handled technique increased dramatically possible verify transition system many order magnitude larger previously case paper describe technique made increase possible technique based use binary decision diagram represent transition system set state
1993,verification tool finite-state concurrent system,temporal logic model checking automatic technique verifying finite-state concurrent system specification expressed propositional temporal logic concurrent system modeled state-transition graph efficient search procedure used determine whether state-transition graph satisfies specification technique first developed ten year ago possible handle concurrent system thousand state last year however size concurrent system handled increased dramatically representing transition relation set state implicitly using binary decision diagram possible check concurrent system  state paper describe detail new implementation work give realistic example illustrate power also discus number direction future research necessary  information binary decision diagram temporal logic model checking included order make exposition self-contained possible
1992,symbolic model checking 10^20 state beyond,many different method devised automatically verifying finite state system examining state-graph model system behavior method depend decision procedure explicitly represent state space using list table grows proportion number state describe general method represents state space symbolically instead explicitly generality method come using dialect mu-calculus primary specification language describe model checking algorithm mu-calculus formula us bryants binary decision diagrans  represent relation formula show new mu-calculus model checking algorithm used derive efficient decision procedure ctl model checking satisfiability linear-time temporal logic formula strong weak observational equivalence finite transition system language containment finite ω-automata fixed point computation decision procedure sometimes complex concisely expressed mu-calculus illustrate practicality approach symbolic model checking discussing used verify simple synchronous pipeline circuit
1992,parthenon parallel theorem prover non-horn clause,describe parallel resolution theorem prover called parthenon handle full first order logic although much work parallel implementation logic programming language parthenon first general purpose theorem prover developed multiprocessor system based modification warren sri model or-parallelism implement variant lovelands model elimination procedure evaluated various shared memory multiprocessor including -processor encore multimax ibms -processor rp found many theorem proving problem exhibit great deal potential parallelism parthenon able exploit much parallelism producing good absolute run time near-linear speedup curve many case
1992,synthesis two approach verifying finite state concurrent system,paper provides synthesis two main approach automatic verification finite-state system temporal logic model checking language containment automaton infinite tape new branching-time temporal logic suggested automaton infinite tape used define new temporal operator operator defines set acceptable computation path path quantifier used specify whether path path state acceptable set logic powerful includes linear-time branching-time temporal logic give efficient model checking procedure check whether finite-state system satisfies specification given formula new logic procedure linear size system low level polynomial size specification
1992,analytica - theorem prover mathematica,analytica automatic theorem prover theorem elementary analysis prover written mathematica language run mathematica environment goal project use powerful symbolic computation system prove theorem beyond scope previous automatic theorem provers theorem prover also able guarantee correctness certain step made symbolic computation system therefore prevent common error like division symbolic expression could zero paper describe structure analytica explain main technique us construct proof tried make paper self-contained possible accessible wide audience potential user illustrate power theorem prover several non-trivial example including basic property stereographic projection series three lemma lead proof weierstrasss example continuous nowhere differentiable function lemma latter example proved completely automatically
1991,representing circuit efficiently symbolic model checking,significantly reduce complexity bdd-based symbolic verification using partitioned transition relation represent state transition graph example pipeline circuit technique reduced verification time order magnitude storage requirement transition relation two order magnitude also able handle example pipeline l l z reachable state 
1991,symbolic model checking partitioned transistion relation,n/a
1990,unified approach showing language containment equivalence various type omega-automata,consider language containment equivalence problem six different type ω-automata büchi muller rabin streett l-automata kurshan ∀-automata manna pnueli give six six matrix row column associated one type automaton entry th row j th column complexity showing containment th type automaton j th  thus example give complexity showing language containment equivalence büchi automaton muller streett automaton  obtained uniform method associate formula logic ctl* type automaton algorithm use model checking procedure logic formula obtained automaton  paper important verification finite state concurrent system fairness constraint natural way reasoning system model finite state program one ω-automaton specification another
1990,temporal logic model checking two technique avoiding state explosion problem,finite state model concurrent system grow exponentially number component system increase known widely state explosion problem automatic verification limited finite state verification method small system avoid problem method called symbolic model checking proposed studied method avoids building state graph using boolean formula represent set relation variety property characterized least greatest fixed point verified purely manipulation formula using ordered binary decision diagramstheoretically structural class sequential circuit demonstrated whose transition relation represented polynomial space obdds though number state exponential result born experimental  example circuit system complex cache consistency protocol commercial distributed multiprocessor symbolic model checking technique revealed subtle error protocol resulting complex execution sequence would occur low probability random simulation runsin order model cache protocol language developed describing sequential circuit protocol various level abstraction language synchronous dataflow semantics allows nondeterminism support interleaving process shared variable system called smv automatically verify program language respect temporal logic formula using symbolic model checking techniquea technique proving property inductively generated class finite state system also developed proof checked automatically requires user supplied process called process invariant act inductive hypothesis invariant developed distributed cache protocol allowing property system arbitrary number processor provedfinally alternative method developed avoiding state explosion case asynchronous control circuit technique based unfolding petri net used check hazard distributed mutual exclusion circuit 
1990,sequential circuit verification using symbolic model checking,temporal logic model checking algorithm developed clarke emerson sistla  modified represent state graph using binary decision diagram   representation capture regularity state space sequential circuit data path logic able verify circuit extremely large number state demonstrate new technique synchronous pipelined design approximately  x  state model checking algorithm handle full ctl fairness constraint consequently able handle number important liveness fairness property would otherwise expressible ctl give empirical  performance algorithm applied synchronous asynchronous circuit data path logic
1990,preface,n/a
1990,parallel algorithm constructing binary decision diagram,parallel algorithm constructing binary decision diagram described algorithm treat binary decision graph minimal finite automaton automation boolean function main operation  obtained forming intersection  regular set associated operand union intersection operation implemented product construction minimal automaton regular set product construction step automaton must reminimized parallel algorithm designed possible find minimal representation several boolean operation parallel level operation determined operation level performed parallel without communication processor relatively operation one level product generation step divided several suboperations  merged< >
1989,reasoning network many identical finite state process,n/a
1989,reasoning procedure parameter language l4,provide sound relatively complete axiom system partial correctness assertion algol-like language procedure passed parameter global variable  axiom system allows u reason syntactically program construct proof assertion complicated program proof assertion component axiom system language feature sought number researcher previously published solution entirely satisfactory axiom system extends natural style reasoning used previous hoare axiom system program procedure higher type detail proof axiom system relatively complete sense cook may independent interest introduce  expressiveness program higher type useful beyond immediate problem language l also prove new incompleteness result applies logic similar hoare logic
1989,compositional model checking,method described reducing complexity temporal logic model checking system composed many parallel process goal check property component system deduce global property local property main difficulty type approach local property often preserved global level author present general framework using additional interface process model environment component interface process typically much simpler full environment component composing component interface process checking property composition author guarantee property preserved global level give two example compositional system based logic ctl< >
1988,escher-a geometrical layout system recursively defined circuit,escher circuit description hierarchical structure composed cell wire connector wire pin connect wire cell cell may correspond primitive circuit element may defined term lower level subcells unlike geometrical layout system subcell may instance cell defined recursive cell definition initiated recursion unwound manner reminiscent procedure call copy rule algol-like programming language cell specification may parameter used control unwinding recursive cell provide cell family varying number pin internal component shown escher layout system might used several nontrivial example including parallel sorting network fft  implementation unwinding algorithm also briefly described< >
1988,characterizing finite kripke structure propositional temporal logic,show two finite kripke structure distinguished ctl∗ formula contains branching-time linear-time operator structure distinguished ctl formula contains branching-time operator proof involves showing finite kripke structure possible construct ctl formula fm uniquely characterizes since one kripke structure may trivial unrolling another use notion equivalence kripke structure similar notion bisimulation studied milner first construction fm requires use nexttime operator also consider case nexttime operator disallowed ctl formula proof case requires another notion equivalence—equivalence respect stuttering much difficult since possible two inequivalent state exactly finite behavior  different infinite behavior also give polynomial algorithm determining two structure stuttering equivalent discus relevance  temporal logic model checking synthesis procedure
1988,expressibility result linear-time branching-time logic,investigate expressive power linear-time branching-time temporal logic fragment logic ctl* give simple characterization ctl* formula expressed linear-time logic also give simple method showing certain ctl* formula cannot expressed branching-time logic ctl  illustrated example
1987,avoiding state explosion problem temporal logic model checking,n/a
1987,characterizing kripke structure temporal logic,question whether branching-time temporal logic linear-time temporal logic best reasoning concurrent program one controversial issue logic program concurrent program usually modelled labelled state-transition graph state designated initial state historical reason graph called kripke structure linear temporal logic operator provided describing event along single time path  branching-time logic temporal operator quantify future possible given state  well known two type temporal logic different expressive power linear temporal logic example express certain fairness property cannot expressed branching-time temporal logic hand certain practical decision problem like model checking easier branching-time temporal logic linear temporal logic paper provides insight type logic best shown two finite kripke structure distinguished formula contains branching-time linear-time operator structure distinguished formula contains branching time operator specifically show two finite kripke structure distinguished formula logic ctl  distinguished formula logic ctl 
1987,model checking problem concurrent system many similar process,n/a
1986,compiling path expression vlsi circuit,path expression originally proposed campbell habermann  mechanism process synchronization monitor level software surprisingly also provide useful notation specifying behavior asynchronous circuit motivated potential application investigate directly translate path expression hardware implementation complicated case multiple path expression need synchronization event name common one path moreover since event inherently asynchronous model circuit must self-timed nevertheless circuit produced construction proportional n  log n total length multiple path expression consideration bound hold regardless number individual path degree synchronization path furthermore structure path expression allows partitioning circuit laid distributed fashion without additional area overhead
1986,distributed computing issue hardware design,n/a
1986,automatic verification sequential circuit using temporal logic,verifying correctness sequential circuit important problem long time lack formal efficient method verification prevented creation practical design aid purpose since known technique simulation prototype testing time consuming reliable acute need tool paper describe automatic verification system sequential circuit specification expressed propositional temporal logic contrast mechanical verification system system require user assistance quite fast—experimental  show state machine several hundred state checked correctness matter seconds!
1986,automatic verification finite-state concurrent system using temporal logic specification,give efficient procedure verifying finite-state concurrent system meet specification expressed  temporal logic algorithm complexity linear size specification size global state graph concurrent system also show approach adapted handle fairness argue technique provide practical alternative manual proof construction use mechanical theorem prover verifying many finite-state concurrent system experimental  show state machine several hundred state checked matter second
1986,true relative completeness axiom system language l4 abridged,n/a
1986,reasoning network many identical finite-state process,consider distributed mutual exclusion algorithm process arranged ring network mutual exclusion guaranteed mean token passed around ring first attempt might consider reduced system one two process reduced system shown correct individual process really identical tempted conclude entire system correct type informal argument used quite frequently designer constructing system contain large number identical processing element easy contrive example pathological behavior occurs say  process connected together examining system one two process might quite difficult determine behavior possible one feeling many case kind intuitive reasoning lead correct  question addressed whether possible provide solid theoretical basis prevent fallacious argument type besides providing firm basis common type informal reasoning  crucial success automatic verification method involve temporal logic model checking technique check finite-state concurrent system satisfies temporal logic formula searching possible path global state graph determined concurrent system used successfully find subtle error tricky self-timed circuits--errors apparently unknown circuit designer using  model checking may become feasible network large number identical process
1985,complexity propositional linear temporal logic,complexity satisfiability determination truth particular finite structure considered different propositional linear temporal logic shown problem np-complete logic f pspace-complete logic f x u u x operator extended logic regular operator given wolper
1985,hierarchical verification asynchronous circuit using temporal logic,establishing correctness complicated asynchronous circuit general quite difficult high degree nondeterminism inherent device nevertheless also important view cost involved design testing circuit show give specification circuit branching time temporal logic mechanically verify using simple efficient model checker also show tackle large complex circuit verifying hierarchically
1984,message buffer axiomatized linear temporal logic,message passing one primary mode interprocess communication distributed system paper investigate possibility characterizing axiomatizing different message passing system temporal logic specifically consider fifo buffer  lifo buffer  unordered buffer  show bounded buffer characterizable propositional temporal logic  axiomatizable prove theory unbounded fifo buffer π-complete axiomatizable also prove theory unbounded lifo unordered buffer decidable hence axiomatizable
1983,effective axiomatizations hoare logic,wide class programming language p expressive interpretation show exist sound relatively complete hoare-like logic partial correctness termination assertion fact mild assumption p show assertion true p uniformly decidable theory  iff halting problem p decidable finite interpretation moreover termination assertion uniformly th even halting problem p decidable finite interpretation since total correctness assertion coincide termination assertion deterministic programming language last result unexpectedly suggests class language good axiom system total correctness may wider partial correctness
1983,automatic verification asynchronous circuit,establishing correctness complicated asynchronous circuit general quite difficult high degree nondeterminism inherent device nevertheless also important view cost involved design testing circuit show give specification circuit branching time temporal logic mechanically verify using simple efficient model checker also show tackle large complex circuit verifying hierarchically
1983,reasoning procedure parameter,n/a
1983,automatic verification finite state concurrent system using temporal logic specification practical approach,give efficient procedure verifying finite state concurrent system meet specification expressed  branching-time temporal logic algorithm complexity linear size specification size global transition graph concurrent system also show logic algorithm modified handle fairness argue technique provide practical alternative manual proof construction use mechanical theorem prover verifying many finite state concurrent system
1982,using branching time temporal logic synthesize synchronization skeleton,present method constructing concurrent program synchronization skeleton program automatically synthesized  temporal logic specification synthesis method us decision procedure based finite model property logic determine satisfiability specification formula f f satisfiable model f finite number state constructed synchronization skeleton program meeting specification read model f unsatisfiable specification inconsistent
1982,distributed reconfiguration strategy fault-tolerant multiprocessor system,paper investigate strategy dynamically reconfiguring shared memory multiprocessor system subject common memory fault unpredictable processor death strategy aim determining communication page ie page common memory used group processor storing crucial common resource global lock synchronization global data structure voting algorithm ensure system reliability reconfiguration strategy must distributed processor independently arrives exactly choice type reconfiguration strategy currently used stage operating system pluribus multiprocessor  analyze weak point pluribus algorithm examine alternative strategy satisfying optimization criterion maximization number processor number common memory page reconfigured system also present general distributed algorithm enables processor system exchange local information needed reach consensus system reconfiguration
1982,message buffer characterized linear temporal logic,exchange information executing process one primary reason process interaction many distributed system implement explicit message passing primitive facilitate intercommunication typically process executes write command pas message another process target process accepts message executing read command semantics write read may differ considerably depending method used storing buffering message sent yet accepted receiving process
1982,effective axiomatizations hoare logic,wide class programming language p expressive interpretation show exist sound relatively complete hoare-like logic partial correctness termination assertion fact mild assumption p show assertion true p uniformly decidable theory  iff halting problem p decidable finite interpretation moreover termination assertion uniformly th even halting problem p decidable finite interpretation since total correctness assertion coincide termination assertion deterministic programming language last result unexpectedly suggests class language good axiom system total correctness may wider partial correctness
1981,task management ada-a critical evaluation real-time multiprocessor,cost processor hardware decline multiprocessor architecture become increasingly costeffective represent important area future research order exploit full potential multiprocessor however necessary understand design software make effective use available parallelism paper considers impact multiprocessor architecture design highlevel programming language particular evaluates language ada light special requirement realtime multiprocessor system conclude ada currently designed meet need realtime embedded system
1981,design synthesis synchronization skeleton using branching-time temporal logic,shown possible automatically synthesize synchronization skeleton concurrent program temporal logic specification believe approach may long run turn quite practical since synchronization skeleton general quite small potentially exponential behavior algorithm need insurmountable obstacle much additional research needed however make approach feasible practicewe also described model checking algorithm applied mechanically verify finite state concurrent program meet particular temporal logic specification believe practical software tool based technique could developed near future indeed already programmed experimental implementation model checker dec / harvard* certain application seem particularly suited model checker approach verification one example problem verifying correctness existing network protocol many coded finite state machine encourage additional work area
1980,proving correctness coroutines without history variable,examine question whether history variable necessary formal proof correctness coroutines history variable special variable added program facilitate proof recording sequence state reached program computation proof completed history variable may deleted use variable correctness proof first suggested clint  paper entitled program proving coroutines subsequently history variable used owicki  howard  verifying concurrent program apt  verifying sequential program argue recording entire history computation single set variable actually complicate correctness proof avoided possible propose modification clints axiom system strategy constructing proof eliminates need history variable verifying simple coroutines example  given illustrate technique verifying coroutines axiom system shown sound relatively complete respect operational semantics coroutines finally discus extension coroutine concept history variable appear needed also discus question whether variable necessary verifying concurrent program
1980,synthesis resource invariant concurrent program,owicki gries developed proof system conditional critical region system logically related variable accessed one process grouped together resource process allowed access resource critical region resource proof synchronization property constructed devising predicate called resource invariant describe relationship among variable resource process critical region resource constructing proof using system owicki gries programmer required supply resource invariant method developed paper automatically synthesizing resource invariant specifically resource invariant concurrent program characterized least fixpoints functional obtained text program use fixpoint characterization widening operator based convex closure good approximation may obtained resource invariant many concurrent program
1980,characterizing correctness property parallel program using fixpoints,shown correctness property parallel program described using computation tree description fixpoint characterization generated also given condition form computation tree description ensure correctness property characterized using continuous fixpoints consequence correctness property inevitability fair scheduling characterized least fixpoint monotonic noncontinuous transformer cannot characterized using fixpoints continuous transformer  hence currently known proof rule applicable  investigating whether useful proof rule exist correctness property monotonic noncontinuous least fixpoint characterization addition examining alternate notion fairness continuous fixpoint characterization
1980,fast maintenance semantic integrity assertion using redundant aggregate data,semantic integrity assertion predicate define consistent database state enforce assertion database system must prevent update mapping consistent state inconsistent one paper describe enforcement method efficient large class relational calculus assertion method automatically selects minimum maximum certain set maintain redundant data database redundant data sufficient enforcing assertion class yet easily maintained correctness proof expressed hoares program logic
1979,program invariant fixedpoints,argue soundness relative completeness theorem floyd-hoare axiom system    really fixedpoint theorem give characterization program invariant fixedpoints functionals may obtained natural manner text program show within framework fixedpoint theory soundness relative completeness  particularly simple interpretation completeness floyd-hoare axiom system equivalent existence fixedpoint appropriate functional soundness follows maximality fixedpoint functionals associated regular procedure declaration similar thepredicate transformer dijkstra nonregular recursion necessary use generalization predicate transformer concept call arelational transformer
1979,programming language construct impossible obtain good hoare axiom system,hoare axiom system establishing partial correctness program may fail complete  incompleteness assertion language relative underlying interpretation  inability assertion language express mvanants loop cook shown complete proof system assertion language  assertion language satisfies natural expresstbthty condition sound complete axiom system large subset algol may devised exhibit programming language construct m impossible obtain sound complete set hoare axiom even special sense cook construct include  coroutmes language allows parameterless recurslve procedure modification construct sound complete system axiom may obtained also discussed
1979,approximate algorithm optimization busy waiting parallel program preliminary report,traditional implementation conditional critical region monitor lead unproductive busy waiting process allowed wait arbitrary boolean expression technique global flow analysis may employed compile time obtain information critical region  enabled execution given critical region  investigate complexity computing information show used obtain efficient scheduling algorithm le busy waiting
1977,program invariant fixed point preliminary report,argue relative soundness completeness theorem floyd-hoare axiom system    really fixed point theorem give characterization program invariant fixed point functionals may obtained natural manner text program show within framework fixed point theory relative soundness completeness  particularly simple interpretation completeness floyd-hoare axiom system equivalent existence fixed point appropriate functional soundness follows maximality fixed point functionals associated regular procedure declaration similar predicate transformer dijkstra non-regular recursion necessary use generalization predicate transformer concept call relational transformer
1977,programming language construct impossible obtain good hoare-like axiom system,hoare-like deduction system establishing partial correctness program may fail complete  incompleteness assertion language relative underlying interpretation  inability assertion language express invariant loop cook shown complete proof system assertion language  assertion language satisfies certain natural expressibility condition sound complete axiom system fairly large subset algol may devised exhibit programming language construct impossible obtain sound complete set hoare-like axiom even special sense cook construct include  recursive procedure procedure parameter programming language us static scope identifier  coroutines language allows parameterless recursive procedure modification construct possible obtain sound complete system axiom also discussed
