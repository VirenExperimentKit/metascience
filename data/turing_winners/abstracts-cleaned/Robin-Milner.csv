2013,inductive characterization matching binding bigraphs,analyze matching problem bigraphs particular present sound complete inductive characterization matching bigraphs binding  yield specification provably correct matching algorithm needed prototype tool implementing bigraphical reactive system
2009,bigraphical category,bigraphs candidate model aim provide theoretical platform ubiquitous computing system short paper summarises category functors represent structure theory
2008,bigraphs algebra,bigraphs framework existing process calculus new model behaviour formulated yielding theory shared among model short survey main feature bigraphs presented showing developed standard graph theory using elementary category theory algebraic manipulation bigraphs outlined help illustration treatment dynamic summarised finally origin related work discussed paper provides motivating introduction bigraphs
2008,stochastic bigraphs,paper present stochastic semantics bigraphical reactive system reduction labelled stochastic semantics bigraphs defined sanity check prove two semantics consistent illustrate expressiveness framework example membrane budding biological system
2008,category software meaning,delighted able share celebrating ugo’s birthday formal paper least loosely-knit philosophical ideasi worked idea similar ugo’s career ugo much stream expert italian many well-known travelled warmth pisa romantic cooler climate edinburgh often launch career phd going back remember excitement meeting parallel process pisa  organised believe ugo first concurrency conference ever attended
2007,local bigraphs confluence two conjecture extended abstract,notion confluence studied context bigraphs confluence important modelling real-world system natural  artificial  paper us bigraphs name multiple locality enables formulation lambda calculus explicit substitution paper report work progress seeking condition bigraphical reactive system sufficient ensure confluence condition must deal way bigraphical redexes intricately intertwined condition also satisfied lambda calculus discussion issue two conjecture put forward
2007,matching bigraphs,analyze matching problem bigraphs particular present sound complete inductive characterization matching binding bigraphs  pave way provably correct matching algorithm needed implementation bigraphical reactive system
2006,ubiquitous computing shall understand,n/a
2006,pervasive process calculus,process calculus various signature reaction rule may provide theoretical basis pervasive computing
2006,pure bigraphs structure dynamic,bigraphs graph whose node may nested representing locality independently edge connecting may equipped reaction rule forming bigraphical reactive system  bigraphs reconfigure following earlier paper describing link graph constituent bigraphs paper devoted pure bigraphs turn underlie various refined form elsewhere shown behavioural analysis petri net π-calculus mobile ambients recovered uniform framework bigraphs paper first develops dynamic theory abstract structure wide reactive system  br instance context labelled transition defined way induced bisimilarity congruence work specialised br whose graphical structure allows many refinement theory latter part paper emphasizes bigraphical theory relevant treatment dynamic via labelled transition running example theory applied finite pure cc whose resulting transition system bisimilarity analysed detail paper also mention briefly use bigraphs model pervasive computing biological system
2006,transition system link graph petri net,framework defined within reactive system studied formally framework based s-categories new variety category within reactive system set way labelled transition system uniformly extracted lead turn behavioural preorders equivalence failure preorder  bisimilarity guaranteed congruential theory rest notion relative pushout previously introduced authorsthe framework applied particular graphical model known link graph encompasses variety calculus mobile distributed process specific theory link graph developed applied established calculus namely condition-event petri netsin particular labelled transition system derived condition-event net corresponding natural notion observable action petri-net theory transition system yield congruential bisimilarity coinciding one derived directly observable action yield calibration general theory reactive system link graph known specific theory
2006,journey non-classical computation ii initial journey waypoints,n/a
2006,scientific foundation global computing,big honour able speak one exciting conference  yearsi feel way daunted although development connection biology computer science may seem wonderful outside know depend crucially detail believe confidence already done justifies bringing subject together way think that’s going see later talk want try anticipate little bit first want talk global computing may describe fancifully perhaps arrival single global computer increasingly pervading life
2005,grand challenge computing research,major research challenge face world computing today match grandeur well-known challenge branch science article report exercise computing research community uk answer question includes summary outcome bcs-sponsored conference held newcastle-upon-tyne   march year
2005,axiom bigraphical structure,paper axiomatises structure bigraphs prof resulting theory complete bigraphs graph double structure representing locality connectivity shown represent dynamic theory $$-calculus mobile ambients petri net way faithful model discrete behaviour main purpose bigraphs understand mobile system prerequisite understanding well-behaved theory structure state system algebra bigraph structure surprisingly simple paper demonstrates bigraphs treat locality connectivity orthogonally
2005,journey non-classical computation grand challenge computing research,n/a
2005,spectrum word,k-spectrum word multiset non-contiguous subwords length k given k small n pair different word length n exist equal k- spectrum thue-morse word find n  k  construction paper decrease upper bound θ k  where≏is golden ratio construction found though published thirty year ago recently bound reduced remains considerably greater greatest known lower bound
2005,embeddings context link graph,graph-rewriting growing discipline three decade grew study graph grammar – analogously string tree grammar – principal interest describe family graph could generated given set production fundamental contribution course double-pushout construction ehrig colleague  made precise left-hand side production rewriting rule could found occur host graph replaced right-hand side break-through led many theoretical development many application relies firmly upon treatment graph object category whose arrow embedding map
2004,theory global ubiquitous computer,paper describes initiative provide theory underlie development global ubiquitous computer network ubiquitous computing device pervade civilised world course next decade define goal initiative criterion judging whether achieved propose strategy exercise must combine bottom-up development theory direction currently pursued success together top-down approach form collaborative project relating theory engineered system exist imminent
2004,towards broader theory mobile process,bigraphs topographical model reactive system aim unify existing theoretical approach mobile communicating agent combine two structure orthogonally connectivity locality thus example represent ambients pi-calculus topography deal  locality also abstract notion scope name talk shall explain recent joint work jamey leifer relative pushouts enables transition system derived pi-calculus ambients  shall present condition-event petri net example
2003,bigraphs petri net,simple example given use bigraphical reactive system  provides behavioural semantics condition-event petri net whose interface named condition node using simple form br equipped labelled transition system associated bisimilarity equivalence latter derived standard net firing rule uniform technique bigraphs also ensures bisimilarity congruence furthermore bisimilarity shown coincide one induced natural notion experiment condition-event net defined independently bigraphsthe paper intended bridge petri net theory bigraphs well pedagogical exercise latter
2003,bigraphs transition,bigraphical reactive system  involves bigraphs nesting node represents locality independently edge connecting br represent wide variety calculus mobility including λ-calculus ambient calculus labelled transition system  br derived uniformly adapting previous work leifer milner certain condition resulting bisimilarity automatically congruence asynchronous λ-calculus lts bisimilarity agree closely standard
2002,shallow linear action graph embeddings,action calculus generalise process calculus petri net π-calculusand ambient calculus presented term action graph offer linear action graph primitive basis action calculus paper present category embeddings undirected linear action graph without nesting using novel form graphical reasoning simplifies otherwise complex manipulation regular algebra  adapted line directed graph work part long-term search uniform behavioural theory process calculus
2002,bigraphs model mobile interaction,bigraphical reactive system  involves bigraphs nesting node represents locality independently edge connecting br represent wide variety calculus mobility including π-calculus short essay explains bigraphs compose us π-calculus illustrate already provide element unifying theory calculus mobile interactive process
2001,flux interaction,graphical model interactive system called bigraphs introduced resting orthogonal treatment connectivity locality model shown underlie several calculus mobile system particular π-calculus ambient calculus core behavioural theory outlined
2001,bigraphical reactive system,notion bigraph introduced model mobile interaction bigraph consists two independent structure topograph representing locality edge net representing connectivity bigraphs arc equipped reaction rule form bigraphical reactive system  include version π-calculus ambient calculus behavioural theory established using categorical notion relative pushout allows labelled transition system derived uniformly wide variety br way familiar behavioural prcordcrs equivalence particular bisimilarity congruential example derivation discussed
2000,deriving bisimulation congruence reactive system,dynamic reactive system eg cc often defined using labelled transition system  recently become natural defining dynamic use reaction rule - ie unlabelled transition rule - together structural congruence ltss lead naturally behavioural equivalence one would like derive reaction rule suitable ltsthis paper show derive lts wide range reactive system label agent defined context f intuitively large enough agent fa  able perform reaction key contribution paper precise definition “just large enough” term categorical notion relative pushout  ensures bisimilarity congruence sufficient rpos exist two example - simplified form action calculus term-rewriting - given shown sufficient rpos indeed exist thrust paper therefore towards general method achieving useful behavioural congruence relation
2000,graphical theory interactive system proof assistant help,computer scientist privileged doomed deal rigorously large structure happens course hardware design verification program specification considerable progress made mechanised proof assistance going back room programming language also big structure it’s uncommon help proof assistant actually designing language probably formalism writing language mean changing foot it’s asking much build proof assistant keep development enough help designer real time encouraging see plenty post hoc verification property standard ml using semantic formalism perhaps future language design using “big step structure operational semantics” could done using proof assistance check sanity large set inference rule frozen design
1997,graphical calculus interaction abstract,n/a
1997,strong normalisation higher-order action calculus,framework action calculus accommodates variety discipline interaction computation general theory action calculus development particular action calculus — π-calculus — posse also specific theory previously shown action calculus extended conservative manner higher-order thus allowing action encapsulated treated data dynamic higher-order calculus includes β-reduction analogous λ-calculus paper demonstrates assumption arity higher-order calculus  β-reduction higher-order action calculus strongly normalising
1996,calculus interaction,n/a
1995,control structure model interaction,n/a
1995,control structure,action calculus class action structure added structure action calculus ac determined set /spl kscr/ control equipped reaction rule calculus petri net typed /spl lambda/-calculus /spl pi/-calculus obtained varying /spl kscr/ paper defines /spl kscr/ category c characterized equational axiom action structure added structure called control structure provide model calculus ac initial category surface action defined abstract correlate syntactic notion free name three equational characterization surface found equivalent permit non-syntactic treatment linkage among component interactive system finally control structure morphisms offer mean classifying variety dynamic discipline model concurrency mobility present /spl pi/-calculus absent calculus
1994,pi-nets graphical form pi-calculus,action calculus closely corresponds π-calculus presented graphical form so-called π -nets first elementary form π-net sequential control presented using construction honda tokoro shown informally adding single control construction box elementary π-nets sequential control present π-calculus recovered  graphical presentation suggests interesting variant control regime studied briefly main purpose paper explore informally power utility graphical form π-calculus context action calculus also suggests graphical form action calculus explored
1994,computing interaction,n/a
1993,unique decomposition process,paper examine question prime decomposability process define process prime whenever cannot decomposed nontrivial componentswe show finite process uniquely decomposed prime process respect bisimulation equivalence demonstrate counterexample result failure  equivalence trace equivalencealthough show prime decomposition cannot exist arbitrary infinite process motivate leave open conjecture unique decomposability wide subclass infinite behaviour
1993,modal logic mobile process,process algebra bisimulation equivalence typically defined directly term operational rule action also alternative characterization term simple modal logic  paper first defines two form bisimulation equivalence π-calculus process algebra allows dynamic reconfiguration among process explores family possible logic different modal operator proven two logic characterize two bisimulation equivalence also relative expressive power logic exhibited lattice  applicable value-passing process algebra
1993,higher-order action calculus,action calculus broad class algebraic structure including formulation petri net well formulation π-calculus action calculus hac generated particular set k operator called control purpose paper extend action calculus uniform manner higher-order special case essentially extension π-calculus higher order sangiorgi establish link interactive functional paradigm computation variety λ-calculus obtained extension smallest action calculus hacthe dynamic higher-order action calculus presented blending communication -for example process calculi- reduction λ-calculus strong normalisation obtained reduction set equational axiom given higher-order action calculus taking quotient hac single extra axiom η cartesian-closed category obtainedan ultimate goal paper combine process calculus functional calculus formulation semantics
1993,action structure synchronous pi-calculus,review relevant notion action structure presented π-calculus yield version π-calculus synchronous sense meije sccs ie arbitrary amount computation may take place single transition main new technical result construction incident set action structure guarantee congruential strong bisimilarity calculus incident set characterized using new form graphical representation action
1993,action calculus syntactic action structure,action structure previously proposed algebra syntax semantics interactive computation class concrete action structure called action calculus identified serve non-linear syntax wide variety model interactive behaviour generalise previously defined action structure pic π-calculus one action calculus differs another generator called controlsseveral extension pic given action calculus giving essentially power π-calculus action calculus also outlined pt net — class petti net — parametrized upon place transitionsfinally action calculus characterized free algebra sub-variety action structure namely satisfy certain additional axiom
1992,compositional protocol verification using relativized bisimulation,purpose paper illustrate compositional proof method communicating system method property p complete system demonstrated first decomposing system demonstrating property subsystem strong enough entail property p complete system compositional proof method essential one abstract away behavioural aspect subsystem irrelevant context complete system method extension well established notion bisimulation called relative bisimulation developed specifically allow abstraction illustrate method proof correctness version alternating bit protocol
1992,calculus mobile process,present π-calculus calculus communicating system one naturally express process changing structure may component agent system arbitrarily linked communication neighbour may carry information change linkage calculus extension process algebra cc following work engberg nielsen added mobility cc preserving algebraic property π-calculus gain simplicity removing distinction variable constant communication link identified name computation represented purely communication name across link illustrated description π-calculus generalises conventional process algebra treating mobility several example exploiting mobility given detail important example encoding π-calculus higher-order function  transmission process value representation data structure process paper continues presenting algebraic theory strong bisimilarity strong equivalence including new notion equivalence indexed distinctions—ie assumption inequality among name theory based upon semantics term labeled transition system notion strong bisimulation expounded detail companion paper also report briefly work-in-progress based upon corresponding notion weak bisimulation internal action cannot observed
1992,calculus mobile process ii,second two paper present π-calculus calculus mobile process provide detailed presentation theory calculus developed date particular establish  stated companion paper
1992,function process,paper exhibit accurate encoding -calculus -calculus former canonical calculation function latter recent step  towards canonical treatment concurrent process quite simple encoding two -calculus reduction strategy simulated closely reduction -calculus mimicked short sequence reduction -calculus abramskys precongruence applicative bisimulation  -calculus compared induced encoding lazy -calculus -calculus similar comparison made call-by-value -calculus
1992,polyadic pi-calculus abstract,-calculus model concurrent computation based upon notion naming first presented simplest original form help several illustrative application generalized monadic polyadic form semantics done term reduction system version labelled transition called commitment known algebraic axiomatization strong bisimilarity given new setting also characterization modal logic theorem replication operator proved
1992,problem weak bisimulation,“bisimulation to” technique reducing size relation needed define bisimulalion work smoothly strong case first introduced  directly generalize weak case erroneously reported  overcome problem two new “up-to” technique proposed respectively based use expansion  almost-weak bisimulation second solution general first one expansion enjoys nicer mathematical treatment usefulness generality solution motivated non-trivial example two different implementation sorting machine
1992,barbed bisimulation,propose paper barbed bisimulation tool describe bisimulation-based equivalence uniformly calculus possessing  reduction relation  convergency predicate simply detects possibility performing observable action open interesting perspective adoption reduction semantics process algebra test-case prove strong bisimulation cc coincides congruence induced barbed bisimulation
1992,semantics ml concurrency primitive,present set concurrency primitive standard ml define giving transitional semantics simple language prove semantics preserve expected behaviour sequential program also show define store process representation behaviour direct definition proof first step towards integrating semantics full definition standard ml
1992,concurrent process object,π-calculus relatively new algebraic calculus communicating process tradition process algebra  go step one respect model process whose configuration dynamically varying enrichment give calculus status general computational model main character may called object paradigm since directly represents action reaction among independently existing agent also embrace function paradigm since function  data accurately encoded processesa basic knowledge process algebra got book referred π-calculus clearly derived cc  evolved work nielsen engberg  best introduction two-part paper milner parrow walker  encoding λ-calculus done detail 
1991,co-induction relational semantics,application mathematical theory maximum fixed point monotonic set operator relational semantics presented shown important proof method call co-induction variant park  principle fixpoint induction used prove consistency static dynamic relational semantics small functional programming language recursive function
1991,concurrent process object abstract,n/a
1990,interpreting one concurrent calculus another,n/a
1989,complete axiomatisation observational congruence finite-state behavior,finite state automaton non-determinism silent transition interpreted subset free monoid classical automaton theory congruence class congruence relation based upon notion weak bisimulation observational equivalence due park milner paper complete axiomatisation congruence presented extends previously known complete axiomatisation hennessy milner case computation finite extension consists five simple rule recursion
1988,direction concurrency theory,n/a
1987,computing experimental science,n/a
1987,verifying protocol using relativized bisimulation,n/a
1987,dialogue proof system,n/a
1987,type discipline program module,ml module system organized around notion structure signature functor structure encapsulated declaration data type value signature “type” specification structure functor function taking structure structure present static semantics fragment system style plotkins operational semantics treatment structure signature interesting parallel type assignment rule ml given dama milner particular notion principal typing
1986,process constructor interpretation invited paper,n/a
1985,algebraic law nondeterminism concurrency,since nondeterministic concurrent program may general communicate repeatedly environment meaning cannot presented naturally input/output function  paper alternative put forth first definition given two program program part equivalent observer two program part said observation congruent program context equivalent behavior program part meaning defined observation congruence class paper demonstrates sequence simple language expressing finite  behavior case observation congruence axiomatized algebraically moreover addition recursion another simple extension algebraic language described becomes calculus writing specifying concurrent program proving property
1984,complete inference system class regular behaviour,n/a
1984,proposal standard ml,n/a
1983,calculus synchrony asynchrony,calculus distributed computation studied based upon four combinators central idea abelian group action model interface component distributed computing agent using notion bisimulation congruence relation defined computing agent thence algebraic theory derived calculus model synchronous asynchronous computation particular shown author calculus communicating system  asynchronous model derivable calculus presented
1983,using algebra concurrency approach,short introduction algebraic approach concurrency necessarily omitted intricate detail well paying attention algebraic approach  hope shown four kind operator — namely atomic action  summation  product  encapsulation  — together give great expressive power moreover satisfy interesting algebraic identitiesin methodology proof particular system almost certainly need algebra algebra typically prove equation agent expression often wish also prove agent posse property expressible equation therefore important look relation algebra logic — temporal modal logic — designed express interesting property processesanother important relationship study algebraic approach net theory emphasis model different communication cornerstone algebra  net theory emphasizes causal independence provides totally different graphical aid intuition provides different tool abstractionfinally synchronous system demand form treatment author found one way integrating asynchronous algebra algebra synchronous  system method mathematical simplicity — example algebra becomes conventional least semi-ring  — mean obviously best integration possible
1983,parallel combinator reduction machine,n/a
1983,firing squad,n/a
1982,four combinators concurrency,algebraic calculus asynchronous parallel computation called cc  developed  cc express semantics parallel programming language behaviour data structure  serve interface independent agent primitive notion handshake communication emphasis upon  synthesis component  extensionality  contrast petris net theory emphasizes causal independence cc broadened embrace synchrony system depend critically upon timing component extension adhoc shown four combinators one may express synchrony derive cc precise sense fact gained shown  dynamic reconfiguration agent linkage outside scope original calculus may expressed moreover four combinators seem informally speaking represent notion fully orthogonal provide somewhat deeper intellectually clearer foundation distributed computation cc  foundation presume particular abstract notion process author view still contentious matter rather allows candidate notion defined compared candidate congruence class congruence relation calculus
1982,principal type-schemes functional program,n/a
1981,modal characterisation observable machine-behaviour,n/a
1980,observing nondeterminism concurrency,n/a
1979,concurrent process syntax,mathematical model concurrent computation presented starting synchronized communication primitive notion process defined set communication capability domain process built using weak powerdomain construction smyth evolved plotkin minimal set operation composing process defined operation suggest corresponding minimal syntax - language flowgraphs - specify composition concept flow algebra defined process flowgraphs example flow algebra elsewhere shown flowgraphs free  category flow algebra shown process flow algebra therefore constitute suitable semantics flowgraphs however emphasize notion flowgraph evolved notion process reverse
1979,flowgraphs flow algebra,algebra g flowgraphs net presented shown free algebra simple equational system f called law flow hold algebra finite net algebra finite infinite net certain infinite net may described recursion equation demonstrate fact  concerning category continuous algebra explicit implicit work adj group presented self-contained form follows algebra process satisfies law flow f suitable semantics flowgraphs however many interpretation net studied subsequent paper paper concludes simple example infinite net informally discus possible interpretation
1979,lcf way proof machine,n/a
1979,algebraic theory synchronization,n/a
1978,theory type polymorphism programming,aim work largely practical one widely employed style programming particularly structure-processing language impose discipline type entail defining procedure work well object wide variety present formal type discipline polymorphic procedure context simple programming language compile time type-checking algorithmwhich enforces discipline semantic soundness theorem  state well-type program cannot “go wrong” syntactic soundness theorem state ifaccepts program well typed also discus extending  richer language type-checking algorithm based oni fact already implemented working metalanguage ml edinburgh lcf system
1978,synthesis communicating behaviour,n/a
1978,metalanguage interactive proof lcf,n/a
1977,fully abstract model typed lambda-calculi,semantic interpretationfor programming language l fully abstract whenever〚〛〚〛for two program phrase mn program context follows that〚〛〚〛 modelfor language fully abstract natural interpretationof l inis fully abstractwe show certain condition exists extended typed λ-calculus unique fully abstract model
1972,calculus mathematical theory computation,n/a
1971,algebraic definition simulation program,simulation relation program defined quasi-ordering mutual simulation equivalence relation dividing abstract program detail sequencing controlled data represented equivalence class approximation algorithm realized expressed member program technique given illustrated proving simulation equivalence program analogy floyds technique proving correctness program finally necessary sufficient condition simulation given
1970,equivalence program scheme,program scheme may informally described program interpretation  left unspecified paper study equivalence program scheme different class interpretation emphasis function permitted partial several different equivalence relation defined interrelationship solvability examined class program scheme subclass  number register n
1968,string handling algol,dash  set procedure designed extend algol expression non-numerical partly non-numerical algorithm normally unsuited
