1998,history fortran ii iii,article discus attitude automatic programming economics programming existing programming system early describes formation fortran group knowledge existing system plan fortran development language  describes development optimizing compiler fortran various language manual fortran ii iii concludes remark later development impact fortran successor programming today
1985,function level semantics program transformation optimization,software crisis  disorderly concept program make programming art rather engineering discipline discipline would least require stock useful off-the-shelf program collection standard theorem applied repeatedly neithermathematical system often distinguished set operation  map set entity  simply understood   obey set strong algebraic law neither conventional program object level functional program entity belonging system standard operation conventional program violate   object level functional program normally employ lambda abstraction program building operation violates   problem program concept reviewedfunction level program entity mathematical system program built program-forming operation good algebraic property hence subject large number general theorem theorem applicable practice give example function level program also possibility providing solution many problem reviewedthe paper review function level fp system program sketch function level semantics equation semantics develops moderately general  concerning linear recursively defined function one concerning recursion removal discus general directly applicable  literature show essentially function level  best presented recognized formthe final section optimization show fp program transformed others run fast fortran program introduces fortran construct fp pure function obvious corresponding fortran-like program exhibit number function level identity construct show used convert inefficient fp program efficient fortran-like one
1981,function level program mathematical object,program written today object-level program program describe combine various “objects”  form object final “result objects” formed new object constructed existing one application various object-to-object function + matrix inversion conventional von neumann program object level “expressions” right side assignment statement exclusively concerned building object stored lambda calculus based language lisp iswim  also practice object level language although mean
1981,algebra functional program function level reasoning linear equation extended definition,n/a
1978,programming liberated von neumann style functional style algebra program,conventional programming language growing ever enormous stronger inherent defect basic level cause fat weak primitive word-at-a-time style programming inherited common ancestor—the von neumann computer close coupling semantics state transition division programming world expression world statement inability effectively use powerful combining form building new program existing one lack useful mathematical property reasoning program alternative functional style programming founded use combining form creating program functional program deal structured data often nonrepetitive nonrecursive hierarchically constructed name argument require complex machinery procedure declaration become generally applicable combining form use high level program build still higher level one style possible conventional language associated functional style programming algebra program whose variable range program whose operation combining form algebra used transform program solve equation whose “unknowns” program much way one transforms equation high school algebra transformation given algebraic law carried language program written combining form chosen programming power also power associated algebraic law general theorem algebra give detailed behavior termination condition large class program new class computing system us functional programming style programming language state transition rule unlike von neumann language system semantics loosely coupled states—only one state transition occurs per major computation
1973,programming language semantics closed applicative language,paper proposes axiom define sequence language-classes general programming language restricted simple attractive property language used traditional sense referring set interpreted expression concerned syntax expression degree needed relate structure meaning clear distinction drawn language many possible realization languagethis introduction comprises survey opinionated discussion content paper therefore reader wish get technical exposition skip next section
1964,fortran,fundamental concept fortran widely used high-level scientific programming language set forth significant characteristic described historical order inception fortran  present time basic problem get high quality programming an-easy- to-write high-level language emphasized
1963,revised report algorithm language algol 60,report give complete defining description international algorithmic language algol  language suitable expressing large class numerical process form suitably concise direct automatic translation language programmed automatic computer 
1963,revised report algorithmic language algol 60,report give complete defining description international algorithmic language algol  language suitable expressing large class numerical process form suitably concise direct automatic translation language programmed automatic computer 
1960,report algorithmic language algol 60,n/a
1959,syntax semantics proposed international algebraic language zurich acm-gamm conference,paper give summary syntax interpretation rule proposed international algebraic language put forward zurich acm-gamm conference followed formal  complete presentation information notation presented number numerical variable boolean variable  relation n-dimensional array function operator algebraic expression mean provided language assignment value variable conditional execution statement  iterative procedure formation compound statement sequence statement definition new statement arbitrary procedure re-use alteration program segment proposed language intended provide convenient concise mean expressing virtually procedure numerical computation employing relatively syntactical rule type statement
1954,ibm 701 speedcoding system,n/a
