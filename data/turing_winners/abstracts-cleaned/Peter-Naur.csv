2007,computing versus human thinking,n/a
1993,understanding turing universal machine - personal style program description,study present  experiment programmer description understanding  participant student computing produced note turing description universal machine second experiment phase made mutual evaluation note analysis resulting note show large individual difference style evaluation respect significant issue description understanding including evaluation program description particularly full formal characteristic consequence observation teaching programming programming methodology discussed appendix give annotated version turing description universal machine
1986,thinking turing test,question raised turing paper thought machine discussed human thought considered turn concept normal language usage basic concept psychology basis intellectual activity concluded neither notion thought identifies something specific human cannot imitation game proposed turing deciding whether machine think found result arbitrary empoverishment channel communication interrogator item investigation turing notion thinking shown lead logical difficulty alternative view consciousness would place beyond reach finite test finally discussed
1985,intuition software development,characterization pervasiveness intuition human conscious life given followed remark success failure intuition next intuitive basis common notion scale logic correctness text reasoning proof described basis essential notion data model human activity software development built human intuition discussed lead discussion software development method viewed mean overcoming hazard intuitive action concluded programmer experience integrity important use method
1982,formalization program development,concept specification formalization relevant development program introduced discussed found certain argument given using particular formal mode expression developing proving program correct invalid illustration formalized description algol  discussed found deficient emphasis formalization shown harmful effect program development neglect informal precision simple formalization style specification using formalization enhance intuitive understandability recommended
1980,impression early day programming,paper describes author experience working edsac cambridge england   author  astronomical calculation using hand method plan spending year cambridge first described followed impression mathematical laboratory cambridge staff external characteristic edsac library subroutine documentation programmer machine language paper tape preparation equipment organization use edsac second major part paper describes step leading edsac-program calculating motion minor planet step-by-step integration equation motion special attention preparation check large amount input program
1979,critique iso data processing vocabulary,n/a
1975,programming language natural language mathematics,social aspect pro gramming illuminated analogy similar aspect mathematics natural language split pure applied mathematics found similarly programming development natural language toward flexionless word-order based language type speaks programming language design based general abstract construct analogy incident history artificial auxiliary language suggested fortran cobol remain dominant long time come promising avenue work wide influence seen high quality program literature  general utility study question related program style
1974,trend computer science education,note meant computer science discipline concerned hardware software computer well data data representation process algorithm program directly inspired existence computer education regarded merely teaching instruction given context curriculum called “computer science” “informatics” “datalogy” related name also isolated activity education take place inside outside formal institution schooling education
1968,datalogy science data data process,n/a
1966,program translation viewed general data processing problem,efficiency dictate overall effectiveness compiler increased mean available compiler substantial useful life need clear logical structure reliability sound data processing technique compiler must based fixed convention preserve efficiency reliability empty option default convention violate dictum use structure associate various part program economy feature promote clarity reliability
1965,performance system automatic segmentation program within algol compiler gier algol,gier algol compiler make use automatic system handling transfer program segment drum store core store program execution time logic system described performance system discussed primarily basis execution time related two specific program discussion concludes assessment potential gain various way improving system
1964,certification algorithm 122 tridiagonal matrix,n/a
1964,certification algorithm 150 syminv2,n/a
1964,remark algorithm 91 chebyshev curve fit,n/a
1963,revised report algorithm language algol 60,report give complete defining description international algorithmic language algol  language suitable expressing large class numerical process form suitably concise direct automatic translation language programmed automatic computer
1963,remark algorithm 42 invert,n/a
1963,remark certification algorithm 50 inverse finite segment hilbert matrix,n/a
1963,remark certification algorithm 52 set test matrix,n/a
1963,certification algorithm calculating prime mean gps,n/a
1963,remark algorithm 107 gauss method,n/a
1963,certification algorithm 117 118 magic square even odd order,n/a
1963,certification algorithm 120 matrix inversion gauss-jordan inversion ii,n/a
1963,documentation problem algol 60,presenting following note wish make clear express private view thus although view naturally greatly influenced experience gained participation international algol effort represent agreed opinion group alone held responsible misrepresentation
1963,correction earlier remark algorithm 42 invert alg 107 gauss method alg 120 inversion ii gjr,n/a
1963,additional remark algorithm 52 set test matrix,n/a
1963,certification algorithm 85 jacobi,n/a
1963,revised report algorithmic language algol 60,n/a
1963,gier-a danish computer medium size,paper give brief review design machine gier  programming system principal subject order structure operating system algol  system evaluation order structure hardware organization latest hardware extension including hybrid computer system
1961,storage allocation scheme algol 60,storage allocation scheme machine -instruction core store magnetic drum described use drum storing program block and/or data must directed programmer auxiliary information algol program administrative routine controlling storage run time described full detailed example given
