2002,cool comprehensive object-oriented learning,cool project  -year research project proposal launched consortium four norwegian research institution supported research institution aarhus denmark co-operating test site around worldcool contribute unifying process- object-oriented platform informatics produce learning landscape pedagogical organizational component used modern system-oriented education informatics related field provide alternative current pedagogical approach used commonly regarded unsuccessful cool co-operate research institution denmark number test site  around world representing number language/cultural world  cool produce introductory course supported textbook dvd record containing integrated multimedia material cool learning landscape shall allow alternative course adapted local culture condition
1997,good appear stage,lecture trace development important object-oriented concept point analogy performance stage theatre operation information system  metaphor used description idea pursued developed good project  three year project supported norwegian research council starting january  good aim extending framework object-oriented programming include multi-layered approach organisation relationship people computer hardware organisational rule program general distributed system good also aim introducing general tool specifying visibility object  precise dealing identity object exist many version distributed environment
1987,classification action inheritance also method,main thing sub-class mechanism found language like c++ simula smalltalk possibility express specialization general class covering wide range object may specialized cover specific object obtained three property sub-classing object sub-class inherits attribute super-class virtual procedure/method attribute  may specialized sub-class  inherits action super-classin language mentioned virtual procedures/methods super-class specialized sub-classes primitive manner simply re-defined need bear resemblance virtual super-class beta new object-oriented language class method unified one concept extension virtual concept virtual procedures/methods sub-classes defined specialization virtuals super-class virtual procedures/methods sub-classes thus inherits attribute  action “super-procedure/method”in language mentioned procedures/methods may virtual class procedures/methods unified beta give also virtual class paper demonstrates may used parameterize type enforce constraint type
1986,program development social activity invited paper,paper discus social aspect large scale program system development main emphasis social meaning societal informatics defined science studying information process related phenomenon information process eg program execution computer information processing office carried jointly people computer related phenomenon program system development tool available restrictins imposed upon program development knowledge-building process etc concept process structure system discussed used context notion perspective introduced used characterize programming style attitude towards program development level emphasis study program development agreement law regulating system development norway described participation employee treated context 
1985,multi-sequential execution beta programming language,beta programming language object oriented language like simula  smalltalk unlike smalltalk beta belongs algol family respect block structure  scope rule type checking  class/subclass procedure function type mechanism simul unified one general abstraction mechanism  pattern  pattern may used generat e entity correspond variable procedure/function activation object simula  pattern mechanism introduced another paper thus briefly described  purpose current paper describe entity beta program execution may execute action  entity always one two kind  either instance object  instance coroutine specia l case may passive data object procedure/function activation  set object may execute concurrently mode called alternation  alternation mode execution one objec time executes action  well defined point execution another object may take execution  shown alternation together block structure  alternative guarde input/output command
1985,algebra program fragment,program fragment described either string concrete syntax constructor application abstract syntax defining conversion form may intermixed program fragment constructed terminal nonterminal symbol grammar variable program fragment value basic operation valuetransfer composition decomposition defined program fragment allowing complicated operation implemented usual operation testing equality defined addition specialized operation testing program fragment derivable another converting program fragment concrete form abstract form defined introducing regular expression grammar may used program fragment concrete form defining constructor regular expression may also used program fragment abstract form
1983,abstraction mechanism beta programming language,beta programming language developed part beta project purpose project develop concept construct tool field programming programming language beta developed  various stage language documented application area beta programming embedded well distributed computing system reason major goal develop construct may efficiently implemented furthermore beta language intended number basic general construct necessary abstraction mechanism powerful order define specialized constructsbeta object oriented language like simula   smalltalk  meant construct like simula class/subclass mechanism fundamental beta contrast smalltalk beta language algol   familysimula  system description programming language delta language  system description language allowing description full concurrency continuous change component interaction developed simula conceptual platform beta started system concept delta programming language drawing upon large number contribution programming research basic idea beta build language upon one general abstraction mechanism --- pattern  --- covering data procedural control abstraction substituting construct like class procedure function typecorrespondingly object procedure activation record variable regarded special case basic building block program execution entity pattern thus describes category entity identical structure entity consists set attribute action-part attribute may data-item pattern action-part sequence imperative may executeda data-item may entity reference entity pattern may used procedure like manner sense entity  described pattern may generated executed part action sequence another entity pattern may used generate entity execute action-part concurrency entity entity may also execute action interleaved coroutine like mannerentities may organized hierarcically mean generalization simula subclass mechanism give possibility grouping common property entity different patternsin simula  class may virtual attribute  powerful parameter mechanism give possibility delay specification attribute subclass specification however simula  lack possibility virtual class attribute furthermore necessary runtime check parameter virtual procedure since possible specify parameter list virtual procedure virtual pattern beta generalization virtual concept simula paper sequential part beta presented main purpose demonstrate use pattern/subpattern mechanism virtual pattern powerful abstraction mechanism addition generalization virtual concept based syntactic category describedwork initiated design implement integrated programming system beta approach separate compilation beta module described paper organised follows section  describes entity pattern imperative section  describes subpattern mechanism virtual pattern described section  section  describes generalization virtual concept section  remaining element beta mentioned previous section described finally syntax beta given appendix section brief introduction relevant language element whereafter number example given example extended version hoares smallintset distinction base language  standard beta standard beta basic beta extended number commonly used construct additional construct may regarded pattern basic beta often given special syntax paper mainly focus basic beta occasionally shall use part standard beta stated appropiate place
1966,simula - algol-based simulation language,paper introduction simula programming language designed provide system analyst unified concept facilitate concise description discrete event system system description also serf source language simulation program simula extension algol  important new concept quasi-parallel processing
