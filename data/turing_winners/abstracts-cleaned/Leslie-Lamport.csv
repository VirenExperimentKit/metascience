2018,youre writing program dont use programming language,need handle large program produce ecient compiled codeadds complexity programming language limit expressivenessalgorithms program expressed simpler expressive language language one used almost every branch science engineering precisely describe reason object study language mathematics math useful describing general class algorithm studied algorithmcourses
2015,build house without drawing blueprint,finding better solution thinking problem solution rather thinking code
2014,coalescing syntactic abstraction reasoning first-order modal logic,present syntactic abstraction method reason first-order modal logic using theorem provers standard first-order logic propositional modal logic 
2014,incomplete history concurrency chapter 1 1965-1977,personal view first dozen year modern field concurrent distributed computing viewed perspective  chapter left others write 
2013,adaptive register allocation linear number register,give adaptive algorithm process use multi-writer multi-reader register acquire exclusive write access single-writer multi-reader register first algorithm us number register linear number participating process previous adaptive algorithm require least θ register
2012,tla + proof,tla +  specification language based standard set theory temporal logic construct hierarchical proof describe write tla +  proof check tlaps tla +  proof system use peterson’s mutual exclusion algorithm simple example show tlaps toolbox  help user manage large complex proof
2011,euclid writes algorithm fairytale,n/a
2011,brief announcement leaderless byzantine paxos,role leader asynchronous byzantine agreement algorithm played virtual leader implemented using synchronous byzantine agreement algorithm
2011,byzantizing paxos refinement,derive af+process byzantine paxos consensus algorithm byzantizing variant ordinary paxos algorithm—that havingf+nonfaulty process emulate ordinary paxos algorithm despite presence f malicious process written formal machine-checked proof byzantized algorithm implement ordinary paxos consensus algorithm suitable refinement mapping
2010,mailbox problem,propose solve synchronization problem called mailbox problem motivated particular type interaction processor external device two thread problem postman delivers letter mailbox home owner us flag signal non-empty mailbox owner must remove letter delivered mailbox walk mailbox empty present algorithm impossibility result problem
2010,reconfiguring state machine,reconfiguration mean changing set process executing distributed system explain several method reconfiguring system implemented using state-machine approach including new one discus relation method earlier reconfiguration algorithms--especially view changing group communication
2010,computer science state machine,computer science largely computation many kind computing device described abstract concrete among areautomata including turing machine moore machine mealy machine pushdown automaton cellular automatacomputer program written programming languagealgorithms written natural language pseudocodevon neumann computersbnf grammarsprocess algebra ccscomputer scientist collectively suffer call whorfian syndrome confusion language reality since device described different language must different fact naturally described state machine
2010,verifying safety property tla+ proof system,tlaps tla +  proof system platform development mechanical verification tla +  proof tla +  proof language declarative understanding proof requires little  beyond elementary mathematics language support hierarchical non-linear proof construction verification independent verification tool strategy proof written language specification engineer translate high-level design language particular verification tool proof manager interprets tla +  proof collection proof obligation verified sends backend verifier include theorem provers proof assistant smt solver decision proceduresthe first public release tlaps available  distributed bsd-like license handle almost non-temporal part tla +  well temporal reasoning needed prove standard safety property particular invariance step simulation liveness property intuitively safety property asserts permitted happen liveness property asserts must happen formal overview see 
2010,tla+ proof system building heterogeneous verification platform,model checking proved efficient technique finding subtle bug concurrent distributed algorithm system however usually limited analysis small instance system due problem state space explosion model checking find error one attempt verify correctness model using theorem proving also requires efficient tool support
2009,teaching concurrency,n/a
2009,pluscal algorithm language,algorithm different program described programming language simple alternative programming language pseudo-code pluscal algorithm language used right replace pseudo-code sequential concurrent algorithm based tla +  specification language pluscal algorithm automatically translated tla +  specification checked tlc model checker reasoned formally
2009,tla+ whence wherefore whither,n/a
2009,vertical paxos primary-backup replication,introduce class paxos algorithm called vertical paxos reconfiguration occur middle reaching agreement individual state-machine command vertical paxos algorithm use auxiliary configuration master facilitates agreement reconfiguration special case algorithm lead traditional primary-backup protocol show primary-backup system current use viewed shown correct instance vertical paxos algorithm
2008,implementing dataflow thread,general algorithm presented implementing dataflow computation multiple thread communicate using read writes shared memory
2008,tla+ proof system,describe extension tla+ specification language construct writing proof proof environment called proof manager  check proof language pm support incremental development checking hierarchically structured proof pm translates proof set independent proof obligation call upon collection back-end provers verify different provers used verify different obligation currently supported back-ends tableau prover zenon isabelle/tla+ axiomatisation tla+ isabelle/pure proof obligation complete tla+ proof also used certify theorem isabelle/tla+
2007,formal specification web service protocol,describe use formal method specify check web service protocol web service atomic transaction protocol specified tla+ checked tlc model checker modest effort revealed oversight caused unanticipated behavior protocol corrected clarification change protocol
2007,disc 20th anniversary invited talk time clock ordering idea distributed system,guided tour labyrinth thought bakery algorithm arbiter-free marked graph exercise egotism invitation disc th anniversary committee take responsibility choice topic
2006,fast paxos,used practice traditional consensus algorithm require three message delay process learn chosen value fast paxos extension classic paxos algorithm allows value learned two message delay algorithm work explained informally tla+ specification algorithm appears appendix
2006,lower bound asynchronous consensus,impossibility  best-case lower bound proved number message delay number process required reach agreement asynchronous consensus algorithm tolerates non-byzantine failure general algorithm exist achieve lower bound normal case response time non-faulty process transmission delay message send one another bounded theorem allow algorithm better certain exceptional case algorithm presented two exceptional algorithm may practical interest
2006,consensus transaction commit,distributed transaction commit problem requires reaching agreement whether transaction committed aborted classic two-phase commit protocol block coordinator fails fault-tolerant consensus algorithm also reach agreement block whenever majority process working paxos commit algorithm run paxos consensus algorithm commit/abort decision participant obtain transaction commit protocol us f +  coordinator make progress least f +  working properly paxos commit stable-storage write delay implemented message delay fault-free case two-phase commit us message classic two-phase commit algorithm obtained special f =  case paxos commit algorithm
2006,+cal algorithm language,algorithm different program described programming language example algorithm usually best described term mathematical object like set graph instead primitive object like byte integer provided programming language simple alternative programming language pseudo-code+cal algorithm language based tla+ +cal algorithm automatically translated tla+ specification checked tlc model checker reasoned formally +cal make pseudo-code obsolete
2006,checking multithreaded algorithm +cal,colleague told multithreaded algorithm later reported bug rewrote algorithm  +  cal algorithm language ran tlc model checker found error program released without tested algorithm published without model checked
2005,real-time model checking really simple,easy write verify real-time specification existing language method one represents time ordinary variable express timing requirement special timer variable resulting specification verified ordinary model checker basic idea le obvious detail explained  presented two example
2005,fast eventual synchrony lead consensus,well known consensus problem solved distributed system time t/sub s/ process fails upper bound /spl delta/ long take deliver message know existing algorithm guarantee consensus among n process time t/sub s/+o show consensus achieved time t/sub s/+o
2004,recent discovery paxos,n/a
2004,cheap paxos,asynchronous algorithm implementing fault-tolerant distributed system make progress despite failure f processor require f +  processor cheap paxos variant paxos algorithm guarantee liveness additional assumption set nonfaulty processor jump around fast us f +  main processor actually execute system f auxiliary processor used handle failure main processor auxiliary processor take part reconfiguring system remove failed processor remain idle another main processor fails
2003,disk paxos,present algorithm called disk paxos implementing reliable distributed system network processor disk like original paxos algorithm disk paxos maintains consistency presence arbitrary non-byzantine fault progress guaranteed long majority disk available even processor one failed
2003,arbitration-free synchronization,implementing traditional form multiprocess synchronization requires hardware arbiter consider kind synchronization achievable without arbitration several kind simple arbiter-free register defined shown equal power class synchronization problem solvable register characterized powerful form arbiter-free communication primitive described however problem characterizing general form arbiter-free synchronization remains unsolved
2003,checking cache-coherence protocol tla+,great deal experience using specification language tla+ model checker tlc analyze protocol designed digital compaq  tool technique developed apply equally well software hardware design paper describe experience using tla+ tlc verify cache-coherence protocol
2002,high-level specification lesson industry,explain rationale behind design tla +  specification language describe experience using tlc model checker industrial applications–including verification multiprocessor memory design intel based experience challenge conventional wisdom high-level specification
2002,paxos made simple fast byzantine,n/a
2002,specifying verifying system tla+,tla+ high-level specification language used specify check correctness several hardware protocol expect also used specify check concurrent algorithm protocol software system
2000,fairness hyperfairness,notion fairness trace-based formalism examined argued general fairness mean machine closure notion hyperfairness introduced attie francez grumberg generalized arbitrary action system also examined fairness criterion proposed apt francez katz
2000,correct mutual exclusion algorithm guarantee mutual exclusion,mutual exclusion usually defined mean two process critical section time something dan scale said conversation made suddenly realize conventional mutual exclusion algorithm satisfy property conjectured property could satisfied perl weihl proved conjecture correct paper explains mutual exclusion previously achieved achieve itall le five page
2000,distributed algorithm tla abstract,tla  simple logic describing reasoning concurrent system provides uniform way specifying algorithm correctness property well rule proving one specification satisfies another tla+ formal specification language based tla tlc model checker tla+ specification tla+ tlc used specify check high-level description real complex system tla+ provides full power ordinary mathematics permit simple straightforward specification kind algorithm presented podcthis tutorial try convince describe algorithm tla+ able check tlc use tla prove correctness formally informally want  tutorial describe tla+ example demonstrate use tlc knowledge tla assumedtla following disadvantagesit describe real algorithm vague incomplete sketch algorithmyou specify algorithm correctness condition tla understand algorithm supposed dotla make harder cover gap proof handwavingsome researcher may find drawback insurmountable
1999,lazy caching tla,summarywe address problem proposed gerth verifying simplified version lazy caching algorithm afek brown merritt sequentially consistent specify algorithm sequential consistency tla++ formal specification language based tla  describe construct check formal tla correctness proof
1999,specification language typed,specification language type system type system hard get right getting wrong lead inconsistency set theory serve basis specification language without type possibility widely overlooked offer many advantage untyped set theory simple flexible simple typed formalism polymorphism overloading subtyping make type system powerful cost increased somplexity refinement never attain flexibility type typed formalism advantage stemming power mechanical type checking type serve little purpose hand proof help mechanized proof absence verificaiton type checking catch error specification may possible best world adding typing annotation untyped specification languagewe consider specification language programming language
1999,model checking tla+ specification,tla+ specification language concurrent reactive system combine temporal logic tla full first-order logic zf set theory tlc new model checker debugging tla+ specification checking invariance property finite-state model specification accepts subclass tla+ specification include description real system design used engineer find error cache coherence protocol new compaq multiprocessor describe tla+ specification tlc model tlc work experience using
1999,cache coherence verification tla+,used specification language tla+ analyze correctness two cache-coherence protocol shared-memory multiprocessor based two generation  alpha processor memory model defines relationship value written one processor value read another cache-coherence protocol manipulates cache preserve relationship cache-coherence protocol fundamental component shared-memory multiprocessor design proving coherence protocol implement memory model high-leverage application formal method analysis first protocol largely research project analysis second protocol part engineers’ verification process
1998,proving possibility property,method described proving “always possibly” property specification formalism linear-time trace semantics shown relatively complete tla  specification
1998,part-time parliament,recent archaeological discovery island paxos reveal parliament functioned despite peripatetic propensity part-time legislator legislator maintained consistent copy parliamentary record despite frequent foray chamber forgetfulness messenger paxon parliament protocol provides new way implementing state machine approach design distributed system
1998,reduction tla,reduction theorem allow one deduce property concurrent system specification property simpler coarser-grained version called reduced specification present reduction theorem based upon precise relation original reduced specification earlier one permitting use reduction reason larger class property particular present reduction theorem handle general liveness property
1997,make correct multiprocess program execute correctly multiprocessor,multiprocess program executing modern multiprocessor must issue explicit command synchronize memory access method proposed deriving necessary command correctness proof underlying algorithm formalism based temporal relation among operation execution
1997,process eye beholder,two-process algorithm shown equivalent n-process one illustrating insubstantiality process formal equivalence proof  sketched
1997,composition way make proof harder,compositional reasoning system mean writing specification parallel composition component reasoning separately component distracting language issue removed underlying mathematics revealed compositional reasoning seen little use
1996,managing proof abstract,well-designed proof hierarchically structured collection assumption statement check proof almost current theorem prover one must first eliminate structure encode assumption statement idiosynchratic logic prover one must check debug proof particular set algorithm prover happens implement using interface provides extremely myopic view proof people believe process made wonderful providing screen interface display typeset formula replaces typing mouse click talk propose drastic change
1995,conjoining specification,show specify component concurrent system specification system conjunction component specification property system proved reasoning component consider decomposition given system part composition given part form system
1995,tla picture,predicate-action diagram similar standard state-transition diagram precisely defined formula tla  explain diagram used describe aspect specification-and description proved correct-even complete specification cannot written diagram also use diagram illustrate proofs< >
1994,write long formula short communication,standard mathematical notation work well short formula longer one often written computer scientist notation proposed make one two-page formula easier read reason
1994,temporal logic action,temporal logic action  logic specifying reasoning concurrent system system property represented logic assertion system meet specification assertion one system implement another expressed logical implication tla simple syntax complete formal semantics summarized page yet tla logician toy extremely powerful principle practice report introduces tla describes used specify verify concurrent algorithm use tla specify reason open system described elsewhere
1994,old-fashined recipe real-time,traditional method specifying reasoning concurrent system work real-time system using tla  illustrate work example queue mutual-exclusion protocol general two problem must addressed avoiding real-time programming version zeno paradox coping circularity composing real-time assumption/guarantee specification solution rest property machine closure realizability
1994,rpc-memory specification problem - problem statement,n/a
1994,tla solution rpc-memory specification problem,present complete solution broy-lamport specification problem specification written tla+ formal language based tla give high level structured proof sketch lower level appear full elsewhere
1994,good specification method,formal method abound specifying concurrent system proponent method usually talk ignore cant present explain desideratum specification method 
1994,specifying verifying fault-tolerant system,formally specify well known solution byzantine general problem give rigorous hierarchically structured proof correctness demonstrate engineering exercise requiring new scientific idea
1994,open system tla,describe method writing assumption/guarantee specification concurrent system also provide proof rule reasoning composition system specification written tla  reasoning performed within logic proof rule handle internal variable safety liveness property 
1994,decomposing specification concurrent system,large system built smaller part present method deducing property system reasoning component show represent individual component formula si parallel composition usually denoted cobegin      n coend represented formula      sn composition conjunction reduce composition conjunction sake elegance best way know prove property composite system rigorous reasoning requires logic hence language logical formula require conventional programming language describing system find convenient regard program circuit description low-level specification represent logic used higher-level specification logic use tla temporal logic action  discus important problem translating low-level tla specification implementation conventional language idea representing concurrent program specification formula temporal logic first proposed pnueli  later observed specification allow stuttering step leave state unchanged sl  sh asserts sl implement sh  hence proving lower-level specification implement higherlevel one reduced proving formula logic still later noticed formula x  specifies system except variable x hidden  variable hiding became logical quantification idea composition conjunction also suggested  method reducing composition conjunction new 
1994,tlz,z schema specify functional system—one produce output response input example simple text editor functional system specified z schema describes effect keystroke screen reactive system interacts environment complex fashion adding interrupt key allows user stop long operation completes turn simple text editor reactive system concurrent distributed system usually best viewed reactive system z inadequate specifying reactive system
1993,composing specification,rigorous modular specification method requires proof rule asserting component behaves correctly isolation behaves correctly concert component rule subtle component need behave correctly environment component part others environment examine precise distinction system environment provide requisite proof rule module specified safety liveness property
1993,verification multiplier 64 bit beyond,verifying -bit multiplier computational complexity put beyond grasp current finite-state algorithm including based upon homomorphic reduction induction principle bdd fixed-point algorithm theorem proving bound computational constraint may feasible routinely coping complex low-level detail real multiplier show verify multiplier applying cospan model-checking algorithm verify local property complex low-level circuit using tlp theorem prover based temporal logic action prove property imply correctness multiplier verification step automated plan mechanize translation language tlp cospan
1993,verification specification concurrent program,explore history lesson learned eighteen year assertional method specifying verifying concurrent program propose utopian future mathematics prevails
1992,critique lake arrowhead three,number year member committee planned annual workshop lake arrowhead southern california finally pressured organizing workshop got brent hailpern chairman workshop specification verification concurrent system large part conference devoted challenge problem specifying sequential consistency problem time found difficult among presentation workshop session challenge problem two serious attempt solving problem  long period review revision two third subsequently-written solution appeared special issue distributed computing note critique three solution wrote special issue
1992,computer-hindered verification human,n/a
1992,mechanical verification concurrent system tla,describe initial version system mechanically checking correctness proof concurrent system input system consists correctness property expressed tla  proof written humanly readable hierarchically structured form system us mechanical verifier check step proof translating step assertion theorem verifier logic proof instruction verifier checking done lp  using two different translations—one action reasoning one temporal reasoning use additional mechanical verifier planned immediate goal practical system mechanically checking proof behavioral property concurrent system assume ordinary property data structure used system
1992,hybrid system tla+,tla+ general purpose formal specification language based temporal logic action built-in primitive specifying real-time property use tla+ define operator specifying temporal behavior physical component obeying integral equation evolution operator together previously defined operator describing timing constraint used specify toy gas burner introduced ravn rischel hansen burner specified three level abstraction two lower-level specification implementing next higher-level one correctness proof sketched
1991,preserving liveness comment safety liveness methodological point view,anomaly liveness property constrain infinite behavior implicitly rule finite behavior agree reasonable specification written form recommended dederichs weber observed abadi lamport  called specification form machine closed one try write liveness property  rule finite behavior pointed apt francez katz  defined fairness condition programming language feasible produce machine-closed specification program feasibility necessary prevent scheduler painting corner 
1991,existence refinement mapping,refinement mapping used prove lower-level specification correctly implement higher-level one consider specification consisting state machine  specifies safety requirement arbitrary supplementary property specifies liveness requirement refinement mapping lower-level specification higher-level one mapping s state space s state space map step s state machine step s state machine map behavior allowed behavior allowed show reasonable assumption specification implement adding auxiliary variable guarantee existence refinement mapping provides completeness result practical hierarchical specification method
1991,old-fashioned recipe real time,traditional method specifying reasoning concurrent system work real-time system however two problem arise real-time programming version zeno paradox circularity composing real-time assumption/guarantee specification solution rest property machine closure realizability tla  provides formal framework exposition
1990,theorem atomicity distributed algorithm,reasoning distributed algorithm simplified ignore time needed send deliver message instead pretend process sends collection message single atomic action message delivered instantaneously part action theorem derived prof validity reasoning large class algorithm generalizes corrects well-known folk theorem operation multiprocess program considered atomic
1990,concurrent reading writing clock,exercise synchronization without mutual exclusion algorithm developed implement monotonic cyclic multiple-word clock updated one process read one process
1990,win sin predicate transformer concurrency,weakest liberal precondition strongest postcondition predicate transformer generalized weakest invariant strongest invariant new predicate transformer useful reasoning concurrent program containing operation grain atomicity unspecified also used replace behavioural argument rigorous assertional one
1989,simple approach specifying concurrent system,transition axiom method safety property concurrent systemcan specified program liveness property specified assertionsin simple temporal logic method described simpleexamples logical foundation informally explored carefulexamination mean implement specification language issuesand practical detail largely ignored
1989,realizable unrealizable specification reactive system,n/a
1988,control predicate better dummy variable reasoning program control,explicit control predicate rather dummy variable used owicki-gries method proving safety property concurrent program strengthened making easier construct required program annotation
1988,waiting millennium formal specification verficiation concurrent system abstract,n/a
1988,lattice-structured proof minimum spanning,highly-optimized concurrent algorithm often hard prove correct natural decomposition separately provable part paper present proof technique modular verification non-modular algorithm generalizes existing verification technique based totally-ordered hierarchy refinement allow partiallyordered hierarchy-that lattice different view algorithm technique applied well-known distributed minimum spanning tree algorithm gallager humblet spira recently lacked rigorous proof
1987,fast mutual exclusion algorithm,new solution mutual exclusion problem presented absence contention requires seven memory access assumes atomic read atomic writes shared register
1986,interprocess communication part basic formalism,formalism specifying reasoning concurrent system described unlike conventional formalism based upon atomic action definition mean one system implement higher-level system given justified part ii formalism used specify several class interprocess communication mechanism prove correctness algorithm implementing
1986,interprocess communication part ii algorithm,interprocess communication studied without assuming lower-level communication primitive three class communication register considered several construction given implementing one class register weaker class formalism developed part used proving correctness construction
1986,mutual exclusion problem part - theory interprocess communication,novel formal theory concurrent system assume atomic operation introduced execution concurrent program modeled abstract set operation execution two temporal ordering relation precedence causally affect primitive interprocess communication mechanism defined part ii mutual exclusion expressed precisely term model solution using communication mechanism given
1986,mutual exclusion problem partii - statement solution,interprocess communication studied without assuming lower-level communication primitive three class communication register considered several construction given implementing one class register weaker class formalism developed part used proving correctness construction
1986,byzantine clock synchronization,informal description given three fault-tolerant clock-synchronization algorithm algorithm work presence arbitrary kind failure including two-faced clock two algorithm derived byzantine general solution
1985,synchronizing clock presence fault,algorithm described maintaining clock synchrony distributed multiprocess system process clock algorithm work presence arbitrary clock process failure including two-faced clock present different value different process two algorithm require fewer one-third process faulty third algorithm work fewer half process faulty requires digital signature
1985,solved problem unsolved problem non-problems concurrency,edited transcript talk given last year conference preserve flavor talk question done little editing---mostly eliminating superfluous word phrase correcting especially atrocious grammar making obvious change needed replacing slide figure tape recorder functioning first minute recreate beginning talk
1985,distributed snapshot determining global state distributed system,paper present algorithm process distributed system determines global state system computation many problem distributed system cast term problem detecting global state instance global state detection algorithm help solve important class problem stable property detection stable property one persists stable property becomes true remains true thereafter example stable property computation terminated  system deadlocked token token ring disappeared stable property detection problem devising algorithm detect given stable property global state detection also used checkpointing
1985,mean concurrent program satisfy specification one specified priority,formal correspondence implementation specification examined shown existing specification claim describe priority either vacuous else restrictive implemented reasonable situation illustrated precisely formulated problem specifying first-come-first-served mutual exclusion algorithm claimed cannot solved existing method
1985,constraint uniform approach aliasing typing,constraint relation among program variable maintained throughout execution type declaration general form aliasing expressed constraint proof system based upon interpretation hoare triple temporal logic formula given reasoning program constraint proof system shown sound relatively complete example program proof given
1984,using time instead timeout fault-tolerant distributed system,general method described implementing distributed system desired degree fault-tolerance instead relying upon explicit timeouts process execute simple clock-driven algorithm reliable clock synchronization solution byzantine general problem assumed
1984,hoare logic csp,generalized hoare logic formal logical system deriving invariance property program provides uniform way describe variety method reasoning concurrent program including noninterference satisfaction cooperation proof author describe simple meta-rule generalized hoare logic-the decomposition principle-show method derived using 
1984,basic concept,n/a
1984,formal foundation specification verification,n/a
1984,paradigm distributed program,n/a
1983,weak byzantine general problem,byzantine general problem requires process reach agreement upon value even though may fad weakened allowing agree upon incorrect value failure occurs transaction eormmt problem distributed database j special case weaker problem shown like original byzantine general problem weak version solved ff fewer one-third process may fad unlike onginal problem approximate solution exists tolerate arbaranly many failure
1983,specifying concurrent program module,method specifying program module concurrent program described based upon temporal logic us new kind temporal assertion make specification simpler easier understand semantics specification described informally sequence example given culminating specification three module comprising alternating-bit communication protocol formal semantics given appendix 
1983,problem workshop analysis concurrent system,n/a
1983,good temporal logic,temporal logic formal system specifying reasoning concurrent program provides uniform framework describing system level abstraction thereby supporting hierarchical specification verification
1983,reasoning nonatomic operation,method presented permit assertional reasoning concurrent program even though atomicity elementary operation left unspecified based upon generalization dynamic logic operator  method illustrated verifying mutual exclusion property two-process version bakery algorithm
1982,assertional correctness proof distributed algorithm,using ordinary assertional method concurrent program verification prove correctness distributed algorithm maintaining message-routing table network communication line fail show assertional reasoning global state work well distributed well nondistributed algorithm
1982,byzantine general problem,reliable computer system must handle malfunctioning component give conflicting information different part system situation expressed abstractly term group general byzantine army camped troop around enemy city communicating messenger general must agree upon common battle plan however one may traitor try confuse others problem find algorithm ensure loyal general reach agreement shown using oral message problem solvable two-thirds general loyal single traitor confound two loyal general unforgeable written message problem solvable number general possible traitor application solution reliable computer system discussed
1982,proving liveness property concurrent program,liveness property asserts program execution eventually reach desirable state termination studied extensively many liveness property important concurrent program formal proof method based temporal logic deriving liveness property presented allows rigorous formulation simple informal argument reason temporal logic use safety  property proving liveness shown method illustrated using first simple programming language without synchronization primitive one semaphore however applicable programming language
1981,password authentification insecure communication,method user password authentication described secure even intruder read system data tamper eavesdrop communication user system method assumes secure one-way encryption function implemented microcomputer user terminal
1981,timesets -- new method temporal reasoning program,n/a
1981,program logic program verification position paper,n/a
1980,hoare logic concurrent program,hoares logical system specifying proving partial correctness property sequential program generalized concurrent program basic idea define assertion {p} {q} mean execution begun anywhere p true p remain true terminates q true terminates predicate p q may depend upon program control location well upon value variable system inference rule axiom schema given formal correctness proof simple program outlined show specifying certain requirement unimplemented part correctness property proved without completely implementing program relation pnuelis temporal logic formalism also discussed
1980,reaching agreement presence fault,problem addressed concern set isolated processor unknown subset may faulty communicate mean two-party message nonfaulty processor private value information must communicated nonfaulty processor nonfaulty processor always communicate honestly whereas faulty processor may lie problem devise algorithm processor communicate value relay value received others allows nonfaulty processor infer value processor value inferred nonfaulty processor must processor private value value inferred faulty one must consistent corresponding value inferred nonfaulty processorit shown problem solvable n  +  number faulty processor n total number also shown faulty processor refuse pas information cannot falsely relay information problem solvable arbitrary n    weaker assumption approximated practice using cryptographic method
1980,sometime sometimes never - temporal logic program,pnueli  recently introduced idea using temporal logic  logical basis proving correctness property concurrent program permitted elegant unifying formulation previous proof method paper attempt clarify logical foundation application temporal logic concurrent program also clarify relation concurrency nondeterminism identify problem researchin paper consider logic containing temporal operator henceforth  eventually  define semantics temporal logic term underlying model abstract fundamental concept common almost model computation used concerned mainly semantics temporal logic discus detail actual rule deducing theoremswe describe two different temporal logic reasoning computational model formula appear logic interpreted differently two interpretation correspond two different way viewing time continually branching set possibility single linear sequence actual event temporal concept sometime never  equivalent theory linear time theory branching time -- hence title argue logic linear time better reasoning concurrent program logic branching time better reasoning nondeterministic programsthe logic linear time used pnueli  logic branching time seems one used computer scientist reasoning temporal concept found cause confusion among colleague one goal clarify formal foundation pnuelis workthe following section give intuitive discussion temporal logic section  formally defines semantics two temporal logic section  prove two temporal logic equivalent discus difference section  discus problem validity completeness temporal logic section  show important property computational model cannot expressed temporal operator henceforth eventually define general operator
1979,proof correctness calendar program,formal specification given simple calendar program derivation proof correctness program sketched specification easy understand correctness manifest human
1979,make multiprocessor computer correctly executes multiprocess program,many large sequential computer execute operation different order specified program correct execution achieved  produced would produced executing program step order multiprocessor computer correct execution processor guarantee correct execution entire program additional condition given guarantee computer correctly executes multiprocess program
1979,new approach proving correctness multiprocess program,new nonassertional approach proving multiprocess program correctness described proving correctness new algorithm solve mutual exclusion problem algorithm improved version bakery algorithm specified proved correct without decomposed indivisible atomic operation allows two different implementation conventional nondistributed system moreover approach provides sufficiently general specification algorithm allow nontrivial implementation distributed system well
1978,time clock ordering event distributed system,concept one event happening another distributed system examined shown define partial ordering event distributed algorithm given synchronizing system logical clock used totally order event use total ordering illustrated method solving synchronization problem algorithm specialized synchronizing physical clock bound derived far synchrony clock become
1978,on-the-fly garbage collection exercise cooperation,example cooperation sequential process little mutual interference despite frequent manipulation large shared data space technique developed allows nearly activity needed garbage detection collection performed additional processor operating concurrently processor devoted computation proper exclusion synchronization constraint kept weak could achieved severe complexity engendered illustrated
1978,implementation reliable distributed multiprocess system,method described implementing system network process continues function properly despite failure malfunction individual process communication arc “malfunction” mean something incorrectly “failure” mean nothing system defined term sequential “user machine” precise correctness condition implementation user machine given algorithm implement user machine absence malfunctioning rigorous proof correctness given network three process perfect clock generalization arbitrary network process imperfect clock described briefly indicated malfunctioning handled adding redundant checking implementation including error detection correction mechanism user machine
1978,specification proof correctness interactive program,method specifying interactive program production rule described floyd-hoare assertional method modified permit one prove program correctly implement specification program accept format typed input formally specified implementation teco program proved correct
1977,concurrent reading writing,problem sharing data among asynchronous process considered assumed one process time modify data concurrent reading writing permitted two general theorem proved algorithm presented illustrate use include solution general problem read repeated might obtained incorrect result two technique transmitting message process solution assume synchronizing mechanism data written one process read process
1977,proving correctness multiprocess program,inductive assertion method generalized permit formal machine-verifiable proof correctness multiprocess program individual process represented ordinary flowchart special synchronization mechanism assumed method applied large class multiprocess program correctness proof designed together program hierarchical process stepwise refinement making method practical larger program resulting proof tend natural formalization informal proof used
1976,synchronization independent process,paper considers problem programming multiple process system continues operate despite failure individual process powerful synchronizing primitive defined used solve sample problem algorithm given implement primitive weak assumption nature interprocess communication careful informal proof correctness given
1975,multiple byte processing full-word instruction,method described allows parallel processing packed data item using ordinary full-word computer instruction even though processing requires operation whose execution contingent upon value datum provides useful technique processing small data item alphanumeric character
1974,parallel execution loop,method developed parallel execution different iteration loop asynchronous multiprocessor computer array computer considered practical application design compiler computer discussed
1974,new solution dijkstras concurrent programming problem,simple solution mutual exclusion problem presented allows system continue operate despite failure individual component
1974,hyperplane method array computer,technique described implementing hyperplane method array computer limited form memory-processor interconnection illiac iv new pipelined hyperplane method introduced useful compiling convergent iterative computation computation programmed non-deterministic end loop test
