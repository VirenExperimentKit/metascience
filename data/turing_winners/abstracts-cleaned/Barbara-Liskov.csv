2019,cross-chain deal adversarial commerce,modern distributed data management system face new challenge autonomous mutually-distrusting party cooperate safely effectively addressing challenge brings question familiar classical distributed system combine multiple step single atomic action recover failure synchronize concurrent access data nevertheless issue requires rethinking participant autonomous potentially adversarialwe propose notion {cross-chain deal} new way structure complex distributed computation adversarial setting deal inspired classical atomic transaction necessarily different important way accommodate decentralized untrusting nature exchange describe novel safety liveness property along two alternative protocol implementing cross-chain deal system independent blockchain ledger one protocol based synchronous communication fully decentralized based eventually-synchronous communication necessarily requires stronger trust assumption
2019,keynote multicore programming,talk describes new approach implementing efficient concurrent program run multicore computer approach inspired work software transactional memory like work aim make easier write correct concurrent program use atomic transaction conventional stm track read writes memory word lead high overhead approach called sto  based data abstraction instead implementation transactionaware datatypes take advantage datatype semantics reduce bookkeeping limit false conficts implement efficient concurrency control way provide good performance correctness based modularity encapsulation
2016,type-aware transaction faster concurrent code,often possible improve concurrent system performance leveraging semantics datatypes build new software transactional memory  around observation conventional stm track read- write-sets memory word even simple operation generate large set stm call sto track abstract operation transactional datatypes instead part transactional commit protocol delegated datatypes implementation use datatype semantics new commit protocol feature reduce bookkeeping limit false conflict implement efficient concurrency control test idea stamp benchmark suite stm application prior work silo high-performance in-memory database observing large performance improvement system
2016,accepting blame safe tunneled exception,unhandled exception crash program compile-time check exception handled principle make software reliable designer recent language argued benefit statically checked exception worth cost introduce new statically checked exception mechanism address problem existing checked-exception mechanism particular interacts well higher-order function design pattern key insight whether exception treated checked exception property type rather context exception propagates statically checked exception tunnel code oblivious presence type system nevertheless check exception handled exception tunneled without accidentally caught expanding space exception identifier identify exception-handling context resulting mechanism expressive syntactically light implemented efficiently demonstrate expressiveness mechanism using significant codebases evaluate performance implemented new exception mechanism part new genus programming language mechanism could equally well applied programming language
2015,lightweight flexible object-oriented generic,support generic programming modern object-oriented programming language awkward lack desirable expressive power introduce expressive genericity mechanism add expressive power strengthens static checking remaining lightweight simple common use case like type class concept mechanism allows existing type model type constraint retroactively expressive power expose model named construct defined selected explicitly witness constraint common us genericity however type implicitly witness constraint without additional programmer effort model integrated object-oriented style feature like model generic model-dependent type model enrichment model multimethods constraint entailment model inheritance existential quantification extending expressive power object-oriented setting introduce new genericity feature show common generic programming idiom including current generic library expressed precisely concisely static semantics mechanism proof key decidability property found associated technical report
2015,perspective system language abstraction,barbara liskov examines evolution abstraction process software layer organize complex system abstraction separate service process invoked rpc others overlaid users process monitor many found way system programming language communication major issue
2014,fast database fast durability recovery multicore parallelism,multicore in-memory database modern machine support extraordinarily high transaction rate online transaction processing workload potential weakness however recovery crash failure classical technique checkpoint made efficient enough keep current system memory size transaction rate smart enough avoid additional contention starting efficient multicore database system show naive logging checkpoint make normal-case execution slower frequent disk synchronization allows u keep many workload modest reduction throughput design throughout parallelism logging checkpointing recovery result fast given appropriate hardware  -core system recover  gb key-value database  second >  gb tpc-c database  second
2014,modular efficient past state system berkeley db,application often need analyze past state predict trend support audit adding efficient nondisruptive support consistent past-state analysis requires after-the-fact modification data store significant challenge today system paper describes retro new system supporting consistent past state analysis berkeley db key novelty retro efficient yet simple robust implementation method imposing  worst-case overhead unlike prior approach retro protocol backed formal specification extend standard transaction protocol modular way requiring minimal data store modification 
2013,ifdb decentralized information flow control database,numerous sensitive database breached every year due bug application application typically handle data many user consequently access large amount confidential informationthis paper describes ifdb dbms secures database using decentralized information flow control  present query label model introduces new abstraction managing information flow relational database ifdb also address several challenge inherent bringing difc database including handle transaction integrity constraint without introducing covert channelswe implemented ifdb modifying postgresql extended two application environment php python provide difc platform ifdb caught several security bug prevented information leak two web application ported platform evaluation show ifdbs throughput good postgresql real web application  lower database benchmark based tpc-c
2013,speedy transaction multicore in-memory database,silo new in-memory database achieves excellent performance scalability modern multicore machine silo designed ground use system memory cache efficiently instance avoids centralized contention point including centralized transaction id assignment silo key contribution commit protocol based optimistic concurrency control provides serializability avoiding shared-memory writes record read though might seem complicate enforcement serial order correct logging recovery provided linking periodically-updated epoch commit protocol silo provides guarantee serializable database without unnecessary scalability bottleneck much additional latency silo achieves almost  transaction per second standard tpc-c workload mix -core machine well near-linear scalability considered per core several time higher previously reported 
2012,automatic reconfiguration large-scale reliable storage system,byzantine-fault-tolerant replication enhances availability reliability internet service store critical state preserve despite attack software error however existing byzantine-fault-tolerant storage system either assume static set replica limitation handle reconfigurations  problematic long-lived large-scale system system membership likely change system lifetime paper present complete solution dynamically changing system membership large-scale byzantine-fault-tolerant system present service track system membership periodically notifies system node membership change membership service run mostly automatically avoid human configuration error byzantine-fault-tolerant reconfigurable provides application sequence consistent view system membership demonstrate utility membership service using novel distributed hash table called dbqs provides atomic semantics even across change replica set dbqs interesting right storage algorithm extend existing byzantine quorum protocol handle change replica set differs previous dhts providing byzantine fault tolerance offering strong semantics implemented membership service dbqs  show approach work well practice membership service able manage large system cost change system membership low
2012,programming language - past achievement future challenge,design programming language compile-time run-time implementation closely related dependent underlying computational model many language designed many implementation strategy computational model explored since commercial world largely settled legacy language meanwhile capability computing system way used changed dramatically panelist summarize lesson learned language design also learned consider lesson applied myriad application domain architectural framework user need economic consideration exist today speculate future
2012,keynote presentation programming turing machine,turing provided basis modern computer science however huge gap turing machine kind application use today gap bridged software designing implementing large program difficult task main way keeping complexity software control make use abstraction modularity talk discus abstraction modularity used design large program concept supported modern programming language also discus support needed going forward
2012,abstraction usable information flow control aeolus,despite increasing importance protecting confidential data building secure software remains challenging ever paper describes aeolus new platform building secure distributed application aeolus us information flow control provide confidentiality data integrity differs previous information flow control system way believe make easier understand use aeolus us new simpler security model first combine standard principal-based scheme authority management thread-granularity information flow tracking principal hierarchy match way developer already reason authority access control coarse-grained information flow tracking eas task defining program security restriction addition aeolus provides number new mechanism  support common design pattern secure application design
2012,granola low-overhead distributed transaction coordination,paper present granola transaction coordination infrastructure building reliable distributed storage application granola provides strong consistency model significantly reducing transaction coordination overhead introduce specific support new type independent distributed transaction serialize locking overhead abort due write conflict granola us novel timestamp-based coordination mechanism order distributed transaction offering lower latency higher throughput previous system offer strong consistencyour experiment show granola low overhead scalable high throughput implemented tpc-c benchmark granola achieved  throughput platform using locking approach 
2010,mps mobile proactive secret sharing,article describes mps new way proactive secret sharing mps provides mobility group node holding share secret change resharing essential long-lived system mps additionally allows number tolerated faulty shareholder change secret moved system tolerate  corruption allows reconfiguration on-the-fly accommodate change environmentmpss includes efficient protocol intended used practice protocol optimized common case failure degradation failure modest mps contains step node accuse proposal made node show novel way handle accusation verity cannot known also present way produce accusation verified without releasing key node verifiable accusation improve performance mps useful primitive independent mps
2010,transactional consistency automatic management application data cache,distributed in-memory application data cache like memcached popular solution scaling database-driven web site system easy add existing deployment increase performance significantly reducing load database application server unfortunately cache integrate well database application cannot maintain transactional consistency across entire system violating isolation property underlying database leave application responsible locating data cache keeping date frequent source application complexity programming errorsaddressing problem introduce transactional cache txcache simple programming model txcache ensures data seen within transaction whether come cache database reflects slightly stale consistent snapshot database txcache make easy add caching application simply designating function cacheable automatically cache  invalidates cached data underlying database change experiment found adding txcache increased throughput web application  slightly le non-transactional cache showing consistency come price performance
2010,viewstamped replication byzantine fault tolerance,paper provides historical perspective two replication protocol intended practical deployment first viewstamped replication developed ’s allows group replica continue provide service spite certain number crash among second extension viewstamped replication allows group survive byzantine  failure protocol allow user execute general operation  developed programming methodology group mit
2010,power abstraction - invited lecture abstract,abstraction center much work computer science encompasses finding right interface system well finding effective design system implementation furthermore abstraction basis program construction allowing program built modular fashion talk discus abstraction mechanism use today came supported programming language possible area future research
2009,full-information lookup peer-to-peer overlay,peer-to-peer lookup scheme keep small amount routing state per node typically logarithmic number overlay node design assumes routing information member node must kept small bookkeeping required respond system membership change also small given aggressive membership dynamic expected consequence lookup high latency lookup requires contacting several node sequence paper question assumption presenting peer-to-peer routing algorithm small lookup path algorithm called ldquoonehoprdquo maintains full information system membership node routing single hop whenever information date small number hop otherwise show disseminate information membership change quickly enough node maintain accurate complete membership information also present analytic bandwidth requirement scheme demonstrate could deployed system hundred thousand node high churn validate analytic model using simulated environment real implementation  confirm onehop able achieve high efficiency usually reaching correct node directly  percent time
2009,tolerating latency replicated state machine client speculation,replicated state machine important widely-studied methodology tolerating wide range fault unfortunately replica distributed geographically maximum fault tolerance current replicated state machine protocol tend magnify effect high network latency caused geographic distribution paper examine use speculative execution client replicated service reduce impact network protocol latency first give design principle using client speculation replicated service generating early reply prioritizing throughput latency describe mechanism allows speculative client make new request replica-resolved speculation predicated writes implement detailed case study applies approach standard byzantine fault tolerant protocol  replicated nfs counter service client speculation trade  maximum throughput decrease effective latency light workload letting u speed run time single-client micro-benchmarks - client co-located primary macro-benchmark reduced latency give client speedup 
2008,mobile proactive secret sharing,mps new way proactive secret sharing asynchronous network mps provides mobility group node holding share secret change resharing essential long-lived system mps additionally allows number tolerated faulty shareholder change secret moved system tolerate  corruption allows reconfiguration fly accommodate change environment
2007,greedy virtual coordinate geographic routing,present new approach generating virtual coordinate produce usable coordinate quickly improves routing performance existing geographic routing algorithm starting set initial coordinate derived set elected perimeter node greedy embedding spring coordinate  detects possible dead end us modified spring relaxation algorithm incrementally adjust virtual coordinate increase convexity void virtual routing topology reduces probability packet end dead end greedy forwarding coordinate derived gspring achieve routing stretch  lower nogeo best existing algorithm deriving virtual euclidean coordinate geographic routing realistic network topology obstacle gspring coordinate achieves   better routing stretch actual physical coordinate
2007,tolerating byzantine fault transaction processing system using commit barrier scheduling,paper describes design implementation evaluation areplication scheme handle byzantine fault transaction processing database system scheme compare answer query update multiple replica unmodified off-the-shelf system provide single database byzantine fault tolerant scheme work replica homogeneous also allows heterogeneous replication replica come different vendor heterogeneous replica reduce impact bug security compromise implemented independently thus le likely suffer correlated failuresthe main challenge designing replication scheme transactionprocessing system ensuring different replica execute transaction equivalent serial order allowing high degreeof concurrency scheme meet goal using novel concurrency control protocol commit barrier scheduling  implemented cbs context replicated sql database hrdb tested unmodified production version several commercial open source database replica experiment show hrdb configuration tolerate one faulty replica modest performance overhead hrdb successfully mask several byzantine fault observed practice used find new bug mysql
2007,mapjax data structure abstraction asynchronous web application,current approach developing rich interactive web application relies asynchronous rpcs  fetch new data displayed client argue majority web application rpc-based model correct abstraction force programmer use awkward continuation-passing style programming expend much effort manually transferring data propose new programming model mapjax remedy problem mapjax provides abstraction data structure shared browser server based familiar primitive object lock thread mapjax also provides additional feature  help developer minimize response time application mapjax thus allows developer focus best-writing compelling applications-rather worrying system issue data transfer callback managementwe describe design implementation mapjax framework show use three prototypical web application mapping application email client search-autocomplete application evaluate performance application realistic internet latency bandwidth constraint find unoptimized mapjax version perform comparably standard ajax version mapjax performance optimization dramatically improve performance close factor  relative non-mapjax code case
2006,epichord parallelizing chord lookup algorithm reactive routing state management,epichord dht lookup algorithm demonstrates remove o-state-per-node restriction existing dht topology achieve significantly better lookup performance resilience using novel reactive routing state maintenance strategy amortizes network maintenance cost existing lookup issuing parallel query technique allows u design new class unlimited-state-per-node dhts able adapt naturally wide range lookup workload epichord able achieve o-hop lookup performance lookup-intensive workload least o-hop lookup performance churn-intensive workload even worst case reactive routing state maintenance strategy allows u maintain large amount routing state modest amount bandwidth parallel query serve reduce lookup latency allow u avoid costly lookup timeouts general epichord exploit information gleaned observing lookup traffic improve lookup performance sends network probe necessary node populate cache mainly observing network traffic cache entry flushed cache fixed lifetimeour simulation show approach reduce lookup latency path length factor  issuing three query asynchronously parallel per lookup furthermore show able achieve result minimal additional communication overhead number message generated per lookup corresponding sequential chord lookup algorithm range lookup work-loads also present novel token-passing stabilization scheme automatically detects repair global routing inconsistency
2006,modular software upgrade distributed system,upgrading software long-lived highly-available distributed system difficult possible upgrade node system since node may unavailable halting system upgrade unacceptable instead upgrade must happen gradually may long period time different node run different software version need communicate using incompatible protocol present methodology infrastructure make possible upgrade distributed system automatically limiting service disruption introduce new way reason correctness multi-version system also describe prototype implementation support automatic upgrade modest overhead
2006,tolerating byzantine faulty client quorum system,byzantine quorum system proposed work properly even f replica fail arbitrarily however system successful confronted byzantine faulty client paper present novel protocol provide atomic semantics despite byzantine client protocol prevent byzantine client interfering good client bad client cannot prevent good client completing read writes cannot cause good client see inconsistency addition also prevent bad client removed operation leaving behind bounded number writes could done behalf colluder protocol designed work asynchronous system like internet highly efficient require f + replica either two three phase writes read normally complete one phase require two phase matter bad client also present strong correctness condition system byzantine client limit done behalf bad client leave system furthermore prove protocol safe  live
2006,geographic routing without planarization,present new geographic routing algorithm greedy distributed spanning tree routing  find shorter route generates le maintenance traffic previous algorithm geographic routing potentially scale well face problem local dead end greedy forwarding fails existing geographic routing algorithm handle dead end planarizing node connectivity graph using right-hand rule route around resulting facesgdstr handle situation differently switching instead routing spanning tree reach point greedy forwarding make progress order choose direction tree likely make progress towards destination gdstr node maintains summary area covered subtree tree neighbor gdstr requires one tree correctness us two robustness give additional forwarding choiceour simulation show gdstr find shorter route geographic face routing algorithm gdstrs stretch  le best existing algorithm situation dead end common addition show gdstr requires order magnitude le bandwidth maintain tree cldp distributed planarization algorithm known work practical radio network
2006,hq replication hybrid quorum protocol byzantine fault tolerance,currently two approach providing byzantine-fault-tolerant state machine replication replica-based approach eg bft us communication replica agree proposed ordering request quorum-based approach q/u client contact replica directly optimistically execute operation approach shortcoming quadratic cost inter-replica communication unnecessary contention q/u requires large number replica performs poorly contentionwe present hq hybrid byzantine-fault-tolerant state machine replication protocol overcomes problem hq employ lightweight quorum-based protocol contention us bft resolve contention arises furthermore hq us f+ replica tolerate f fault providing optimal resilience node failureswe implemented prototype hq compare performance bft q/u analytically experimentally additionally work use new implementation bft designed scale number fault increase  show hq new implementation bft scale f increase additionally hybrid approach using bft handle contention work well
2005,path vector face routing geographic routing local face information,existing geographic routing algorithm depend planarization network connectivity graph correctness planarization process give rise well-defined notion face paper demonstrate improve routing performance storing small amount local face information node present protocol path vector exchange  maintains local face information node efficiently new geographic routing algorithm greedy path vector face routing  achieves better routing performance term path stretch hop stretch existing geographic routing algorithm exploiting available local face information simulation demonstrate gpvfr/pvex achieves significantly reduced path hop stretch greedy perimeter stateless routing  somewhat better performance greedy adaptive face routing  wide range network topology cost improved performance small amount additional storage bandwidth required algorithm comparable gpsr goafr+ quasi-static network
2005,high availability dhts erasure coding v replication,high availability peer-to-peer dhts requires data redundancy paper compare two popular redundancy scheme replication erasure coding unlike previous comparison take characteristic node comprise overlay account conclude case benefit coding limited may worth disadvantage
2005,byzantine client rendered harmless,original work quorum system assumed server fail benignly crashing omitting step recently researcher developed technique enable quorum system provide data availability presence arbitrary  fault  earlier work provides correct semantics despite server  failure also handle problem byzantine client paper describes first protocol handle problem caused byzantine client protocol ensure bad client cannot interfere good client bad client cannot prevent good client completing read writes cause good client see inconsistency addition bad client removed operation leave behind bounded number “lurking” writes could done behalf colluder
2004,efficient routing peer-to-peer overlay,current peer-to-peer lookup scheme keep small amount routing state per node typically logarithmic number overlay node design assumes routing information member node must kept small bookkeeping required respond system membership change also small given aggressive membership dynamic expected consequence lookup high latency lookup requires contacting several node sequencein paper question assumption presenting two peer-to-peer routing algorithm small lookup path first present one-hop routing scheme show disseminate information membership change quickly enough node maintain accurate routing table complete membership information also deduce analytic bandwidth requirement scheme demonstrate feasibilitywe also propose two-hop routing scheme large scale system million node bandwidth requirement one-hop routing become large scheme keep xed fraction total routing state node chosen rst hop low latency thus additional delay smallwe validate analytic model using simulation  show algorithm maintain routing information su ciently up-to-date large fraction  query succeed without re-routed
2004,timeline high performance archive distributed object store,paper describes timeline efficient archive service distributed storage system timeline allows user take snapshot demand archive stored online easily accessible user enables time travel user run computation earlier system statearchiving challenging storage distributed particular key issue provide consistent snapshot yet avoid stopping user access stored state snapshot taken paper defines property archive service ought provide describes implementation approach provides desired property yet also efficient timeline designed provide snapshot distributed persistent object store however property implementation approach apply file system database welltimeline implemented present  experiment evaluate performance experiment show computation past run well archive store nearby eg lan connected high speed link  also show taking snapshot negligible impact cost concurrently running computation regardless archived data stored
2004,brief announcement reconfigurable byzantine-fault-tolerant atomic memory,quorum system valuable tool building highly available replicated data service traditionally quorum system assumed server fail benignly ie crashing omitting step recently reiter malkhi extended quorum system provide data availability presence arbitrary  fault  one limitation standard byzantine fault tolerance technique quorum-based otherwise assume fixed set server provide data service throughout entire system lifetime assumption problematic since long-lived deployment machine may added removed system paper address limitation presenting algorithm reconfigurable byzantine quorum system algorithm ensures atomicity asynchronous network despite byzantine failure server crash failure client reconfigurations
2004,transactional file system fast,transaction ensure simple correct handling concurrency failure often considered expensive use file system paper argues performance barrier running transaction present simple mechanism substantially lower cost read-only transaction  approach inexpensive requires modest additional storage storage cheap cause read-only transaction run slightly past guarantee nevertheless see consistent state
2003,base using abstraction improve fault tolerance,software error major cause outage increasingly exploited malicious attack byzantine fault tolerance allows replicated system mask software error expensive deploy paper describes replication technique base us abstraction reduce cost byzantine fault tolerance improve ability mask software error base reduces cost enables reuse off-the-shelf service implementation improves availability replica repaired periodically using abstract view state stored correct replica replica run distinct nondeterministic service implementation reduces probability common mode failure built nfs service replica run different off-the-shelf file system implementation object-oriented database replica ran nondeterministic implementation example suggest technique used practice---in case implementation required modest amount new code performance  indicate replicated service perform comparably implementation reuse
2003,one hop lookup peer-to-peer overlay,current peer-to-peer lookup algorithm designed assumption routing information member node must kept small bookkeeping required respond system membership change also small paper show assumption unnecessary present technique maintains complete routing table node technique able handle frequent membership change scale large system million node resulting peer-to-peer system robust route lookup query one hop thus enabling application cannot tolerate delay multi-hop routing
2003,scheduling simulation upgrade distributed system,upgrading software long-lived distributed system difficult possible upgrade node system since node may halting system upgrade unacceptable mean different node may running different software version yet need communicate even though version may fully compatible present methodology infrastructure address challenge make possible upgrade distributed system automatically limiting service disruption
2003,lazy modular upgrade persistent object store,persistent object store require way automatically upgrade persistent object change code storage representation automatic upgrade challenge system upgrade must performed way efficient space time stop application access store addition however approach must modular must allow programmer reason locally correctness upgrade similar way would reason regular code paper provides solution problemsthe paper first defines upgrade modularity condition upgrade system must satisfy support local reasoning upgrade paper describes new approach executing upgrade efficiently satisfying upgrade modularity condition approach exploit object encapsulation property novel way paper also describes prototype implementation show upgrade system imposes small overhead application performance
2003,ownership type object encapsulation,ownership type provide statically enforceable way specifying object encapsulation enable local reasoning program correctness object-oriented language however type system enforces strict object encapsulation constraining allow efficient implementation important construct like iterators paper argues right way solve problem allow object class defined module privileged access others representation show inner class approach allows programmer express construct like iterators yet support local reasoning correctness class class inner class together reasoned module paper also sketch use variant ownership type enable efficient software upgrade persistent object store
2002,practical byzantine fault tolerance proactive recovery,growing reliance online service accessible internet demand highly available system provide correct service without interruption software bug operator mistake malicious attack major cause service interruption cause arbitrary behavior byzantine fault article describes new replication algorithm bft used build highly available system tolerate byzantine fault bft used practice implement real service performs well safe asynchronous environment internet incorporates mechanism defend byzantine-faulty client recovers replica proactively recovery mechanism allows algorithm tolerate number fault lifetime system provided fewer / replica become faulty within small window vulnerability bft implemented generic program library simple interface used library implement first byzantine-fault-tolerant nfs file system bfs bft library bfs perform well library incorporates several important optimization important use symmetric cryptography authenticate message performance  show bfs performs  faster  slower production implementation nfs protocol replicated support claim bft library used build practical system tolerate byzantine fault
2002,design robust peer-to-peer system,peer-to-peer  overlay network recently become one hottest topic o research network bring promise harnessing idle storage network resource client machine voluntarily join system self-configuration automatic load balancing censorship resistance extremely good scalability due use symmetric algorithm however use unreliable client machine lead two defect system precludes use number application storage inherently unreliable lookup algorithm long latency paper propose design robust peer-to-peer storage service composed client node server node dedicated running peer-to-peer application argue system overcomes defect peer-to-peer system retaining nice property exception utilizing spare resource client machine system capable surviving arbitrary failure node  expect perform scale well even wide-area network
2001,byzantine fault tolerance fast,byzantine fault tolerance important used implement highly-available system tolerate arbitrary behavior faulty component present detailed performance evaluation bft state-machine replication algorithm tolerates byzantine fault asynchronous system  contradict common belief byzantine fault tolerance slow used practice bft performs well used implement real system implemented replicated nfs file system using bft performs  faster  slower production implementation nfs protocol fault-tolerant
2001,using abstraction improve fault tolerance,software error major cause outage increasingly exploited malicious attack byzantine fault tolerance allows replicated system mask software error expensive deploy paper describes replication technique bfta us abstraction reduce cost byzantine fault tolerance improve ability mask software error bfta reduces cost enables reuse off-the-shelf service implementation improves availability replica repaired periodically using abstract view state stored correct replica replica run distinct non-deterministic service implementation reduces probability common mode failure built nfs service allows replica run different operating system example suggests bfta used practice replicated file system required modest amount new code preliminary performance  indicate performs comparably off-the-shelf implementation wrap
2000,protecting privacy using decentralized label model,stronger protection needed confidentiality integrity data program containing untrusted code rule rather exception information flow control allows enforcement end-to-end security policy difficult put practice article describes decentralized label model new label model control information flow system mutual distrust decentralized authority model improves existing multilevel security model allowing user declassify information decentralized way improving support fine-grained data sharing support static program analysis information flow program certified permit acceptable information flow largely avoiding overhead run-time checking article introduces language jif extension java provides static checking information flow using decentralized label model
2000,generalized isolation level definition,commercial database support different isolation level allow programmer trade consistency potential gain performance isolation level defined current ansi standard definition ambiguous revised definition proposed correct problem constrained since allow pessimistic  implementation paper present new specification ansi level specification portable apply locking implementation also optimistic multi-version concurrency control scheme furthermore unlike earlier definition new specification handle predicate correct flexible manner level
2000,proactive recovery byzantine-fault-tolerant system,paper describes asynchronous state-machine replication system tolerates byzantine fault caused malicious attack software error system first recover byzantine-faulty replica proactively performs well us symmetric rather public-key cryptography authentication recovery mechanism allows u tolerate number fault lifetime system provided fewer / replica become faulty within window vulnerability small normal condition window may increase denial-of-service attack detect respond attack paper present  experiment showing overall performance good even small window vulnerability little impact service latency
1999,providing persistent object distributed system,thor persistent object store provides powerful programming model thor ensures persistent object accessed calling method support atomic transaction result system allows application share object safely across space timethe paper describes thor implementation able support powerful model yet achieve good performance even wide-area large-scale distributed environment describes technique used thor meet challenge providing good performance spite need manage large number small object addition paper put performance thor perspective showing substantially outperforms system based onmemorymapped file even though system provides much le functionality thor
1999,practical byzantine fault tolerance,paper describes new replication algorithm able tolerate byzantine fault believe byzantine-fault-tolerant algorithm increasingly important future malicious attack software error increasingly common cause faulty node exhibit arbitrary behavior whereas previous algorithm assumed synchronous system slow used practice algorithm described paper practical work asynchronous environment like internet incorporates several important optimization improve response time previous algorithm order magnitude implemented byzantine-fault-tolerant nfs service using algorithm measured performance  show service  slower standard unreplicated nfs
1998,complete safe information flow decentralized label,growing use mobile code downloaded application servlets increased interest robust mechanism ensuring privacy secrecy information flow control intended directly address privacy secrecy concern information flow model restrictive widely used decentralized label model new information flow model extends traditional model per-principal information flow policy also permit safe form declassification paper extends new model making flexible expressive define new formal semantics decentralized label corresponding new rule relabeling data sound complete also show extension preserve ability statically check information flow
1997,collecting cyclic distributed garbage controlled migration,distributed system large number node use internode reference counting timely fault-tolerant garbage collection however fails collect cyclic garbage distributed across node one fix migrate object garbage cycle single node collected tracing-based local collector existing proposal based technique practical problem due unnecessary migration object propose scheme avoids migration live object batch object avoid cascade migration message short-cuts migration path avoid multiple migration use simple estimate detect object highly likely cyclic garbage select node object migrated scheme collect distributed cyclic garbage low overhead preserve decentralized fault-tolerant nature distributed reference counting migration
1997,fragment reconstruction providing global cache coherence transactional storage system,cooperative caching promising technique avoid increasingly formidable disk bottleneck problem distributed storage system reduces number disk access servicing client cache miss cache client however existing cooperative caching technique provide adequate support fine grained sharing describe new storage system architecture split caching new cache coherence protocol fragment reconstruction combine cooperative caching efficient support fine grained sharing transaction also present  performance study show scheme introduces little overhead basic cooperative caching mechanism provides better performance fine grained sharing
1997,lazy consistency using loosely synchronized clock,paper describes new schemefor guaranteeing transaction client/server system observe consistent state running scheme presented conjunction optimistic concurrency control algorithm could also used prevent read-only transaction conflicting read/write transaction multi-version system scheme lazy consistency provides running transaction also way generates consistency information paper present  simulation experiment showing cost scheme negligible scheme us multipart timestamps inform node information need know today utility scheme limited timestamp size proportional system size therefore scheme scale large system show solve problem multipart timestamps based real rather logical clock assume clock system loosely synchronized clock allow u keep multipart timestamps small minimal impact performance remove old information likely known retaining recent information performance correctness affected clock get synch
1997,collecting distributed garbage cycle back tracing,system store object large number site require fault-tolerant timely garbage collection popular technique trace site independently using inter-site reference root however fails collect cyclic garbage spread across site present algorithm collect cyclic garbage involving site containing algorithm based findingobjects highly likely cyclic garbage tracing backward check reachable root present efficient technique make conducting trace practical algorithm collect distributed cyclic garbage safe presence concurrent mutation low space time overhead
1997,parameterized type java,java offer real possibility program written type-safe language however java broadly useful need additional expressive power paper extends java one area power needed support parametric polymorphism allows definition implementation generic abstraction discus rationale design decision impact extension part java including array class library also describe optional extension java virtual machine allow parameterized bytecodes verify efficiently extended java bytecode interpreter provide good performance parameterized code execution speed code size without slowing non-parameterized code
1997,partitioned garbage collection large object store,present new technique efficient garbage collection large persistent object store store divided partition collected independently using information inter-partition reference information maintained disk recovered crash use new technique organize update information avoiding disk access also present new global marking scheme collect cyclic garbage across partition global marking piggybacked partitioned collection result efficient scheme preserve localized nature partitioned collection yet able collect garbage implemented part garbage collection responsible maintaining information inter-partition reference present performance study evaluate work  show technique result substantial saving usage disk memory
1997,hac hybrid adaptive caching distributed storage system,paper present hac novel technique managing client cache distributed persistent object storage system hac hybrid page object caching combine virtue avoiding disadvantage achieves low miss penalty page-caching system able perform well even locality poor since discard page retaining hot object realizes potentially lower miss rate object-caching system yet avoids problem fragmentation high overhead furthermore hac adaptive locality good behaves like page-caching system locality poor behaves like object-caching system able adjust amount cache space devoted page dynamically space cache used way best match need application paper also present  experiment indicate hac outperforms object storage system across wide range cache size workload performs substantially better expected workload low moderate locality thus show hybrid adaptive approach cache management technique choice distributed persistent object system
1997,decentralized model information flow control,paper present new model controlling information flow system mutual distrust decentralized authority model allows user share information distrusted code  yet still control code disseminates shared information others model improves existing multilevel security model allowing user declassify information decentralized way improving support fine-graineddata sharing paper also show static program analysis used certify proper information flo w model avoid run-time information flow check
1996,type-safe heterogeneous sharing fast,safe sharing desirable feature object oriented database protects valuable database object program error application code especially desirable heterogeneous environment application written various programming language many unsafe feature however safe sharing without potential performance cost paper explores cost describes number technique improve performance without sacri cing safety present  experiment evaluate e ectiveness  show technique promising allowing safe sharing achieved essentially performance penalty
1996,fragment reconstruction new cache coherence scheme split caching storage system,throw toy spoke-like graspable member differing length extend central hub approximately angle respect bulbous end toy balanced throwing readily catchable hub spoke-like member may represent head animal-like figure 
1996,safe efficient sharing persistent object thor,thor object-oriented database system designed use heterogeneous distributed environment provides highly-reliable highly-available persistent storage object support safe sharing object application written different programming languagessafe heterogeneous sharing long-lived object requires encapsulation system must guarantee application interact object invoking method although safety concern important object-oriented database forgo safety avoid paying associated performance coststhis paper give overview thor design implementation focus two area set thor apart object-oriented database first discus safe sharing technique ensuring also discus way improving application performance without sacrificing safety second describe approach cache management client machine including novel adaptive prefetching strategythe paper present performance  thor several oo benchmark traversal  show adaptive prefetching effective improving elapsed time traversal amount space used client cache  also show cost safe sharing negligible thus possible safety high performance
1996,scale transactional storage system,application future need support large number client require scalable storage system allow state shared reliably recent research distributed file system provides technology increase scalability storage system file system support sharing weak consistency guarantee support application require transactional consistency challenge provide scalable storage system support transactional applicationswe developing technology scalable transactional storage system approach combine scalable caching coherence technique developed serverless file system dsm system recovery technique developed traditional database position paper describes design rationale split caching new scalable memory management technique network-based transactional object storage system fragment reconstruction new coherence protocol support fine-grained sharing
1995,subtypes v clause constraining parametric polymorphism,object-oriented language provide support subtype polymorphism allows writing generic code work family related type also need however write code generic across type real family relationship satisfy need programming language must provide mechanism parametric polymorphism allowing type parameter routine type show support modular programming separate compilation must mechanism constraining actual parameter routine type describe simple powerful constraint mechanism compare constraint mechanism language term ease use semantic expressiveness also discus interaction subtype parametric polymorphism discus subtype relation exist instantiation parameterized type relation useful implemented efficiently illustrate point using example theta new object-oriented language describe time- space-efficient implementation parametric polymorphism used theta
1995,collecting cyclic distributed garbage using heuristic control migration,distributed system large number node use internode reference counting timely fault-tolerant garbage collection however fails collect cyclic garbage distributed across node one fix migrate object garbage cycle single node collected tracing-based local collector existing proposal based technique practical problem due unnecessary migration object propose scheme avoids migration live object batch object avoid cascade migration message short-cuts migration path avoid multiple migration use simple estimate detect object highly likely cyclic garbage select node object migrated scheme collect distributed cyclic garbage low overhead preserve decentralized fault-tolerant nature distributed reference counting migration
1995,efficient optimistic concurrency control using loosely synchronized clock,paper describes efficient optimistic concurrency control scheme use distributed database system object cached manipulated client machine persistent storage transactional support provided server scheme provides serializability external consistency committed transaction us loosely synchronized clock achieve global serialization store single version object avoids maintaining concurrency control information per-object basis instead track recent invalidation per-client basis approach low in-memory space overhead per-object disk overhead addition low space overhead scheme also performs well paper present simulation study compare scheme adaptive callback locking best concurrency control scheme client-server object-oriented database system studied date study show scheme outperforms adaptive callback locking low moderate contention workload scale better number client high contention workload optimism result high abort rate scheme presented first step toward hybrid scheme expect perform well across full range workload
1995,using modified object buffer improve write performance object-oriented database,research focus object database system organized collection client server server provide persistent storage object application run client machine interact server access modify persistent object server support many client therefore overall system performance heavily dependent efficiency storage management server 
1995,specification use defining subtypes,specification useful allow reasoning object without concern implementation type hierarchy useful allow type share common property designed family paper concerned interaction specification type hierarchy present way specifying type show extra information addition specification object method needed support reasoning also provide new way showing one type subtype another technique make use information type specification work even general computational environment possibly concurrent user share mutable object
1994,behavioral notion subtyping,use hierarchy important component object-oriented design hierarchy allows use type family higher level supertypes capture behavior subtypes common methodology effective necessary clear understanding subtypes supertypes related paper take position relationship ensure property proved supertype object also hold subtype object present two way defining subtype relation meet criterion easy programmer use subtype relation based specification sub- supertypes paper present way specifying type make convenient define subtype relation paper also discus ramification notion subtyping design type family
1994,reducing cross domain call overhead using batched future,many system operating system database important run client code separate protection domain cannot interfere correct operation system client communicate server making cross domain call expensive often costing substantially running call paper describes new mechanism called batched future transparently batch possibly interrelated client call batching make domain crossing happen le often thus substantially reducing cost describe mechanism implemented thor object-oriented database system present performance  showing benefit mechanism various benchmark
1994,fault-tolerant distributed garbage collection client-server object-oriented database,present scalable garbage collection scheme system store object multiple server client run transaction locally cached copy object first scheme provides fault tolerance system server recover failure retrieve information needed safe garbage collection client recover failure yet scheme able reclaim object referenced failed client scheme optimized reduce overhead common client operation provides fault tolerance work  client operation infrequent< >
1994,disconnected operation thor object-oriented database system,paper discus issaes raised providing disconnected operation thor object-ortented database system disconnected operation system pose new challenge small size obiects richness complexity interconnection huge number fact accessed within atomic transaction propose three technique address challenge  using database query language hoarding  using dependent commits tentatively com mit transaction disconnected client  using high-level semantic object avoidtransaction abort
1993,practical us synchronized clock distributed system,synchronized clock interesting used improve performance distributed system reducing communication since recently become reality distributed system use distributed algorithm received relatively little attention paper discus number distributed algorithm make use synchronized clock analyzes clock used algorithm
1993,reference remote mobile object thor,thor distributed object-oriented database object stored persistently highly available server called object repository or large thor system performance tuning system reconfiguration dictate object must able migrate among or paper describes two scheme object reference support object migration one using location-independent name location-dependent name paper analyzes performance two scheme concludes location-dependent name right choice system like thor want fast access object migrated
1993,new definition subtype relation,use hierarchy important component object-oriented design hierarchy allows use type family higher level supertypes capture behavior subtypes common methodology effective necessary clear understanding subtypes supertypes related paper present new definition subtype relation ensures property proved supertype object also hold subtype object also discus ramification definition design type family
1993,history clu,idea data abstraction significant impact development programming language programming methodology clu first implemented programming language provide direct linguistic support data abstraction paper provides history data abstraction clu clu contains number interesting influential feature including exception handling mechanism iterators parameterized type
1992,providing high availability using lazy replication,provide high availability service mail bulletin board data must replicated one way guarantee consistency replicated data force service operation occur order site approach expensive application weaker causal operation order preserve consistency providing better performance paper describes new way implementing causal operation technique also support two kind operation operation totally ordered respect one another operation totally ordered respect operation method performs well term response time operation-processing capacity amount stored state number size message better replication method based reliable multicast technique
1992,garbage collection distributed heap,practical fault-tolerant method reclaiming inaccessible object distributed heap presented algorithm general require homogeneous component reclaims inaccessible object timely fashion including reside inaccessible cycle allows computer contains part heap garbage collect independently according storage requirement using whatever algorithm chooses highly available service used store information intercomputer reference computer containing part heap communicate central service periodically using service overhead node minimized< >
1992,distributed object management thor,thor new object-oriented database management system  intended used heterogeneous distributed system allow program written di erent programming language share object convenient manner thor object persistent spite failure highly likely accessible whenever needed structured ect kind information interest user thor combine advantage object-oriented approach database system user store manipulate object capture semantics application also access object via query thor ongoing project paper snapshot describe rst design partial implementation design design primarily concerned issue related implementation oodbms distributed system
1992,efficient recovery harp,harp replicated unix file system accessible via vfs interface provides highly available reliable storage file guarantee file operation executed atomically spite concurrency failure replication enables harp safely trade disk access network communication thus provide good performance normal operation recovery author focus technique harp us achieve efficient recovery
1991,lazy replication exploiting semantics distributed service extended abstract,n/a
1991,replicated unic file system,n/a
1991,efficient at-most-once message based synchronized clock,paper describes new at-most-once message passing protocol provides guaranteed detection duplicate message even receiver state stored sender also discus use at-most-once message implement higher-level primitive at-once-remote procedure call sequenced bytestream protocol performance measurement indicate at-most-once rpcs provide cost le desirable form rpcs guarantee at-most-once execution method based assumption clock throughout system loosely synchronized modern clock synchronization protocol provide good bound clock skew high probability method depends bound performance correctness
1991,replication harp file system,paper describes design implementation harp file system harp replicated unix file system accessible via vfs interface provides highly available reliable storage file guarantee file operation executed atomically spite concurrency failure us novel variation primary copy replication technique provides good performance allows u trade disk access network communication harp intended used within file service distributed network current implementation accessed via nfs preliminary performance  indicate harp provides equal better response time system capacity unreplicated implementation nfs us unix file directly
1990,lazy replication exploiting semantics distributed service,need high availability distributed service requires data managed service replicated major challenge managing replicated data ensuring consistency among copy data one way guarantee consistency force operation take effect order site approach however often expensive novel method designed constructing logically centralized highly available service used distributed environment method intended service appear client logically centralized spite service distributed implementation observable behavior single copy semantics application implemented service taken account order weaken implementation constraint thus improve response time increase availability constraint relaxed long client cannot observe difference illustrate semantics used relax constraint operation order electronic mail system considered implementation distributed service based partially ordered operation discussed
1990,system implementation - introduction,n/a
1990,highly available object repository use heterogeneous distributed system,n/a
1990,replicated unix file system,implementation replicated unix file system use via nfs protocol reported replication method intended support following goal used via nfs system provide semantics unreplicated nfs server usable whatever nfs client code exists client machine system depend proprietary information system continue provide service even one replica crashed inaccessible two copy file system perform reliably single unreplicated nfs server system provide response time comparable provided single nfs server particular delay observed client read write greater single server system organization replication method performance unix issue discussed
1989,design fault-tolerant distributed implementation linda,distributed implementation parallel system interest provide economical source concurrency scaled easily match need particular computation fault-tolerant design described implementation linda parallel programming system process share memory called tuple space fault tolerance achieved replication one copy tuple space replica provide information others accessible due failure replication technique take advantage semantics linda process encounter little delay accessing tuple space addition providing efficient implementation linda study extends work replication technique showing done semantics taken account< >
1989,atomic garbage collection managing stable heap,modern database system use transaction achieve high degree fault-tolerance many modern programming language system provide garbage collected heap storage free programmer job explicitly deallocating storage paper describe integrated garbage collection recovery algorithm managing stable heap accessible object survive system crash medium failure garbage collector typically move modifies object lead problem heap stable system crash start collection enough reorganized heap reach disk leave disk inconsistent state furthermore collection coordinated recovery system present collection algorithm recovery system solves problem
1988,technique constructing highly available service,paper describes general method constructing highly available service use distributed system give specific implementation method prof implementation correct service consists replica reside several different location network present client consistent view state view may contain old information client indicate recent information must method used application satisfying certain semantic constraint application use method performs better replication technique
1988,distributed programming argus,argus programming language system developed support implementation execution distributed program provides mechanism help programmer cope special problem arise distributed program network partition crash remote node
1988,promise linguistic support efficient asynchronous procedure call distributed system,paper deal integration efficient asynchronous remote procedure call mechanism programming language describes new data type called promise designed support asynchronous call promise allow caller run parallel call pick  call including exception raise convenient type-safe manner paper also discus efficient composition sequence asynchronous call different location network
1988,viewstamped replication general primary copy,one potential benefit distributed system use providing highly-available service likely usable needed availabilay achieved replication inore one copy information service continues usable even copy inaccessible example crash computer copy stored paper present new replication algorithm desirable performance property approach based primary copy technique computation run primary notifies backup done primary crash backup reorganized one backup becomes new primary method work general network node crash partition replication cause little delay user computation little information lost reorganization use special kind timestamp called viewstamp detect lost information
1987,implementation argus,argus programming language system developed support construction execution distributed program paper describes implementation argus particular emphasis way implement atomic action argus differs implemented system paper also discus performance argus cost action quite reasonable indicating action system like argus practical
1986,specification distributed program,paper discus informal specification distributed program program reside node connected network program often performance requirement high availability concurrency make difficult specify behavior requirement often effect functional behavior program forcing designer change initial expectation paper show give user-oriented specification functional behavior program requirement propose structure specification distinguishes expected desirable effect undesirable one believe distinction important one user implementers system make specification easier understand illustrate approach giving example specification several distributed program described literature
1986,highly-available distributed service fault-tolerant distributed garbage collection,paper describes two technique loosely related first method constructing highly available service use distributed system service present client consistent view state view may contain old information client indicate recent information must method used application property interest stable property becomes true remains true forever paper also describes fault-tolerant garbage collection method distributed heap method practical efficient computer contains part heap local garbage collection independently using whatever algorithm chooses without needing communicate computer contain part heap highly available central service used store information inter-computer reference
1986,limitation synchronous communication static process structure language distributed computing,module distributed program active communicating entity language distributed program must choose set communication primitive structure process paper examines one possible choice synchronous communication primitive  combination module encompass fixed number process  analysis concurrency requirement distributed program suggests combination imposes complex indirect solution common problem thus poorly suited application distributed program concurrency important provide adequate expressive power language distributed program abandon either synchronous communication primitive static process structure
1985,implementation resilient atomic data type,major issue many application preserve consistency data presence concurrency hardware failure suggest addressing problem implementing application term abstract data type two property object atomic  resilient  define mean abstract data type atomic resilient also discus issue arise implementing type describe particular linguistic mechanism provided argus programming language
1985,reliable object storage support atomic action,maintaining consistency online long-lived distributed data presence hardware failure necessity many application argus programming language system currently development miit provides user linguistic construct implement application argus permit user identify certain data object resilient failure set resilient object vary dynamically program run resilient object modified automatically copied argus implementation stable storage storage high probability lose information resilient object therefore guaranteed high probability survive medium failure node crash paper present method implementing resilient object using log-based mechanism organize information stable storage particular interest handling dynamic user-controlled set resilient object use early prepare minimize delay user activity
1984,argus language system,n/a
1983,specification implementation resilient atomic data type,major issue many application preserve consistency data presence concurrency hardware failure suggest addressing problem implementing application term abstract data type two property object atomic  resilient  define mean abstract data type atomic resilient also discus issue arise implementing type describe particular linguistic mechanism provided argus programming language
1983,guardian action linguistic support robust distributed program,overview presented integrated programming language system designed support construction maintenance distributed program program module reside execute communicating geographically distinct node language intended support class application concerned manipulation preservation long-lived on-line distributed data language address writing robust program survive hardware failure without loss distributed information provide highly concurrent access information preserving consistency several new linguistic construct provided among atomic action module called guardian survive node failure
1983,issue process communication structure distributed program,many proposal made structuring distributed program paper look one proposal one embedded argus programming language system paper provides discussion decision made two major area process structure communication compare chosen structure alternative paper emphasizes rationale decision issue must considered making decision 
1982,value transmission method abstract data type, data type proved useful technique structuring system large system sometimes useful different region system use different representation abstract data value technique described communicating abstract value region method developed use constructing distributed system region exist different computer value communicated network method defines call-by-value semantics also useful nondistributed system whenever call value desired semantics important example use repository file system storing long-lived data
1982,linguistic support distributed program,technological advance made possible construct system collection computer connected network present however little support construction execution software run system research concern development integrated language/system whose goal provide needed support paper discus number issue must addressed language major focus work paper support construction robust software survives node network medium failure
1981,report workshop fundamental issue distributed computing fallbrook california december 1980,n/a
1979,exception handling clu,program reliable fault tolerant program module must defined behave reasonably wide variety circumstance exception handling mechanism support construction module paper descnbes exception handling mechanism developed part clu programming language clu mechanism based simple model exception handling lead well-structured program engineered ease use enhanced program readability paper discus various model exception handulng syntax semantics clu mechanism method implementing mechanism integrating debugging production environment
1979,modular program construction using abstraction,programming methodology presented modular decomposition based recognition useful abstraction two kind abstraction used procedural abstraction data abstraction decomposition carried design phase take place implementation begin design documented graph showing relationship among abstraction  specification abstractionthe methodology illustrated mean fairly large example design simplified text formatter implementation text formatter included appendix
1979,primitive distributed computing,distributed program run node network technologically feasible well-suited need organization however knowledge construct program limited paper discus primitive support construction distributed program attention focussed primitive two major area modularity communication issue underlying selection primitive discussed especially issue providing robust behavior various candidate analyzed primitive ultimately provided part programming language used experiment construction distributed program
1978,language extension expressing constraint data access,controlled sharing information needed desirable many application supported operating system access control mechanism paper show extend programming language provide controlled sharing extension permit expression access constraint shared data access constraint apply simple object object component larger object bank account record bank data base constraint stated declaratively enforced static checking similar type checking approach used extend strongly-typed language particularly suitable extending language support notion abstract data type
1978,aspect implementing clu,linguistic mechanism used clu support  structured exception handling  iteration abstract object  parameterized abstraction briefly reviewed method realizing mechanism described mechanism discussed support feature likely included programming language implementation method applicable wide range language
1978,crossfertilization dbms research discipline computer science panel discussion,dbms research moving towards formalization problem solution dbms researcher learn use technique developed formalizing concept operating system artificial intelligence adaptive system pattern recognition programming language panel member currently involved research oriented towards cross fertilization dbms various discipline computer science panel try identify commonality problem approach solution hope discussion stimulate research database area fully exploit learned elsewhere
1977,abstraction mechanism clu,clu new programming language designed support use abstraction program construction work programming methodology led realization three kind abstractions—procedural control especially data abstractions—are useful programming process procedural abstraction supported well conventional language procedure subroutine clu provides addition procedure novel linguistic mechanism support use data control abstraction paper provides introduction abstraction mechanism clu mean programming example utility three kind abstraction program construction illustrated shown clu program may written use implement abstraction clu library permit incremental program development complete type checking performed compile time also discussed
1976,language extension controlling access shared data,controlled sharing information needed many application access-control mechanism exist operating system provide controlled sharing however programming language currently support facility paper illustrates access-control facility could incorporated programming language mechanism described suitable incorporation object-oriented language permit definition abstract data type defmed way enables compile-time checking access control
1976,language extension controlling access shared data abstract,controlled sharing information needed many application access control mechanism exist operating system provide controlled sharing however programming language currently support facility paper illustrates access control facility could incorporated programming language mechanism described suitable incorporation object-oriented language permit definition abstract data type defined way enables compile time checking access control
1975,specification technique data abstraction,discus importance formal specification survey number promising specification technique role formal specification proof program correctness programming methodology leading program correct construction explained criterion established evaluating practical potential specification technique importance providing specification right level abstraction discussed particularly interesting class specification technique used construct specification data abstraction identified number specification technique describing data abstraction surveyed evaluated respect criterion
1975,data type program correctness,one important current software issue reliability accordingly major criterion programming language design must language contribute production reliable program although important aspect software reliability  fundamental program correctness program supposed language contribute goal enhancing provability program paper discus impact user-defined data type program provability
1974,programming abstract data type,motivation behind work very-high-level language ease programming task providing programmer language containing primitive abstraction suitable problem area programmer able spend effort right place concentrate solving problem resulting program reliable result clearly worthwhile goalunfortunately difficult designer select advance abstraction user language might need language used likely used solve problem designer envision abstraction embedded language sufficientthis paper present approach allows set built-in abstraction augmented need new data abstraction discovered approach handling abstraction outgrowth work designing language structured programming relevant aspect language described example use definition abstraction given
1972,design venus operating system,venus operating system experimental multiprogramming system support five six concurrent user small computer system produced test effect machine architecture complexity software system defined combination microprograms software microprogram defines machine unusual architectural feature software exploit feature define operating system simply possible paper development system described particular emphasis principle guided design
1972,design methodology reliable software system,user computer system aware current system unreliable error software component system designer implementers recognize need reliable software unable produce example operating system os/ released public hundred error still
