2018,verifying concurrent software using mover cspec,writing concurrent system software error-prone multiple process thread interleave many way easy forget subtle corner case paper introduces cspec framework formal verification concurrent software ensures corner case missed key challenge reduce number interleavings developer must consider cspec us mover type re-order commutative operation usually enough reason sequential execution rather possible interleavings cspec also make proof easier making modular using layer providing library reusable proof pattern evaluate cspec implemented proved correctness cmail simple concurrent maildir-like mail server speaks smtp pop  demonstrate cspecs mover pattern allow reasoning sophisticated concurrency style cmail
2015,perspective protection security,butler lampson trace long history protection mechanism spite security remains major problem considers isolation access control access policy information flow control cryptography trust assurance end people dislike inconvenience security cause
2013,machine learning framework programming example,learning program timely interesting challenge programming example  system attempt infer program input output example alone searching composition set base function show machine learning used speed seemingly hopeless search problem learning weight relate textual feature describing provided input-output example plausible sub-components program generic learning framework let u address problem beyond scope earlier pbe system experiment prototype implementation show learning improves search ranking variety text processing task found help forum
2013,colorful approach text processing example,text processing tedious error-prone even programmer remains one alluring target programming example examination real-world text processing task found help forum reveals many task beyond simple string manipulation involve latent hierarchical structureswe present step programming system processing structured semi-structured text example step user create manipulate hierarchical structure example between-subject user study fourteen computer scientist step compare favorably traditional programming
2012,computer model connect engage,every  year new wave thing computer around  began model event world  around  connect people  since  begun engage physical world non-trivial way  today sensor network like inrix traffic information system robot like roomba vacuum cleaner camera pick face even smile beginning year car drive glass overlay person looking name contact information telepresence system make business travel unnecessary application yet unimaginedall computer system built physical foundation hardware  intellectual foundation algorithm abstraction probability performance determined basic issue latency bandwidth availability complexity future deal uncertainty much better today many safety-critical hence much dependable
2012,computer model connect engage,every  year new wave thing computer  around  began model event world  around  connect people   since  begun engage physical world non-trivial way   today sensor network like inrix traffic information system robot like roomba vacuum cleaner camera pick face even smile beginning year car drive glass overlay person looking name contact information telepresence system make business travel unnecessary application yet unimaginedcomputer system built physical foundation hardware  intellectual foundation algorithm abstraction probability good system use basic method approximate incrementally change divide conquer latency bandwidth availability complexity determine performance future system deal uncertainty much better today many safety critical hence much dependable
2011,making untrusted code useful technical perspective,n/a
2009,privacy security - usable security get,computer bother much security still isnt secure user dont model security simple way keep important thing safe
2008,lazy speculative execution computer system,distinction lazy eager  evaluation studied programming language since algol call name way avoid unnecessary work deal gracefully infinite structure stream deeply integrated language notably haskell simulated many language wrapping lazy expression lambda le well studied role laziness opposite speculation computer system hardware software wide range technique understood application two idea laziness idea behindredo logging maintaining persistent state replicated state machine log represents current state evaluated failure bring replica onlinecopy-on-write scheme maintaining multiple version large slowly changing state usually database file systemwrite buffer writeback cache memory file system lazy updating main storerelaxed memory model eventual consistency replication scheme clipping region expose event graphic window systemscarry-save adder defer propagating carry clean result neededinfinity number  floating point operationsfutures  order execution  launch computation lazy consuming result dataflow generalizationformatting operator text editor apply property italic large region text attaching sequence function compute property function evaluated text need displayedstream processing database query unix pipe etc conceptually applies operator unbounded sequence data rearranges computation possible apply sequence operator data item turn speculation idea behindoptimistic concurrency control database recently transactional memoryprefetching memory file systemsbranch prediction speculative execution general modern cpusdata speculation work especially well data cached might updated concurrent process form optimistic concurrency controlexponential backoff scheme scheduling resource notably lan wifi classical ethernetall form caching speculate worth filling memory data hope used case usual insist laziness speculation strictly matter scheduling doesnt affect result computation improves performance sometimes however spec weakened example eventual consistency discus many example detail examine common differ factor govern effectiveness laziness speculation computer system
2004,computer security real world,computer today insecure security costly term user inconvenience foregone feature people unwilling pay price real-world security depends punishment lock hard even find network attacker much le punish basic element security authentication authorization auditing gold standard idea one principal speaking another key uniformly across internet
2003,trusted open platform,microsofts next-generation secure computing base extends personal computer offer mechanism let high-assurance software protect operating system device driver bios software running machine
2003,getting computer understand,n/a
2001,abcds paxos,explain consensus used implement replicated state machine general mechanism fault-tolerance describe abstract version lamports paxos algorithm asynchronous consensus derive byzantine classic disk version paxos abstract one show related discus safety liveness performance one
2000,revisiting paxos algorithm,paxos algorithm efficient highly fault-tolerant algorithm devised lamport reaching consensus distributed system although appears practical seems widely known understood paper contains new presentation paxos algorithm based formal decomposition several interacting component also contains correctness proof time performance fault-tolerance analysis formal framework used presentation algorithm provided clock general timed automaton  model clock gta provides systematic way describing timing-based system notion normal timing behavior necessarily always exhibit normal timing behavior
1999,ip lookup using multiway multicolumn search,ip address lookup becoming critical increasing routing table size speed traffic internet given set prefix ip address ip address lookup problem find longest matching prefix set paper show binary search adapted solving best-matching prefix problem next show improve performance best-matching prefix scheme using initial array indexed first x bit address describe take advantage cache line size multiway search six-way branching finally show extend binary search solution multiway search solution ipv database n prefix address length w naive binary search would take show reduce using multiple-column binary search measurement using practical  database  entry yield worst-case lookup time  n five time faster patricia trie scheme used bsd unix scheme attractive ipv small storage requirement  speed 
1998,processor high-performance personal computer,paper describes design goal micro- architecture implementation microprogrammed processor compact high performance personal computer computer support range high level language environment high bandwidth i/o device besides processor cache memory map main storage instruction fetch unit described paper processor shared among  microcoded task performing microcode context switch demand essentially overhead conditional branch done without lookahead delay microinstructions fairly tightly encoded use interesting variant control field sharing processor implement large number internal register hardware stack cyclic shifter/masker arithmetic/logic unit together external data path instruction fetching memory interface i/o compact pipe-lined organization machine  n microcycle execute simple macroinstruction one cycle available i/o bandwidth  mbits/sec entire machine including disk display network interface implemented approximately  msi component mostly ecl k processor  addition  storage module  k k ram  msi component total  mbytes several prototype currently running
1996,virtual infrastructure putting information infrastructure technology curve,present debate concerning national information infrastructure  focused primarily competition although competition important component nii one welcome argue inappropriate frame debate entirely term competition competition seen consequence fundamental development driving innovation within information industry namely adoption digital paradigm however digitization offer opportunity innovation go beyond competition hypothesize second wave digital revolution virtualization infrastructure adoption software perspective information device channel processed distributed paper offer vision would mean nii virtual infrastructure  take full advantage digital paradigm present taxonomy describing alternative infrastructure scenario show key property digital information favor competitive generic decoupled  infrastructure explore several technical issue including information appliance software mosaic overlapping distribution network brokerage function match supplier distributor customer treatment technical issue identify heterogeneity key challenge facing computer scientist offer suggestion area investigation might prove fruitful conclude discussion policy implication work particularly concerned policy foster innovation reducing barrier insertion new technology topic addressed include decoupling regulation information service regulation distribution dealing monopoly vertical integration publication interface specification
1996,analysis caching dependency,address problem dependency analysis caching context &lambda-calculus dependency &lambda-term  part &lambda-term contribute result evaluating introduce mechanism keeping track dependency discus use dependency caching
1996,build highly available system using consensus,lamport showed replicated deterministic state machine general way implement highly available system given consensus algorithm replica use agree input paxos algorithm fault-tolerant way get consensus without real-time guarantee general consensus expensive practical system reserve emergency use lease  computing paper explains general scheme efficient highly available computing give general method understanding concurrent fault-tolerant program derives paxos algorithm example method
1994,interconnecting computer architecture technology economics,modern computer system recursive structure processing storage element interconnected make larger elementsfunctional unit connected register on-chip cachemultiple processor cache connected main memoriescomputing node connected message-passing local area networklocal area network bridged form extended lannetworks connected wide-area internetall computer world exchanging electronic mailabove lowest level transistor gate essential character connection change surprisingly little nine order magnitude time space connection made node link important property band width latency connectivity availability cost switching basic mechanism connecting lot thing many way implement based multiplexing demultiplexing paper describes give many example also considers interaction among different level complex system
1993,authentification delegation smart-cards,authentication user distributed system pose special problem user lack ability encrypt decrypt problem arise user wish delegate authority node mutual authentication system today user forced trust node want use satisfactory design user carry smart-card sufficient computing power assist card provides encryption decryption capability authentication delegation authentication relatively straightforward powerful enough smartcard smart-card however practical reason protocol place demand smartcards smart-cards considered protocol subtle rely fairly complex trust relation principal system  paper discus range public-key smart-card protocol analyze assumption guarantee offer
1993,calculus access control distributed system,study concept protocol algorithm access control distributed system logical perspective account principal may come believe another principal making request either someone el behalf also provide logical language access control list theory deciding whether request granted
1993,correctness at-most-once message delivery protocol,paper address issue formal description verification communication protocol specifically present  project concerned proving correctness two different solution at-most-once message delivery problem two implementation well-known five-packet handshake protocol timing-based protocol developed network bounded message delay use operational automaton-based approach formal specification problem statement implementation plus intermediate level abstraction step-wise development specification implementation use simulation technique proving correctness project deal safety timing liveness property paper however concentrate safety timing property
1993,authentication tao operating system,describe design implementation security distributed system system application access security service narrow interface interface provides notion identity includes simple principal group role delegation new operating system component manages principal credential secure channel check credential according formal rule logic authentication implementation efficient enough support substantial user community
1993,new presumed commit optimization two phase commit,two phase commit  used coordinate commitment transaction distributed system standard pc optimization presumed abort variant us fewer message transaction aborted allows coordinator forget aborted transaction presumed commit variant pc us even fewer message coordinator must additional logging describe new form presumed commit reduces number log writes preserving reduction message bringing cost presumed abort penalty need retain small amount crash related information forever
1992,authentication distributed system theory practice,describe theory authentication system implement theory based notion principal “speaks for” relation principal simple principal either name communication channel compound principal express adopted role delegated authority theory show reason principal authority deducing principal speak authenticating channel one important application use theory explain many existing proposed security mechanism particular describe system built pass principal efficiently argument  remote procedure call handle public shared key encryption name lookup large name space group principal program loading delegation access control revocation
1992,on-line data compression log-structured file system,incorporated on-line data compression low level log-structured file system  block data meta-data compressed written disk decompressed read log-structuring overcomes problem allocation fragmentation variable-sized block observe compression factor ranging   using algorithm running   mbytes per second software decstation / system performance degraded percent normal activity  much factor  file system intensive operation  hardware compression device mesh well design chip already available operate speed exceeding disk transfer rate indicates hardware compression would remove performance degradation observed might well increase effective disk transfer rate beyond obtainable system without compression
1992,at-most-once message delivery case study algorithm verification,n/a
1991,authentication delegation smart-cards,authentication user distributed system pose special problem user lack ability encrypt decrypt problem arise user wish delegate authority node mutual authenticationin system today user forced trust node want use satisfactory design user carry smart-card sufficient computing power assist card provides encryption decryption capability authentication delegationauthentication relatively straightforward powerful enough smartcard smart-card however practical reason protocol place demand smartcards smart-cards considered protocol subtle rely fairly complex trust relation principal system  paper discus range public-key smart-card protocol analyze assumption guarantee offer
1988,pebble kernel language module abstract data type,small set construct simulate wide variety apparently distinct feature modern programming language using kernel language called pebble based typed lambda calculus binding declaration dependent type type compile time value show build module interface implementation abstract data type generic type recursive type union pebble concise operational semantics given inference rule
1986,designing global name service,name service map name individual organization facility set labeled property string basis resource location mail addressing authentication distributed computing system global name service described meant billion name distributed throughout world address problem high availability large size continuing evolution fault isolation lack global trust non-deterministic behavior service specified rather precisely allow wide range client server implementation
1986,current work authentication,working design authentication service distributed system design three goal fed met simultaneously previous design first service must able grow cover arbitrarily large physical area arbitrarily many administrative organization arbitrarily many user  service must suitable long lifetime second system must monolithically trusted must possible achieve authentication even exist untrusted part system third goal must met way party authentication know precisely agency party must trust order accept authentication
1986,global authentication service without global trust,paper describes design authentication service large scale long lifetime distributed system paper introduces methodology describing authentication protocol make explicit trust relationship amongst participant authentication protocol based primitive notion composition secure channel authentication model offered provides authentication role principal might exercise differing role differing time whilst single identity role suitable inclusion access control list naming role implies entity trusted authenticate role provide uid scheme give client control time name get bound principal thus controlling effect mutability name space
1984,programming language issue 1980s sigplan 83 symposium programming language issue software system,sigplan  conference panel discussion held discus important programming language issue might paper edited transcript discussioni want thank john white general chairman conference suggested panel richard probst tim learmont uc berkeley recorded transcribed discussion transcript identified speaker possible apologize member audience whose comment included identified know name
1984,hint computer system design,decorated pithy quotation many source collection good advice anecdote draw upon folk wisdom experienced designer
1984,gene mcdaniel severo ornstein instruction fetch unit high-performance personal conmputer,instruction fetch unit  dorado personal computer speed emulation instruction prefetching decoding preparing later instruction parallel execution earlier one dispatch machine microcoded processor proper starting address instruction pass instruction field processor demand writeable decoding memory allows ifu specialized particular instruction set long instruction integral number byte long implementation specialized instruction set mesa lisp smalltalk language ifu implemented six-stage pipeline decode instruction every  n favorable condition dorado execute instruction peak rate 
1984,kernel language abstract data type module,small set construct simulate wide variety apparently distinct feature modern programming language using typed lambda calculus binding declaration type first-class value show build module interface implementation abstract data type generic type recursive type union language concise operational semantics given inference rule
1983,organizing software distributed environment,system modeller provides automatic support several different kind program development cycle cedar programming system handle daily evolution single module small group module modified single person assembly numerous module large system complex interconnection formal release system modeller also efficiently locate large number module big distributed file system move one machine another meet operational requirement improve performance
1983,practical use polymorphic applicative language,assembling large system component element simple task adequate notation specifying task must reflect system structure accommodate many configuration system many version develops suitable input many tool support software development language described applies idea λ-abstraction hierarchical naming type-checking problem preliminary experience use also given
1982,fast procedure call,mechanism control transfer handle variety application  uniform way also allow implementation common case procedure call return extremely fast preferably fast unconditional jump normal case paper describes mechanism method efficient implementation
1981,memory system high-performance personal computer,memory system dorado compact high- performance personal computer high i/o bandwidth large paged virtual memory cache heavily pipelined control paper discus detail relatively low-speed i/o device transfer single word cache fast device color video display transfer directly main storage processor us cache virtual address used cache i/o transfer memory controlled seven-stage pipeline deliver peak main-storage bandwidth  million bits/s service fast i/o device cache miss interesting problem synchronization scheduling pipeline discussed paper concludes performance measurement show among thing cache hit rate  percent
1980,experience process monitor mesa,use monitor describing concurrency much discussed literature monitor used real system size however number problem arise adequately dealt semantics nested monitor call various way defining meaning wait priority scheduling handling timeouts abort exceptional condition interaction process creation destruction monitoring large number small object problem addressed facility described concurrent programming mesa experience several substantial application give u confidence validity solution
1980,atomic transaction,defined facility  client use perform complex update distributed data manner maintains consistency presence system crash concurrency seen transaction implemented small amount communication among server communication proportional number server involved transaction rather size update described algorithm series abstraction together informal correctness argument
1980,application protocol,n/a
1980,ethernet pup violet,n/a
1979,experience process monitor mesa summary,early  began design concurrent programming facility pilot new operating system personal computer  pilot fairly large program  addition support large application ranging data base management internetwork message transmission heavy user concurrency  intended new facility used least following purpose local concurrent programming individual application implemented tightly coupled group synchronized process express concurrency inherent application global resource sharing independent application run together machine cooperatively sharing resource particular process share processor replacing interrupt request software attention device handled directly waking appropriate process without going separate interrupt mechanism 
1979,open operating system single-user machine,file system modularization single-user operating system described main point interest openness system establishes sharp boundary user program technique used make system robust
1978,proof rule programming language euclid,spirit previous axiomatixation programming language pascal paper describes hoare-style proof rule euclid programming language intended expression system program verified construct euclid covered except storage allocation machine dependency
1977,terminal-oriented communication system,paper describes system full-duplex communication time-shared computer terminal system consists communication computer directly connected time-shared system number small remote computer terminal attached connecting medium speed telephone line service large number terminal various type overall system design presented along algorithm used solve three specific problem local echoing error detection correction telephone line multiplexing character output
1977,note design euclid,euclid language writing system program verified believe verification reliability closely related hard reason program using language feature difficult write program use properly paper discus number issue design euclid including topic scope name aliasing module type-checking confinement machine dependency give reason expectation programming euclid reliable  programming pascal euclid based
1976,reflection operating system design,main feature general purpose multiaccess operating system developed cdc  berkeley presented good bad point discussed appear retrospect distinctive feature design use capability protection organization system sequence layer building facility provided earlier one protecting malfunction later one serious problem maintaining protection layer level added memory hierarchy problem discussed new solution described
1975,synchronization introduction session chairman,discussion session centered around two aspect synchronization problem abstract model primarily local synchronization synchronization network long delay lost message duplication message crash communicating party two presentation abstract model  one network problem  supported several working paper presentation session 
1974,protection, model given reflect property existing mechanism enforcing protection access control together possible implementation property existing system explicated term model implementation
1974,redundancy robustness memory protection,control access memory major problem design protection mechanism especially system allow file mapped addressable memory use abstract model memory addressing explain space possible organization examine implication protection analysis access path data allows drawn amount redundancy memory addressing scheme possible consequence error integrity protection system
1974,transfer control context,describe single primitive mechanism transferring control one module another show mechanism together suitable facility record handling storage allocation used construct variety higher-level transfer discipline procedure function call coroutine linkage non-local gotos signal specified implemented compatible way convention storage allocation name binding associated control transfer also programmer control two new control discipline defined  generalization coroutines facility handling error unusual condition arise program execution example drawn modular programming language facility described implemented
1973,note confinement problem,onfining program execution cannot transmit information program except caller set example attempt stake boundary problem necessary condition solution stated informally justified
1969,dynamic protection structure,general problem pervades entire field operating system design construction protection mechanism come many different form ranging hardware prevents execution input/output instruction user program password scheme identifying customer log onto time-sharing system paper deal one aspect subject might called meta-theory protection system information specifies protection authorizes access protected manipulated thus example memory protection system decides whether program p allowed store location concerned p obtains permission pass program
1968,scheduling philosophy multiprocessing system,collection basic idea presented evolved various worker past four year provide suitable framework design analysis multiprocessing system notion process state vector discussed nature basic operation process considered connection process protection analyzed general approach priority-oriented scheduling described relationship conventional interrupt system explained aspect time-oriented scheduling considered implementation scheduling mechanism analyzed detail feasibility embodying hardware established finally several method interlocking execution independent process presented compared
1967,online editor,online interactive system text editing described detail remark theoretical experimental justification form emphasis throughout system providing maximum convenience power user notable feature ability handle piece text content-searching facility character-by-character editing operation editor programmed limited extent
