2014,cost-aware automatic program repair,present formal framework repairing infinite-state imperative sequential program  procedure multiple assertion framework generate repaired program modifying original erroneous program multiple program location ensure readability repaired program using user-defined expression template framework also generates set inductive assertion serve proof correctness repaired program step toward integrating programmer intent intuition automated program repair present cost-aware formulation - given cost function associated permissible statement modification goal ensure total program modification cost exceed given repair budget part predicate abstractionbased solution framework present sound complete algorithm repair boolean program developed prototype tool based smt solving used successfully repair diverse error benchmark c program
2012,system architecture design engineering verification - practice research research practice,area computer science interaction boundary science engineering blurred system area cross fertilization direction system panel explore past present future relationship system research engineering practicethey discus relationship system research engineering practice system innovation emanating industry become invention academic research stop science become engineering practice-driven research impact real world real world reflect back foundation form technology create research challenge manner applied research give solid base developmentthey surmise future system research fundamental challenge posed scale today cloud computing system mega-size data center organize software large-scale distributed execution mega-ton line code new opportunity enabled novel technology like flash memory transactional memory integrate hand-in-hand design software architecture
2012,improved binary decision diagram constraint propagation satisfiability problem,general search-based solver dominating symbolic solver according experimental  reported sat qbf literature however recent effort contributed close performance gap one novel approach involves use binary decision diagram simplification routine called bdd constraint propagation main idea adapt optimization search-based solver context bdds paper improve upon existing bdd constraint propagation procedure concretely bdd support set supportset reduce asymptotic upper bound clause bdd pure literal extraction time nonclause bdd unit literal extraction time also formulate first time trivial falsity forced literal universal reduction rule bdds show experimental section improvement allow bdd-based solver tackle new family problem outperform state-of-the art solver case
2011,symbolic modular deadlock analysis,method object-oriented concurrent library often encapsulate internal synchronization detail result information hiding client calling library method may cause thread safety violation invoking method unsafe manner frequently cause deadlock given concurrent library present technique inferring interface contract specify permissible concurrent method call pattern aliasing among method argument work focus deriving contract guarantee deadlock-free execution method library contract also help client developer documenting required assumption library method alternatively contract statically enforced client code detect potential deadlock client technique combine static analysis symbolic encoding scheme tracking lock dependency allowing u synthesize contract using smt solver additionally investigate extension technique reason deadlock library employ signaling primitive wait-notify cooperative synchronization prototype tool analyzes million line code widely-used java library within hour thus demonstrating scalability efficiency furthermore contract inferred approach able pinpoint real deadlock client ie deadlock part bug-reports filed user developer client code
2011,algorithmic framework synthesis concurrent program,present framework take unsynchronized sequential process along temporal specification global concurrent behaviour automatically generates concurrent program synchronization code ensuring correct global behaviour synthesized synchronization code based monitor wait notify operation condition variable mutual-exclusion lock novel aspect framework include realistic low-level synchronization implementation synthesis simple coarse-grained synchronization complex fine-grained synchronization accommodation safety liveness global correctness property method fully automatic well sound complete
2011,efficient bdd-based qbf solver,paper present qbf solver based bdd technology includes optimization search-based algorithm enhance early quantification technique model checking favoring aggressive quantification conjunction bdds bdd constraint propagation also described strategy inspired efficient simplification applied cnfs dpll-based algorithm  dynamic variable elimination heuristic enforce quantification bounded space usage also presented coping difficulty faced static heuristic included previous bdd-based solver experimental  show solver outperforms symbolic search-based competitive solver formal verification benchmark practical application equivalence checking theorem proving completing problem finishing le time preliminary  also show solver able handle hard problem symbolic solver planning domain similar efficiency benchmark used contain qbfs nearly  variable available qbflib website
2010,meaning model checking,model checking introduced early ’s provide practical automated method verifying concurrent system model checking substantive impact program verification first time industrial strength system verified routine basis time progressed term model checking acquired slightly different shade meaning paper consider variant aspect model checking elucidating often overlooked subtle distinction
2010,time time,landmark  paper “the temporal logic programs” amir pnueli gave fundamental recognition ideally nonterminating behavior ongoing concurrent program operating system protocol vital aspect program reasoning classical approach program correctness based initial-state/final-state semantics terminating program approach inapplicable program infinite behavior norm address shortcoming pnueli suggested use temporal logic formalism reasoning change time originally studied philosopher meaningfully describe reason infinite behavior program suggestion turned remarkably fruitful struck resonant chord within formal verification community enormous impact development area matured extremely effective mathematical tool specifying verifying vast class synchronization coordination problem common concurrency pnueli thus caused sea-change field program verification founding time reasoning time successful period formal method yet
2009,verification recursive method tree-like data structure,program manipulate heap-allocated data structure present formidable challenge algorithmic verification recursive procedure  software library used large number task ranging simple traversal complex structural transformation verification method undecidable general hence present programming language fragment syntax similar c correctness algorithmically checked method written fragment specification form tree automaton verification efficient case illustrated prototype tool framework used verify method insertion deletion node k-ary tree binary search tree linked list linked list reversal rotation balanced tree respect specification acyclicity sortedness list-ness tree-ness absence null pointer dereferences
2009,symbolic deadlock analysis concurrent library client,method object-oriented concurrent library hide internal synchronization detail however information hiding may result client causing thread safety violation invoking method unsafe manner given library present technique inferring interface contract specify permissible concurrent method call pattern aliasing among method argument derived contract guarantee deadlock free execution method library contract also help client developer documenting required assumption library method alternatively contract statically enforced client code detect potential deadlock client technique combine static analysis symbolic encoding tracking lock dependency allowing u synthesize contract using smt solver prototype tool analyzes million line code widely-used java library within hour thus demonstrating scalability efficiency furthermore contract inferred approach able pinpoint real deadlock client ie deadlock part bug-reports filed user developer client code
2009,model checking progress problem,model checking automatic method verifying finite state concurrent program use temporal logic related framework specify correctness greatly facilitated simply thinking verification problem despite early worry intractability state explosion nowadays often ameliorated permitting verification enormously large system practice important technique include abstraction compact  representationunfortunately none technique scale well beyond certain range temporal logic universally viewed natural specification framework discus possible way enhance efficiency expressiveness model checking
2008,automatic generation local repair boolean program,automatic technique software verification focus obtaining witness program failure counterexample often fail localize precise cause error usually suggest repair strategy present efficient algorithm automatically generate repair incorrect sequential boolean program program correctness specified using pre-condition post-condition approach draw standard technique predicate calculus obtain annotation program statement annotation used generate synthesis query program statement successful yield repair furthermore show repair exists given program specified condition technique always able find
2008,beginning model checking personal perspective,model checking provides automated method verifying concurrent system correctness specification given temporal logic method hinge efficient flexible graph-theoretic reachability algorithm time introduction early ’s prevailing paradigm verification manual one proof-theoretic reasoning using formal axiom inference rule oriented towards sequential program need encompass concurrent program desire avoid difficulty manual deductive proof small model theorem temporal logic motivated development model checking
2008,design synthesis synchronization skeleton using branching time temporal logic,propose method constructing concurrent program synchronization skeleton program automatically synthesized high-level  temporal logic specification synchronization skeleton abstraction actual program detail irrelevant synchronization suppressed example synchronization skeleton solution critical section problem process’s critical section may viewed single node since internal structure critical section unimportant solution synchronization problem literature fact given synchronization skeleton synchronization skeleton general finite state propositional version temporal logic used specify property
2008,sviss symbolic verification symmetric system,sviss flexible platform incorporating efficient symmetry reduction symbolic model checking tool come extensive c++ library system modeling using bdds rich ctl-based model checking engine application range communication protocol computer hardware multi-threaded software believe sviss first symbolic tool exploit symmetry concurrent device-driver verification vital operating system design
2007,improved verification hardware design antecedent conditioned slicing,static slicing shown valuable tool facilitating verification hardware design paper present sharpened notion antecedent conditioned slicing provides effective abstraction reducing size state space antecedent conditioned slicing extra information antecedent used permit greater pruning state space previous version paper applied antecedent conditioned slicing safety property form g antecedent consequent written propositional logic paper use antecedent conditioned slicing handle safety bounded liveness property specification written linear time temporal logic present theoretical justification technique provide experimental  verilog rtl implementation usb  functional core large design  state element   demonstrate technique provides significant performance benefit static program slicing using state-of-the-art model checker
2006,under-approximation heuristic grid-based bounded model checking,paper consider effect bdd-based under-approximation hybrid approach using bdds sat-bmc error detection computing grid experimentally study effect under-approximation approach non-traditional parallelization bmc based state space partitioning parallelization accomplished executing multiple instance bmc independently different seed state selected reachable state different partition state spread across state space potentially deep since processor work independently scheme suitable bug hunting using grid-like network experimental  demonstrate improvement existing approach show method effectively utilize large grid network
2006,molecular model checking,paper show perform model checking technique automatic program verification dna algorithm method depends two idea first kripke structure compactly represented dna substrate coding state edge strand dna second satisfaction temporal eventuality achieved self-propagating molecular chain reaction
2006,partitioning symbolic model checking,state-space-partitioning-based approach proposed literature address state-explosion problem model checking approach whether sequential distributed perform large amount work form interpartition  image computation expensive model-checking algorithm aggregate expensive crossover image localizing computation individual partition presented reduces number crossover image drastically outperforms extant approach term crossover image computation cost well total model-checking time often two order magnitude
2006,reducing model checking one,verification parameterized system arbitrary number instance generally undecidable existing approach resort non-trivial restriction system lack automation practice application often provide suitable bound parameter size propose new technique toward bounded formulation parameterized reasoning efficiently verify property family system large finite parameter range show accomplish single verification run model aggregate individual instance run take significantly le time system considered one one method applicable completely inhomogeneous family system property may even preserved across instance case method expose parameter value verification fails symmetry present system inherited aggregate representation allowing verification reduced model technique fully automatic requires approximation
2006,automatic verification parameterized data structure,verifying correctness program operating data structure become integral part software verification method program act input data structure  produce output data structure parameterized correctness problem method defined follows given method property input graph wish verify input graph parameterized size output graph also satisfy property present automated approach verify given method preserve given property large class method example include reversal linked list insertion deletion iterative modification node directed graph approach draw machinery automaton theory temporal logic useful class data structure property solution polynomial size method size property specification
2005,efficient model checking hardware using conditioned slicing,work present abstraction based property verification technique hardware using conditioned slicing handle safety property specification form use antecedent property create abstraction antecedent conditioned slice extend conditioned slicing hardware description language  provide theoretical foundation conditioned slicing based verification technique also present experimental  verilog rtl implementation usb  demonstrate high performance gain achieved technique compared static program slicing using state-of-the-art model checker
2005,efficient reduction technique system many component,present improved approach verifying system involving many copy kind component replication type occurs frequently practice regarded major source state explosion temporal logic model checking solution make use symmetry reduction counter abstraction efficiency approach directly depends size component local state space exponential number local variable show program analysis significantly reduce local state space help towards succinct bdd representation system reduction technique synergistically combine efficient symbolic verification documented promising experimental 
2005,predictive reachability using sample-based approach,bdd based reachability method suffer lack robustness performance whereby difficult estimate one adopted given problem present novel approach examines short sample computation leading automatic robust modular way reconciling various method reachability approach able intelligently integrate diverse reachability technique method possibly get enhanced efficiency method many case order magnitude efficient finish invariant checking property vis-verilog benchmark
2005,multi-threaded reachability,partitioned bdd-based algorithm proposed literature solve memory explosion problem bdd-based verification algorithm time ineffective suffer problem scheduling relative order partition processed paper present novel multi-threaded reachability algorithm avoids scheduling problem increasing latent parallelism partitioned state space traversal show case method significantly faster standard reachability algorithm well existing partitioned approach gain magnified threaded implementation evaluated context parallel framework
2005,dynamic symmetry reduction,symmetry reduction technique combat state explosion problem temporal logic model checking use symbolic representation suffered prohibitively large bdd orbit relation one suggested solution pre-compute mapping state possibly multiple representative symmetry equivalence class paper propose efficient method determines representative dynamically fixpoint iteration scheme preserve uniqueness representative another alternative using orbit relation counter abstraction proved efficient special case full symmetry provided conducive program structure contrast solution applies also system le full symmetry system translation counter feasible support claim experimental 
2004,synthesis fault-tolerant concurrent program,method mechanically synthesizing concurrent program temporal logic specification obviate need manually construct program compose proof correctness serious drawback extant synthesis method however produce concurrent program model computation often unrealistic particular method assume completely fault-free operation program produce fault-intolerant paper show mechanically synthesize fault-tolerant concurrent program various fault class illustrate method synthesizing fault-tolerant solution mutual exclusion barrier synchronization problem
2004,parameterized model checking ring-based message passing system,parameterized model checking problem  decide whether temporal property hold uniform family system u n  comprised finite arbitrarily many copy template process u unfortunately undecidable general  paper consider pmcp system comprised process arranged ring communicate passing message via token whose value updated bounded number time correctness property expressed using stuttering-insensitive linear time logic ltl∖x bidirectional ring show reduce reasoning ring arbitrary number process ring certain finite cutoff number process immediately yield decidability pmcp hand go show unidirectional ring small cutoff achieved making decision procedure provably efficient example application consider protocol leader election problem
2004,partitioning methodology bdd-based verification,main challenge bdd-based verification dealing memory explosion problem reachability analysis paper advocate methodology handle problem based state space partitioning function well relation investigate key question perform partitioning reachability based verification provide suitable algorithm also address problem instability bdd-based verification automatically picking best configuration different short trace reachability computation approach drastically decrease verification time often order magnitude
2003,reasoning ring,distributed protocol often composed similar process connected unidirectional ring network process communicate passing token fixed direction process hold token allowed perform certain action usually correctness property expected hold irrespective size ring show question checking many useful correctness property ring size reduced checking ring size small cutoff size apply  verification mutual exclusion protocol milners scheduler protocol
2003,combining symmetry reduction symbolic representation efficient model checking,bdds allow succinct symbolic representation digital circuit symmetry reduction factor redundancy inherent regular organization many system successful technique combating state space explosion would desirable combine symbolic symmetry reduction unfortunately straight-forward approach symmetry reduction requires orbit relation whose symbolic representation bdd general exponential size investigate use generic representative mean overcoming problem fully symmetric system instead first representing system bdd applying symmetry reduction translate given program text symmetry-reduced version result encoded using bdd demonstrate method superior traditional orbit-relation based symmetry reduction also approach using multiple representative
2003,exact efficient verification parameterized cache coherence protocol,propose new tractably  efficient algorithmic method exact  parameterized reasoning cache coherence protocol reasoning general snoopy cache protocol introduce guarded broadcast protocol model show abstract history graph construction used reason safety property framework although worst case size abstract history graph exponential size transition diagram given protocol actual size small standard cache protocol evidenced experimental  framework handle  cache protocol  well split-transaction version next identify framework called initialized broadcast protocol suitable reasoning invalidation-based snoopy cache protocol show reduce reasoning system arbitrary number cache system  cache yield provably polynomial time algorithm parameterized verification invalidation based snoopy protocol  apply safety liveness property finally present methodology reducing parameterized reasoning directory based protocol snoopy protocol thus leveraging technique developed verifying snoopy protocol directory based one typically much harder reason demonstrate reducing reasoning directory based protocol suggested german  esi snoopy protocol modification msi snoopy protocol
2003,abstract pattern compositional reasoning,compositional reasoning – reducing reasoning concurrent system reasoning individual component – essential tool managing proof complexity state explosion model checking typically reasoning carried assume-guarantee manner component guarantee behavior based assumption behavior component restriction imposed method avoid unsoundness usually also result incompleteness – ie one unable prove certain property paper construct abstract framework reasoning process composition formulate assume-guarantee method show sound semantically complete show instantiate framework several common notion process behavior composition notion instantiation result first method known complete mutually inductive assume-guarantee reasoning
2003,model checking guarded protocol,parameterized model checking problem  decide whether temporal property hold uniform family system c||u/sup n/ comprised control process c finitely arbitrarily many copy user process u executing concurrently interleaving semantics delineate decidability/undecidability boundary pmcp possible system arise letting process coordinate using different subset following communication primitive conjunctive boolean guard disjunctive boolean guard pairwise rendezvous asynchronous rendezvous broadcast action focus following linear time property  ltl/spl bsol/x formula c  ltl formula c  regular property specified regular automaton  /spl omega/-regular automaton also establish hierarchy based relative expressive power primitive showing disjunctive guard pairwise rendezvous equally expressive reduce pmcp regular /spl omega/-regular property system disjunctive guard pairwise rendezvous equally expressive reduce pmcp regular /spl omega/-regular property system disjunctive guard one pairwise rendezvous vise versa asynchronous rendezvous broadcast strictly expressive pairwise rendezvous  moreover system conjunctive guard give simple characterization decidability/undecidability boundary pmcp showing allowing stuttering sensitive property bridge gap decidability  undecidability  broad framework modeling snoopy cache protocol also presented pmcp p decidable model snoopy cache protocol given culler emerson  thereby overcoming undecidability 
2003,rapid parameterized model checking snoopy cache coherence protocol,new method proposed parameterized reasoning snoopy cache coherence protocol method distinctive exact  fully automatic  tractably efficient state cache coherence protocol organized hierarchy reflecting tightly memory block given cache state bound processor broad framework encompassing snoopy cache coherence protocol proposed hierarchy implicit design protocol captured pre-order yield new solution technique hinge construction abstract history graph global concrete state represented abstract state reflecting occupied local state abstract graph also take account history local transition protocol fired along computation get global state permit abstract history graph exactly capture behaviour system arbitrary number homogeneous process although worst case size abstract history graph exponential size transition diagram describing protocol actual size abstract history graph small standard cache protocol method applicable  common snoopy cache protocol described handy’s book  illinois-mesi dragon experimental  parameterized verification  protocol document efficiency new method practice protocol verified fraction second emphasized parameterized verification
2002,visual specification modular reasoning asynchronous system,propose framework closely tie together visual specification modular reasoning asynchronous system basis framework new notation called modular timing diagram  specifying universal property causality timing event asynchronous system mtd’s complementary nature message sequence chart typically used specify existential property framework includes two algorithm formal reasoning withmtd’s first efficient polynomial-time model checking algorithm second algorithm automatically generating assume-guarantee partitioning mtd exploit inherent decompositional structure show use decomposition modular reasoning withmtd property conjunction asynchronous compositional reasoning rule illustrate notation method describe case study specified telephony feature suchas call forwarding withmtd’s verified property asynchronous telephony model compositional reasoning method led saving - verification time comparable saving space
2002,model checking large-scale parameterized resource allocation system,paper technique proposed limiting state explosion context resource allocation problem shown given system organized a—possibly irregular—network n—possibly heterogeneous — process model checking system reduced efficient fully automatic exact method model checking certain small system  established correctness property expressed ltlx precise size topology small system dependent large system well correctness specification network symmetric process homogeneous new method provides efficient solution parameterized model checking problem application shown efficiently verify variety solution parameterized dining philosopher problem
2001,model checking µ-calculus fragment,paper consider model checking problem μ-calculus show succinctly equivalent non-emptiness problem finite-state automaton infinite binary tree parity acceptance condition also present efficient model checking algorithm two rich subclass μ-calculus formula relate expressive power well-known extension branching time temporal logic
2001,synthesis concurrent program atomic read/write model computation,method mechanically synthesizing concurrent program temporal logic specification proposed emerson clarke manna wolper important advantage synthesis method obviate need manually compose program manually construct proof correctness serious drawback method practice however produce concurrent program model computation often unrealistic involving highly centralized system architecture  process global information system state  reactive module read input one atomic step  even simple synchronization protocol based atomic read/write primitive petersons solution mutual exclusion problem remained outside scope practical mechanical synthesis method paper show mechanically synthesize realistic computational model solution synchronization problem illustrate method synthesizing petersons solution mutual exclusion problem
2001,rtdt front-end efficient model checking synchronous timing diagram,model checking   automated procedure determining whether finite state program satisfies temporal propertymodel checking tool due complex nature specification method used effectively verification expert order make tool accessible non-expert user may familiar formal notation need make model checker easier use visually intuitive specification method may provide alternative way specify temporal behavior
2001,assume-guarantee based compositional reasoning synchronous timing diagram,explosion number state due several interacting component limit application model checking practice compositional reasoning ameliorates problem reducing reasoning entire system reasoning individual component reasoning often carried assume-guarantee paradigm component guarantee certain property based assumption component naïve application reasoning circular therefore unsound present new rule assume-guarantee reasoning sound complete show apply fully automated manner property specified synchronous timing diagram show timing diagram property natural decomposition assume-guarantee pair liveness restriction result simple subgoals checked efficiently implemented method timing diagram analysis tool carry compositional proof fully automated manner initial application method yielded promising  showing substantial reduction space requirement model checking
2000,automated formal method model checking beyond,n/a
2000,smc symmetry-based model checker verification safety liveness property,article present smc system smc used checking safety liveness property concurrent program different fairness assumption based explicit state enumeration combat state explosion exploiting symmetry input concurrent program usually present form identical process two different way firstly reduces number explored state identifying state equivalent symmetry system called process symmetry secondly reduces number edge explored state reduced state graph exploiting symmetry single state called state symmetry smc work on-the-fly manner construct reduced state graph needed method facilitates early termination speed model checking reduces memory requirement employed smc check correctness among standard example link layer part ieee standard  “firewire” high-speed serial bus protocol smc found deadlock protocol smc also check certain liveness property report case study included article
2000,reducing model checking many,parameterized model checking problem  determine whether temporal property true every size instance system comprised many homogenous process unfortunately undecidable general able establish nonetheless decidability pmcp quite broad framework consider asynchronous system comprised arbitrary number homogeneous copy generic process template process template represented synchronization skeleton correctness property expressed using indexed ctl*∖ x reduce model checking system arbitrary size n model checking system size  small cutoff size c establishes decidability pmcp necessary model check finite number relatively small system efficient decidability obtained case  generalize system comprised multiple heterogeneous class process class instantiated many homogenous copy class template 
2000,model checking synchronous timing diagram,model checking automated approach formal verification hardware software allow model checking tool used hardware software designer instead verication expert tool support specication method correspond closely common usage hardware system timing diagram form commonly used visually appealing specification method paper introduce class synchronous timing diagram syntax formal semantics close informal usage present ecient decompositional algorithm model checking timing diagram algorithm implemented user-friendly tool called rtdt  applied tool verify several property lucents pci synthesizable core
2000,model checking theory practice,model checking automatic method verifying correctness reactive program originally proposed part dissertation work author model checking based efficient algorithm searching presence absence temporal pattern fact model checking rest theoretical foundation basic principle modal logic lattice theory well automaton theory permit program reasoning completely automated principle highly automated practice automation practice model checking nowadays well-developed range successful application growing model checking used major hardware manufacturer verify microprocessor circuit promising advance use software verification well key obstacle applicability model checking course state explosion problem paper discus part ongoing research program limit state explosion relation theory practice also discussed
2000,virtual symmetry reduction,provide general method ameliorating state explosion via symmetry reduction certain asymmetric system system many similar identical process method applies system whose structure  state symmetry arc symmetry introduce new notion virtual symmetry strictly subsumes earlier notion rough symmetry near symmetry  virtual symmetry general condition structure system naturally bisimilar quotient group state symmetry give several example system exhibiting virtual symmetry amenable symmetry reduction earlier technique one-lane bridge system direction priority crossing change dynamically abstract system asymmetric communication network system asymmetric resource sharing motivated drinking philosopher problem example show virtual symmetry reduction applies significantly broader class asymmetric system could handled
1999,complexity tree automaton logic program,complexity testing nonemptiness finite state automaton infinite tree investigated shown tree automaton pair  acceptance condition state n pair nonemptiness tested deterministic time  however shown problem general np-complete  new nonemptiness algorithm yield exponentially improved essentially tight upper bound numerous important modal logic program interpreted usual semantics structure generated binary relation example follows satisfiability full branching time logic ctl* tested deterministic double exponential time another consequence satisfiability propositional dynamic logic  repetition construct  propositional mu-calculus  tested deterministic single exponential time
1999,efficient decompositional model checking regular timing diagram,timing diagram widely used industrial practice express precedence timing relationship amongst collection signal graphical notation often convenient use temporal logic automaton introduce class timing diagram called regular timing diagram  rtd’s precise syntax formal semantics simple corresponds common usage moreover rtd’s inherent compositional structure exploited construct efficient algorithm model checking rtd respect system description algorithm time complexity linear system size small polynomial representation diagram algorithm easily used symbolic  model checker illustrate working algorithm verification simple master-slave system
1999,asymmetry full symmetry new technique symmetry reduction model checking,often case system “nearly symmetric” exhibit symmetry part description nevertheless globally asymmetric formalize several notion near symmetry show obtain benefit symmetry reduction applied asymmetric system nearly symmetric show nearly symmetric system possible perform symmetry reduction obtain bisimilar  symmetry reduced systemusing general notion “sub-symmetry” show generate reduced structure simulated  original asymmetric programin symbolic model checking paradigm representing symmetry reduced quotient structure entail representing bdd orbit relation unfortunately many important symmetry group including full symmetry group bdd provably always intractably large size exponential number bit state space contrast assumption full symmetry show possible reduce textual program description symmetric system textual program description symmetry reduced system obviates need building bdd representation orbit relation program state symmetry group establish bdd representing reduced program provably small essentially polynomial number bit state space original program
1999,parametric quantitative temporal reasoning,define parameterized real-time computation tree logic  allows quantitative temporal specification parameterized natural number parameterized quantitative specification quantitative specification concrete timing information abstracted away abstraction allows designer specify quantitative restriction temporal ordering event without use specific timing information model model checking algorithm logic given polynomial fixed number parameter subclass formula identified model checking problem linear length formula size structure prtctl generalised allow quantitative reasoning number occurrence atomic event
1998,synthesis concurrent system many similar process,method synthesizing concurrent program temporal logic specification based use decision procedure testing temporal satisfiability proposed emerson clarke manna wolper important advantage synthesis method obviate need manually compose program manually construct proof correctness one formulate precise problem specification synthesis method mechanically construct correct solution serious drawback method practice however suffer state explosion problem synthesize concurrent system consisting k sequential process n state local transition diagram requires construction global product-machine nk global state general exponential growth k make infeasible synthesize system composed   process article show synthesize concurrent system consisting many  similar sequential process approach avoids construction global product-machine k process instead construct two-process product-machine single pair generic sequential process method uniform k providing simple template instantiated process yield solution fixed k method also illustrated synchronization problem literature
1998,symmetry reduction inmodel checking,use symmetry alleviate state-explosion problem model-checking become important research topic paper investigates several problem important technique exploiting symmetry important problem orbit problem prove orbit problem equivalent important problem computational group theory least hard graph isomorphism known np-complete paper also show class commonly occurring group orbit problem easy method deriving symmetry shared variable model concurrent program also investigated experimental  providing evidence reduction state space using symmetry also provided
1998,verification parameterized bus arbitration protocol,model checking well established verification technique finite-state system many protocol composed finite-state process parameterized number process hence model checking cannot applied directly determine correctness inherently infinite-state parameterized system present case study verification parameterized protocol sae-j data transfer procotol standard automobile industry used transmit data various sensor micro-controllers automobile protocol communicates data single-wire bus provides on-the-fly arbitration competing transmission verification effort interesting many aspect  prof correctness arbitrary instance largely automated us abstraction essential way abstraction used exact sense property true parameterized protocol true finite-state abstraction
1998,model checking non-deterministic infinite-state system,demonstrate many known algorithm model checking infinite-state system derived uniformly reachability procedure generates covering graph generalization karp-miller graph petri net node covering graph associated non-empty set reachable state make possible model check safety property system covering graph system well-quasi-ordered simulation relation infinite fair computation finite witness may detected using covering graph combinatorial property specific infinite state system  explain many known decidability  simple uniform manner strong indication covering graph construction appropriate analysis infinite state system also consider new application domain parameterized broadcast protocol indicate apply construction domain application illustrated invalidation-based cache coherency protocol many safety property proved fully automatically arbitrary number process
1998,model checking real-time property symmetric system,develop efficient algorithm model checking quantitative property symmetric reactive system general framework real-time mu-calculus previous work limited qualitative correctness property work permit handling quantitative correctness provides strictly expressive framework qualitative correctness since mu-calculus strictly subsumes eg ctl unlike previous “group-theoretic” approach   technical “automata-theoretic” approach  new approach may viewed “model-theoretic”
1997,utilizing symmetry model-checking fairness assumption automata-theoretic approach,one useful technique combating state explosion problem exploit symmetry performing temporal logic model checking previous work shown using basic notion group theory symmetry may exploited full range correctness property expressible expressive temporal logic ctl* surprisingly fairness property readily expressible ctl* method powerful enough admit amelioration state explosion fairness assumption involved show nonetheless possible handle fairness efficiently trading group theory automaton theory automata-theoretic approach depends detecting fair path subtly encoded quotient structure whose arc annotated permutation using threaded structure reflects coordinate shift caused permutation
1997,checking formal specification simulation,verification large multiprocessor design currently heavily simulation formal technique model checking typically applied small part system due issue computational notational complexity two fact mind author designed platform aim help bridge gap formal verification simulation present temporal logic specification language includes construct specifying system behavior high level abstraction discus use simulation model checking
1997,combining partial order symmetry reduction,partial order based reduction technique reduce time memory model-checking procedure becoming quite popular partial order reduction technique exploit independence action symmetry based reduction technique exploit inherent structure system reduce state space explored model checking provide abstract framework combining partial-order symmetry reduction also present algorithm exploit reduction technique simultaneously
1997,generalized quantitative temporal reasoning automaton theoretic approach,paper proposes expressive extension propositional linear temporal logic dealing real time correctness property give automata-theoretic model checking algorithm extension algorithm implemented applied example
1996,scheduling workflow enforcing intertask dependency,workflow composite activity used support automate multisystem application involving human heterogeneous database legacy system traditional atomic transaction model successful centralized homogeneous application suitable supporting workflow intertask dependency condition involving event dependency among workflow task used specify coordination requirement among workflow task central component workflow model form basis developing uniform formal framework workflow key contribution work paper formalize intertask dependency using temporal logic involves event attribute needed determine whether dependency enforceable properly schedule event dependency represented internally finite state automaton capture computation satisfy given dependency set automaton combined scheduler produce global computation satisfying relevant dependency thus enacting given workflow algorithm rigorously proved correct implemented
1996,symmetry model checking,show exploit symmetry model checking concurrent system containing many identical isomorphic component focus particular composed many isomorphic process many case able obtain significant even exponential saving complexity model checking
1996,automatic verification parameterized synchronous system extended abstract,system arbitrary number homogeneous process occur many application parameterized model checking problem  determine whether temporal property true every size instance system consider system formed synchronous parallel composition single control process arbitrary number homogeneous user process show pmcp decidable property expressed indexed propositional temporal logic problem general pspace-complete initial experimental  indicate method usable practice
1996,model checking mu-calculus,growing recognition need apply formal mathematical method design  conndence computing system system operate safety critical context  error could major adverse economic consequence  problem especially acute design many reactive system must exhibit correct ongoing behavior yet amenable thorough testing due inherently nondeterministic nature one useful approach specifying reasoning correctness system temporal logic model checking provide eecient expressive tool automatic veriication nite state system meet correctness speciication formulated temporal logic describe model checking algorithm discus application focus attention particularly important type temporal logic known mu-calculus
1996,synthesis concurrent system atomic read / atomic write model computation extended abstract,method mechanically synthesizing concurrent program temporal logic specification proposed emerson clarke manna wolper important advantage synthesis method obviate need manually compose program manually construct proof correctness serious drawback method practice however produce concurrent program model computation often unrealistic involving highly centralized system architecture  process global information system state  reactive module read input one atomic step  even simple synchronization protocol based atomic read/write primitive petersons solution mutual exclusion problem remained outside scope practical mechanical synthesis method paper show mechanically synthesize realistic computational model solution synchronization problem illustrate method synthesizing petersons solution mutual exclusion problem
1995,modularity rule-based programming,method mechanically synthesizing concurrent program temporal logic specification proposed emerson clarke manna wolper important advantage synthesis method obviate need manually compose program manually construct proof correctness serious drawback method practice however produce concurrent program model computation often unrealistic involving highly centralized system architecture  process global information system state  reactive module read input one atomic step  even simple synchronization protocol based atomic read/write primitive petersons solution mutual exclusion problem remained outside scope practical mechanical synthesis method paper show mechanically synthesize realistic computational model solution synchronization problem illustrate method synthesizing petersons solution mutual exclusion problem
1995,automated temporal reasoning reactive system,growing need reliable method designing correct reactive system computer operating system air traffic control system widely agreed certain formalism temporal logic coupled automated reasoning support provide effective reliable mean specifying ensuring correct behavior system paper discus known complexity expressiveness  number logic common use describes key technical tool obtaining essentially optimal mechanical reasoning algorithm however emphasis underlying intuition broad theme rather technical intricacy
1995,method mu-calculus model checking tutorial abstract,n/a
1995,utilizing symmetry model checking fairness assumption automata-theoretic approach,one useful technique combating state explosion problem exploit symmetry  performing temporal logic model checking    shown using basic notion group theory symmetry may exploited full range correctness property expressible expressive temporal logic ctl* surprisingly fairness property readily expressible ctl* method powerful enough admit amelioration state explosion fairness assumption involved show nonetheless possible handle fairness efficiently trading group theory automaton theory automata-theoretic approach  depends detecting fair path subtly encoded permutation annotated quotient structure using threaded structure “physically” reflect coordinate permutation
1995,efficient automation temporal reasoning,n/a
1995,reasoning ring,ring useful mean structuring concurrent process process communicate passing token fixed direction process posse token allowed make certain move usually correctness property expected hold irrespective size ring show problem checking many useful correctness property ring size reduced checking ring small size  depend process finite state illustrate  example
1994,new approach modularity rule-based programming,describe purely declarative method introducing modularity forward-chaining rule-based language embodiment venus rule language method enforced syntax language includes ability parameterize rule group drawing two three venus application developed date illustrate form modularity contributes directly resolution certain software engineering problem associated rule languages< >
1993,distributed real-time system specification verification aptl,article propose language asynchronous propositional temporal logic  specification verification distributed hard real-time sytems aptl extends logic tptl dealing explicitly multiple local clock propose distributed-system model permit definition inequality asserting temporal precedence local clock reading show expressiveness aptl two nontrivial example logic used specify reason important property bounded clock rate drifting give  tableau-based decision procedure determining aptl satisfiability n size  input formula
1993,model-checking fragment µ-calculus,paper considered two different fragment μ-calculus logic l l gave model checking algorithm logic l l complexity length formula n size structure shown logic l expressive ectl* given  addition  shown model checking problem μ-calculus equivalent non-emptiness problem parity tree automatait interesting investigate model checking algorithm logic l l complexity instead omn course determining model checking problem full μ-calculus p also open problem
1993,symbolic model checking distributed real-time system,paper examine symbolic model checking problem distributed real-time system time represented real number multiple clock allowed symbolic model checking algorithm proposed algorithm handle timing constraint written inequality whose two side refer reading local clock timing inequality used trigger transition multiclock continuously timed automaton  variation timed safety automaton  propose specification language distributed real-time system also propose mtctl extension tctl introduction multiple local clock specifying system behavior verifiedthere three major contribution paper first give symbolic model checking algorithm timed safety automaton tctl naturally make use bdd approach bryant burch et al avoids complication  second propose unified approach checking real-time state property treating inequality proposition governed axiom elegant way represent finite structure state space also suitable symbolic manipulation third introduce mtctl mcta together new tool specifying reasoning distributed real-time system behavior allows different granularity local clock clock jitter
1992,efficient temporal satisfiability,n/a
1992,quantitative temporal reasoning,substantially large class program operate distributed real-time environment integral part correctness specification requires expression time-critical property relate occurrence event system focus formal specification reasoning correctness program propose system temporal logic rtctl  allows melding qualitative temporal assertion together real-time constraint permit specification reasoning twin level abstraction qualitative quantitative argue many practically useful correctness property temporal system need express timing essential part functionality requirement expressed rtctl develop model-checking algorithm rtctl whose complexity linear size rtctl specification formula size structure also present essentially optimal exponential time tableau-based decision procedure satisfiability rtctl formula finally consider several variant extension rtctl real-time reasoning
1992,formal specification ssynchronous distributed real-time system aptl,n/a
1991,tree automaton mu-calculus determinacy extended abstract,shown propositional mu-calculus equivalent expressive power finite automaton infinite tree since complementation trivial mu-calculus equivalence provides radically simplified alternative proof mo rabins  complementation lemma tree automaton heart one deepest decidability  also shown mu-calculus used establish determinacy infinite game used earlier proof complementation lemma certain game used theory online algorithms< >
1991,real-time mu-calculus preliminary report,argue mu-calculus provides conceptually advantageous framework specifying reasoning real-time system show mechanical reasoning done efficiently quantitative formulation mu-calculus work also suggests new complexity theory reactive system
1990,limit efficient temporal decidability extended abstract,analysis made contribution temporal operator alone complexity deciding temporal logic suppressing role usual boolean connective play determining lower bound complexity decision procedure several temporal logic exhibited state many property useful describing temporal system restrict combination temporal boolean operator decidable low deterministic polynomial time also shown relaxing constraint placed syntax logic  intractability thereby demonstrating fine line separating tractably decidable set temporal formula intractable ones< >
1990,decidable temporal logic reason many process,much interest decision procedure testing satisfiability formula various system temporal logic due potential application decision procedure mechanical synthesis concurrent program specification however formula classical temporal logic express specification fixed number process thus use mechanical synthesis suffers two limitation viz state explosion problem inability describe dynamic system one number process could vary adapt external demand paper present indexed temporal logic indexed simplified computation tree logic  used specify program arbitrarily many similar process view synthesizing program mechanically specification pose two new decision problem almost always satisfiability almost always unsatisfiability show problem decidable indexed sctl fact every indexed sctl specification either almost always satisfiable ie realized concurrent program provided number constituent process exceeds certain value depends specification  almost always unsatisfiable ie concurrent program certain number  process ever realize specification finally show  could used automate synthesis concurrent system meet desired indexed sctl specification almost always satisfiable 
1989,automaton theoretic decision procedure propositional mu-calculus,propositional mu-calculus propositional logic program incorporates least fixpoint operator subsumes propositional dynamic logic fischer ladner infinite looping construct streett game logic parikh give elementary time decision procedure using reduction emptiness problem automaton infinite tree small model theorem obtained corollary
1989,simultaneously determinizing complementing omega-automata extended abstract,author give construction determine complement simultaneously buchi automaton infinite string exponential blowup state linear blowup number pair exponential lower bound already known previous best construction double exponential present result permit exponentially improved essentially optimal decision procedure various modal logic program also give exponentially improved conversion various kind omega automata< >
1989,efficient temporal reasoning,much interest decision procedure testing satisfiability  formula various system temporal logic due potential application decision procedure mechanical reasoning correctness concurrent program show exist temporal logic  decidable polynomial time  still useful application one surprising corollary  fragment ctl  actually used emerson & clarke  synthesize concurrent program temporal specification decidable polynomial time another verification many correctness property concurrent program  efficiently automated demonstrates many useful correctness property expressed rather restricted syntax finally  provide insight relation structural  complexity temporal logic complexity decision problem
1989,synthesis concurrent system many similar sequential process,method synthesizing concurrent program temporal logic specification based use decision procedure testing temporal satisfiability proposed emerson & clarke  manna & wolper  important advantage synthesis method obviate need manually compose program manually construct proof correctness one formulate precise problem specification synthesis method mechanically construct correct solution serious drawback method practice however suffer state explosion problem synthesize concurrent system consisting k sequential process n state local transition diagram requires construction global product-machine least nk global state general exponential growth k make infeasible synthesize system composed   process paper show synthesize concurrent system consisting many  similar sequential process approach avoids construction global product-machine k process instead construct two process product-machine single pair generic sequential process method uniform k providing simple template instantiated process yield solution fixed k method also illustrated synchronization problem literature
1988,complexity tree automaton logic program extended abstract,computational complexity testing nonemptiness finite-state automaton infinite tree investigated shown tree automaton state n pair nonemptiness tested time o/sup n/ even though problem general np-complete nonemptiness algorithm used obtain exponentially improved essentially tight upper bound numerous important modal logic program interpreted usual semantics structure generated binary relation example shown satisfiability full branching time logic ctl* tested deterministic double exponential time also follows satisfiability propositional dynamic logic repetition construct  propositional mu-calculus  tested deterministic single exponential time< >
1988,branching time temporal logic,many important parallel computer program exhibit ongoing behaviour characterized naturally term infinite execution trace organized “branching” tree reflect high degree nondeterminism inherent parallel computation paper give systematic account branching time temporal logic provide formal system describing reasoning correct behaviour program several system branching time temporal logic appeared literature presented significant related issue axiomatizations decision procedure satisfiability model checking problem discussed applicability axiomatizations formulate deductive system temporal logic reason correctness concurrent program described decision procedure task mechanical synthesis verification comparison relative expressive power system branching time temporal logic also presented ability specify important correctness property program including involve fairness discussed moreover expressiveness related expressiveness corresponding linear time temporal logic well standard formalism monadic second-order theory many successor finite-state tree automaton finally comparison undertaken branching time temporal logic linear time one particularly respect adequacy application specifying reasoning correctness concurrent program
1987,uniform inevitability tree automaton ineffable,short article consider limit expressive power finite automaton infinite tree exhibit surprisingly simple correctness property uniform inevitability definable type finite automaton infinite tree
1987,modality model checking branching time logic strike back,consider automatic verification finite state concurrent program global state graph program viewed finite  structure amodel checking algorithm given determining given structure model specification expressed propositional temporal logic paper present unified approach efficient model checking broad class generalized fairness constraint branching time framework extending clarke et al  method applies type fairness expressed certain canonical form almost ‘practical’ type fairness literature including fundamental notion impartiality weak fairness strong fairness succintly written canonical form moreover branching time approach easily adapted handle type fairness  cannot even expressed linear temporal logic go argue branching time logic always better linear time logic model checking show given model checking algorithm system linear time logic  model checking algorithm order complexity  corresponding full branching time logic trivially subsumes linear time logic expressive power  also consider application work theory finite automaton infinite string
1986,sometimes never revisited branching versus linear time temporal logic,difference appropriateness branching versus linear time temporal logic reasoning concurrent program studied issue previously considered lamport facilitate careful examination issue language ctl* universal existential path quantifier prefix arbitrary linear time assertion defined expressive power number sublanguages compared ctl* also related logic mpl abrahamson pl harel kozen parikh paper concludes comparison utility branching linear time temporal logic
1986,automatic verification finite-state concurrent system using temporal logic specification,give efficient procedure verifying finite-state concurrent system meet specification expressed  temporal logic algorithm complexity linear size specification size global state graph concurrent system also show approach adapted handle fairness argue technique provide practical alternative manual proof construction use mechanical theorem prover verifying many finite-state concurrent system experimental  show state machine several hundred state checked matter second
1986,efficient model checking fragment propositional mu-calculus extended abstract,n/a
1986,temporal reasoning generalized fairness constraint,n/a
1985,decision procedure expressiveness temporal logic branching time,consider computation tree logic  proposed  – extends unified branching time logic   adding operator established ctl small model property showing satisfiable ctl formula satisfiable small finite model obtained small “pseudomodel” resulting fischer-ladner quotient construction exponential time algorithm given deciding satisfiability ctl axiomatization ub given ibid extended complete axiomatization ctl finally relative expressive power family temporal logic obtained extending restricting syntax ub ctl studied
1985,automaton tableau temporal logic extended abstract,n/a
1985,modality model checking branching time strike back,n/a
1984,deciding full branching time logic,paper full branching time logic  studied basic modality consisting path quantifier either  e  followed arbitrary linear time assertion composed unrestricted combination usual linear temporal operator f  g  x  u  shown problem determining ctl* formula satisfiable structure generated binary relation decidable triple exponential time decision procedure exploit special structure finite state ω-automata linear temporal formula allows determinized single exponential blowup size also expressive power tree automaton compared ctl* augmented quantified auxillary proposition
1984,propositional mu-calculus elementary,propositional mu-calculus propositional logic program incorporates least fixpoint operator subsumes propositional dynamic logic fischer ladner infinite looping construct streett game logic parikh give elementary time decision procedure using reduction emptiness problem automaton infinite tree small model theorem obtained corollary
1984,deciding branching time logic,paper study full branching time logic  path quantifier either  e  prefix assertion composed arbitrary combination usual linear time operator f  g  x  u  show problem determining ctl* formula satisfiable structure generated binary relation decidable triple exponential time decision procedure exploit special structure finite state ω-automata linear temporal formula allows determinized single exponential blowup size also compare expressive power tree automaton ctl* augmented quantified auxillary proposition
1983,alternative semantics temporal logic,relationship alternative underlying semantics temporal logic studied number constraint allowable set computation path built logic try ensure abstract computation path semantics concurrent program accurately reflects essential aspect ‘real’ concurrent program three constraint suffix closure  fusion closure  limit closure  another common constraint set path r-generable ie generated binary relation  show first three constraint independent others conjunction precisely equivalent fourth constraint
1983,deciding branching time logic triple exponential decision procedure ctl*,paper study full branching time logic  path quantifier either  e  prefix assertion composed arbitrary combination usual linear time operator f  g  x  u  show problem determining ctl* formula satisfiable structure generated binary relation decidable triple exponential time decision procedure exploit special structure finite state -automata linear temporal formula allows determinized single exponential blowup size also compare expressive power tree automaton ctl* augmented quantified auxillary proposition
1983,automatic verification finite state concurrent system using temporal logic specification practical approach,give efficient procedure verifying finite state concurrent system meet specification expressed  branching-time temporal logic algorithm complexity linear size specification size global transition graph concurrent system also show logic algorithm modified handle fairness argue technique provide practical alternative manual proof construction use mechanical theorem prover verifying many finite state concurrent system
1983,sometimes never revisited branching versus linear time,temporal logic   provides formalism describing occurrence event time suitable reasoning concurrent program  defining temporal logic two possible view regarding underlying nature time one time linear moment one possible future time branching tree-like nature moment time may split alternate course representing different possible future depending upon view chosen classify  system temporal logic either linear time logic semantics time structure linear system branching time logic based semantics corresponding branching time structure modality temporal logic system usually reflect semantics regarding nature time thusin logic linear time temporal operator provided describing event along single time path  contract logic branching time operator reflect branching nature time allowing quantification possible future cf controversy arisen computer science community regarding difference appropriateness branching versus linear time temporal logic landmark paper  intended clarify logical foundation application temporal logic concurrent program lamport address issue defines single language based temporal operator always sometimes two distinct interpretation language given first interpretation formula make assertion path whereas second interpretation make assertion state lamport associate former linear time latter branching time  compare expressive power linear time branching time logic based comparison argument concludes branching time logic suitable reasoning nondeterministic program linear time logic preferable reasoning concurrent programsin paper re-examine lamports argument reach somewhat different first point technical difficulty formalism  instance definition expressive equivalence lead paradoxical situation satisfiable formula classified equivalent false moreover proof  comparing expressive power apply case structure generated binary relation like used logic   give refined basis comparing expressive power avoids technical difficulty turn expressibility  corresponding lamports still hold however emphasized  apply two particular system defines sweeping regarding branching versus linear time logic general justified basiswe argue several different aspect problem designing reasoning concurrent program specific modality needed logic depend precise nature purpose intended make general observation regarding choice system branching linear time believe linear time logic generally adequate verifying correctness pre-existing concurrent program verification purpose typically interested property hold computation path thus satisfactory pick arbitrary path reason however application need ability assert existence alternative computation path provided branching time logic arises nondeterminism - beyond used model concurrency - present many concurrent program order give complete specification program must ensure viable computation path corresponding nondeterministic choice program might make  neither lamports system entirely adequate applicationsin order examine issue carefully define language ctl* universal existential path quantifier prefix arbitrary linear time assertion ctl* extension computation tree logic ctl defined  studied  language subsumes lamports interpretation allows u compare branching linear time moreover syntax ctl* make clear interpretation intendedthe paper organized follows section  summarize lamports approach discus limitation section  present syntax semantics ctl* also define natural sublanguages ctl* compare expressive power section  particular show  language substantially le expressive ctl* still subsumes lamports interpretation section  show ctl* embedded mpl  pl  finally section  concludes comparison utility branching linear time logic
1982,using branching time temporal logic synthesize synchronization skeleton,present method constructing concurrent program synchronization skeleton program automatically synthesized  temporal logic specification synthesis method us decision procedure based finite model property logic determine satisfiability specification formula f f satisfiable model f finite number state constructed synchronization skeleton program meeting specification read model f unsatisfiable specification inconsistent
1981,design synthesis synchronization skeleton using branching-time temporal logic,shown possible automatically synthesize synchronization skeleton concurrent program temporal logic specification believe approach may long run turn quite practical since synchronization skeleton general quite small potentially exponential behavior algorithm need insurmountable obstacle much additional research needed however make approach feasible practicewe also described model checking algorithm applied mechanically verify finite state concurrent program meet particular temporal logic specification believe practical software tool based technique could developed near future indeed already programmed experimental implementation model checker dec / harvard* certain application seem particularly suited model checker approach verification one example problem verifying correctness existing network protocol many coded finite state machine encourage additional work area
1980,characterizing correctness property parallel program using fixpoints,shown correctness property parallel program described using computation tree description fixpoint characterization generated also given condition form computation tree description ensure correctness property characterized using continuous fixpoints consequence correctness property inevitability fair scheduling characterized least fixpoint monotonic noncontinuous transformer cannot characterized using fixpoints continuous transformer  hence currently known proof rule applicable  investigating whether useful proof rule exist correctness property monotonic noncontinuous least fixpoint characterization addition examining alternate notion fairness continuous fixpoint characterization
