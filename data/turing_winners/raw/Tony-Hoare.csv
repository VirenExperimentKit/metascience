2019,"Logic, Algebra, and Geometry at the Foundation of Computer Science."
2019,"A Calculus of Space, Time, and Causality: Its Algebra, Geometry, Logic."
2016,Developments in concurrent Kleene algebra.
2016,A Discrete Geometric Model of Concurrent Program Execution.
2015,Exploring an Interface Model for CKA.
2014,The laws of programming unify process calculi.
2014,Developments in Concurrent Kleene Algebra.
2014,Laws of Programming: The Algebraic Unification of Theories of Concurrency.
2014,Laws of concurrent programming.
2013,Unifying Semantics for Concurrent Programming.
2013,Generic Models of the Laws of Programming.
2013,Laws of programming with concurrency (Invited Talk).
2012,In praise of algebra.
2012,Net Models for Concurrent Object Behaviour.
2012,Algebra of concurrent design.
2012,The Laws of Programming Unify Process Calculi.
2012,Message of thanks: on the receipt of the 2011 ACM SIGPLAN distinguished achievement award.
2012,Algebra Unifies Operational Calculi.
2011,Concurrent Kleene Algebra and its Foundations.
2011,Recovery Blocks.
2011,On Locality and the Exchange Law for Concurrent Processes.
2011,Unifying Models of Data Flow.
2011,Software and Systems Safety - Specification and Verification.
2010,Fine-grain concurrency.
2010,CSP is a retract of CCS.
2010,Unraveling a Card Trick.
2010,"Differential static analysis: opportunities, applications, and challenges."
2010,"Testing and Proving, Hand-in-Hand."
2009,Viewpoint - Retrospective: an axiomatic basis for computer programming.
2009,Preface to special issue on software verification.
2009,The verified software initiative: A manifesto.
2009,Graphical models of separation logic.
2009,Foundations of Concurrent Kleene Algebra.
2009,Concurrent Kleene Algebra.
2008,Verification of Fine-grain Concurrent Programs.
2008,Separation Logic Semantics for Communicating Processes.
2008,Keynote: A Vision for the Science of Computing.
2008,"Verified Software: Theories, Tools, Experiments."
2008,Fine-Grain Concurrency.
2008,Compensable Transactions.
2007,The Ideal of Program Correctness: Third Computer Journal Lecture.
2007,Science and Engineering: A Collusion of Cultures.
2007,Fine-grain Concurrency.
2006,Why ever CSP?
2006,Intelligent Systems and Formal Methods in Software Engineering.
2006,The verified software repository: a step towards the verifying compiler.
2006,The ideal of verified software.
2006,The Ideal of Verified Software.
2006,Proving correctness of highly-concurrent linearisable objects.
2006,CSP Is a Retract of CCS.
2005,Grand Challenges for Computing Research.
2005,Comparing Two Approaches to Compensable Flow Composition.
2005,Linking Theories of Concurrency.
2005,"The Verifying Compiler, a Grand Challenge for Computing Research."
2005,"Verified Software: Theories, Tools, Experiments Vision of a Grand Challenge Project."
2004,Process Algebra: A Unifying Approach.
2004,Towards the Verifying Compiler.
2004,A Trace Semantics for Long-Running Transactions.
2004,Stuck-Free Conformance.
2003,Assertions: A Personal Perspective.
2003,The verifying compiler: A grand challenge for computing research.
2003,The Verifying Compiler: A Grand Challenge for Computing Research.
2003,The Verifying Compiler: A Grand Challenge for Computing Research.
2003,The Verifying Compiler: A Grand Challenge for Computing Research.
2003,The Verifying Compiler: A Grand Challange for Computing Research.
2002,In memoriam: Edsger W. Dijkstra 1930-2002.
2002,Assertions in Modern Software Engineering Practice.
2002,Assertions in Programming: From Scientific Theory to Engineering Practice.
2002,Towards the Verifying Compiler.
2002,Assertions: A Personal Perspective.
2002,An Axiomatic Basis for Computer Programming (Reprint).
2002,Proof of Correctness of Data Representations (Reprint).
2001,Legacy.
2001,Growing Use of Assertions.
2000,A Hard Act to Follow.
2000,Unifying theories of healthiness condition.
2000,Algebraic derivation of an operational semantics.
2000,Legacy Code.
2000,Assertions.
1999,Linking Theories in Probabilistic Programming.
1999,Theories of Programming: Top-Down and Bottom-Up and Meeting in the Middle.
1999,A Trace Model for Pointers and Objects.
1999,Theories of Programming: Top-Down and Bottom-Up and Meeting in the Middle.
1999,Algebra of Logic Programming.
1999,A Semantics for Imprecise Exceptions.
1998,Unifying theories of programming.
1997,Unifying Theories for Parallel Programming.
1996,Unifying Theories : A Personal Statement.
1996,The logic of engineering design.
1996,How Did Software Get So Reliable Without Proof?
1996,"The Role of Formal Techniques: Past, Current and Future or How Did Software Get so Reliable without Proof? (Extended Abstract)."
1996,Mathematical models for computing science.
1995,Sequential Calculus.
1995,Unification of Theories: A Challenge for Computing Science.
1994,Editorial.
1994,Provably Correct Systems.
1994,Hardware and Software: The Closing Gap.
1993,Normal Form Approach to Compiler Design.
1993,From Algebra to Operational Semantics.
1993,Algebra and Models.
1992,A Model for Synchronous Switching Circuits and its Theory of Correctness.
1992,Programs are Predicates.
1992,Algebra and Models.
1991,The transputer and occam: A personal story.
1991,A Calculus of Durations.
1991,Pre-Adjunctions in Order Enriched Categories.
1991,A Theory for the Derivation of Combinational C-MOS Circuit Designs.
1990,Fixed Points of Increasing Functions.
1990,Let's Make Models (Abstract).
1990,A Theory of Synchrony and Asynchrony.
1990,A Theory of Conjunction and Concurrency.
1990,"VDM '90, VDM and Z - Formal Methods in Software Development, Third International Symposium of VDM Europe, Kiel, FRG, April 17-21, 1990, Proceedings."
1989,Categorical Semantics for Programming Languages.
1989,The Varieties of Programming Language.
1988,The Laws of Occam Programming.
1988,Partial Correctness of C-MOS Switching Circuits: An Exercise in Applied Logic.
1987,Laws of Programming.
1987,An Overview of Some Formal Methods for Program Design.
1987,Algebraic Specification and Proof of a Distributed Recovery Algorithm.
1987,The Weakest Prespecification.
1987,Prespecification in Data Refinement.
1986,Specification-Oriented Semantics for Communicating Processes.
1986,Data Refinement Refined.
1985,Communicating Sequential Processes.
1985,A Couple of Novelties in the Propositional Calculus.
1985,The Mathematics of Programming.
1985,JSD Expressed in CSP.
1984,A Theory of Communicating Sequential Processes.
1984,Programming: Sorcery or Science?
1984,Programs as Executable Predicates.
1983,An Axiomatic Basis for Computer Programming (Reprint).
1983,Communicating Sequential Processes (Reprint).
1983,A More Complete Model of Communicating Processes.
1983,Workshop on Analysis of Concurrent Systems Attempt at problem 3: The Firing Squad.
1983,Workshop on Analysis of Concurrent Systems Attempt at Problem 10: The Matrix Switch.
1983,Specification of a simplified Network Service in CSP.
1983,Specification-Oriented Semantics for Communicating Processes.
1981,The Emperor's Old Clothes.
1981,A Calculus of Total Correctness for Communicating Processes.
1981,Partial Correctness of Communicating Sequential Processes.
1981,Ambiguities and Insecurities in Pascal.
1980,A Theory of Nondeterminism.
1980,A Model for Communicating Sequential Processes.
1979,"Semantics of Nondeterminism, Concurrency, and Communication."
1978,Communicating Sequential Processes.
1978,Some Properties of Predicate Transformers.
1978,Software Engineering: A Keynote Address.
1978,"Semantics of Nondeterminism, Concurrency and Communication (Extended Abstract)."
1977,Fast Fourier Transform Free From Tears.
1977,Ambiguities and Insecurities in Pascal.
1976,Parallel Programming: An Axiomatic Approach.
1976,Quasiparallel Programming.
1975,Matrix Reduction - An Efficient Method.
1975,Recursive data structures.
1975,Parallel programming: an axiomatic approach.
1975,Proof of correctness of data representation.
1975,The structure of an operating system.
1974,Consistent and Complementary Formal Theories of the Semantics of Programming Languages.
1974,Monitors: An Operating System Structuring Concept.
1974,Optimization of Store Size for Garbage Collection.
1973,An Axiomatic Definition of the Programming Language PASCAL.
1973,A Structured Paging System.
1973,A General Conservation Law for Queueing Disciplines.
1972,Structured programming.
1972,Program Proving: Jumps and Functions.
1972,Proof of Correctness of Data Representations.
1972,Proof of a structured program: 'the sieve of Eratosthenes'.
1972,Incomputability.
1972,An axiomatic definition of the programming language PASCAL.
1971,Proof of a Program: FIND.
1971,Proof of a Recursive Program: Quicksort.
1971,Procedures and parameters: An axiomatic approach.
1969,An Axiomatic Basis for Computer Programming.
1968,Data structures in two-level store.
1966,A contribution to the development of ALGOL.
1964,Review: Book review: ALGOL on the KDF9.
1963,The Elliott ALGOL input/output system.
1963,Book Reviews.
1962,Quicksort.
1962,Report on the Elliott ALGOL Translator.
1961,Algorithm 63: partition.
1961,Algorithm 65: find.
1961,Algorithm 64: Quicksort.
