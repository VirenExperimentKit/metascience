1998,"The History of Fortran I, II, and III.","Abstract:
The article discusses attitudes about ""automatic programming"", the economics of programming, and existing programming systems, all in the early 1950s. It describes the formation of the Fortran group, its knowledge of existing systems, its plans for Fortran, and the development of the language in 1954. It describes the development of the optimizing compiler for Fortran I, of various language manuals, and of Fortran II and III. It concludes with remarks about later developments and the impact of Fortran and its successors on programming today."
1985,From Function Level Semantics to Program Transformation and Optimization.,"Abstract
The software crisis results from our disorderly concepts of ""program"". These make programming an art, rather than an engineering discipline. Such a discipline would at least require that we have stocks of useful off-the-shelf programs and collections of standard theorems that can be applied repeatedly. We have neither.
Mathematical systems are often distinguished by a set of operations that (a) map a set of entities into itself, (b) have simply understood results, and (c) obey a set of strong algebraic laws. Neither conventional programs nor ""object level"" functional programs are entities belonging to such a system. The standard operations on conventional programs violate (b) and (c); object level functional programs normally employ lambda abstraction as their program building operation and it violates (a) and (c). Other problems of these program concepts are reviewed.
Function level programs are the entities of just such a mathematical system: programs are built by program-forming operations having good algebraic properties. Hence they are the subject of a large number of general theorems, theorems that are applicable in practice. We give examples. Function level programs also have the possibility of providing solutions to many of the other problems reviewed.
The paper reviews the function level FP system of programs, sketches a function level semantics for it, and from the equations of that semantics develops some moderately general results concerning linear, recursively defined functions, one concerning recursion removal. It then discusses other general, directly applicable results in the literature and shows that they are essentially function level results and are best presented and recognized in that form.
The final section is about optimization; it shows how some FP programs can be transformed into others that run as fast as Fortran programs. It introduces ""Fortran constructs"" into FP, pure functions that have an obvious corresponding Fortran-like program. It exhibits a number of function level identities for these constructs and shows how these can be used to convert inefficient FP programs into efficient Fortran-like ones."
1981,Function level programs as mathematical objects.,"Most programs written today are object-level programs. That is, programs describe how to combine various “objects” (i.e., numbers, symbols, arrays, etc.) to form other objects until the final “result objects” have been formed. New objects are constructed from existing ones by the application of various object-to-object functions such as + or matrix inversion. Conventional, von Neumann programs are object level; “expressions” on the right side of assignment statements are exclusively concerned with building an object that is then to be stored. Lambda calculus based languages, such as LISP and ISWIM [Landin 66], are also, in practice, object level languages, although they have the means to be more."
1981,"The Algebra of Functional Programs: Function Level Reasoning, Linear Equations, and Extended Definitions.",n/a
1979,"The History of FORTRAN I, II and III.","Abstract:
This article discusses attitudes about ""automatic programming,"" the economics of programming, and existing programming systems, all in the early 1950s. It describes the formation of the FORTRAN group, its knowledge of existing systems, its plans for FORTRAN, and the development of the language in 1954. It describes the development of the optimizing compiler for FORTRAN I, of various language manuals, and of FORTRAN II and III. It concludes with remarks about later developments and the impact of FORTRAN and its successors on programming today."
1978,Can Programming Be Liberated From the von Neumann Style? A Functional Style and its Algebra of Programs.,"Conventional programming languages are growing ever more enormous, but not stronger. Inherent defects at the most basic level cause them to be both fat and weak: their primitive word-at-a-time style of programming inherited from their common ancestor—the von Neumann computer, their close coupling of semantics to state transitions, their division of programming into a world of expressions and a world of statements, their inability to effectively use powerful combining forms for building new programs from existing ones, and their lack of useful mathematical properties for reasoning about programs. An alternative functional style of programming is founded on the use of combining forms for creating programs. Functional programs deal with structured data, are often nonrepetitive and nonrecursive, are hierarchically constructed, do not name their arguments, and do not require the complex machinery of procedure declarations to become generally applicable. Combining forms can use high level programs to build still higher level ones in a style not possible in conventional languages. Associated with the functional style of programming is an algebra of programs whose variables range over programs and whose operations are combining forms. This algebra can be used to transform programs and to solve equations whose “unknowns” are programs in much the same way one transforms equations in high school algebra. These transformations are given by algebraic laws and are carried out in the same language in which programs are written. Combining forms are chosen not only for their programming power but also for the power of their associated algebraic laws. General theorems of the algebra give the detailed behavior and termination conditions for large classes of programs. A new class of computing systems uses the functional programming style both in its programming language and in its state transition rules. Unlike von Neumann languages, these systems have semantics loosely coupled to states—only one state transition occurs per major computation."
1973,Programming Language Semantics and Closed Applicative Languages.,"This paper proposes axioms to define a sequence of language-classes; the most general is that of ""programming language"", the most restricted has some simple and attractive properties. Here ""language"" is used in its traditional sense as referring to a set of interpreted expressions. We are concerned with the syntax of an expression only to the degree needed to relate its structure to its ""meaning"". A clear distinction is drawn between a ""language"" and the many possible ""realizations"" of that language.This introduction comprises a survey and opinionated discussion of the contents of the paper, therefore the reader who wishes to get on with the technical exposition can skip to the next section."
1964,Fortran.,"Abstract:
The fundamental concepts of FORTRAN, the most widely used high-level, scientific programming language, are set forth and the significant characteristics are described in historical order from inception of FORTRAN in 1954 to the present time. The basic problem of how to get high quality programming from an-easy- to-write high-level language is emphasized."
1963,Revised report on the algorithm language ALGOL 60.,The report gives a complete defining description of the international algorithmic language Algol 60. This is a language suitable for expressing a large class of numerical processes in a form suitably concise for direct automatic translation into the language of programmed automatic computers. 
1963,Revised report on the algorithmic language ALGOL 60.,The report gives a complete defining description of the international algorithmic language Algol 60. This is a language suitable for expressing a large class of numerical processes in a form suitably concise for direct automatic translation into the language of programmed automatic computers. 
1960,Report on the algorithmic language ALGOL 60.,n/a
1959,The syntax and semantics of the proposed international algebraic language of the Zurich ACM-GAMM Conference.,"This paper gives a summary of the syntax and interpretation rules of the proposed international algebraic language put forward by the Zurich ACM-GAMM Conference, followed by a formal , complete presentation of the same information. Notations are presented for numbers, numerical variables, Boolean variables , relations, n-dimensional arrays, functions, operators and algebraic expressions. Means are provided in the language for the assignment of values to variables, conditional execution of statements , iterative procedures, formation of compound statements from sequences of statements, definition of new statements for arbitrary procedures, and the re-use and alteration of program segments. The proposed language is intended to provide convenient and concise means for expressing virtually all procedures of numerical computation while employing relatively few syntactical rules and types of statement."
1954,The IBM 701 Speedcoding System.,n/a
