2002,COOL (comprehensive object-oriented learning).,"The COOL Project (Comprehensive Object-Oriented Learning) is a 3-year research project proposal launched by by a consortium of four Norwegian research institutions, supported by research institutions in Aarhus in Denmark, and co-operating with test sites around the world.COOL will contribute to a unifying process- and object-oriented platform for informatics, and produce a ""Learning Landscape"" of pedagogical and organizational components to be used in a modern and system-oriented education in informatics and related fields. It will provide an alternative to the current pedagogical approach used, commonly regarded as unsuccessful. COOL will co-operate with research institutions in Denmark and with a number of test sites (universities and colleges) around the world, representing a number of language/cultural worlds (Spanish/South American, English/North American, Scandinavian, and perhaps others). COOL will produce an introductory course, supported by a textbook and DVD records containing integrated multimedia material. The COOL Learning Landscape shall allow for alternative courses, adapted to local cultures and conditions."
1997,GOODS to Appear on the Stage.,"Abstract
The lecture will trace the development of some important object-oriented concepts and point out the analogy between performances at the stage of a theatre and the operation of information systems (and program executions). This metaphor will be used in a description of the ideas pursued and developed in the GOODS Project (General Object-Oriented Distributed Systems), a three year project supported by The Norwegian Research Council, starting January 1997. GOODS aims at extending the framework of object-oriented programming to include a multi-layered approach to the organisation of the relationship between people, computer hardware, organisational rules and programs in general distributed systems. GOODS also aims at introducing general tools for specifying visibilities of objects (scopes) and the precise dealing with the identities of objects that exist in many versions in a distributed environment."
1987,"Classification of Actions, or Inheritance also for Methods.","Abstract
The main thing with the sub-class mechanism as found in languages like C++, SIMULA and Smalltalk is its possibility to express specializations. A general class, covering a wide range of objects, may be specialized to cover more specific objects. This is obtained by three properties of sub-classing: An object of a sub-class inherits the attributes of the super-class, virtual procedure/method attributes (of the super-class) may be specialized in the sub-class, and (in SIMULA only) it inherits the actions of the super-class.
In the languages mentioned above, virtual procedures/methods of a super-class are specialized in sub-classes in a very primitive manner: they are simply re-defined and need not bear any resemblance of the virtual in the super-class. In BETA, a new object-oriented language, classes and methods are unified into one concept, and by an extension of the virtual concept, virtual procedures/methods in sub-classes are defined as specializations of the virtuals in the super-class. The virtual procedures/methods of the sub-classes thus inherits the attributes (e.g. parameters) and actions from the ‚Äúsuper-procedure/method‚Äù.
In the languages mentioned above only procedures/methods may be virtual. As classes and procedures/methods are unified in BETA this gives also virtual classes. The paper demonstrates, how this may be used to parameterize types and enforce constraints on types."
1986,Program Development as a Social Activity (Invited Paper).,"The paper discusses social aspects of large scale program and system development, with main emphasis on ""social"" in the meaning ""societal"". Informatics is defined as a science studying ""information processes and related phenomena"", information processes being e.g. program executions by computers and information processing in offices, carried out jointly by people and computers. ""Related phenomena"" are program and system development, the tools available and restrictins imposed upon program development, the knowledge-building processes etc. The concepts of ""process"", ""structure"" and ""system"" are discussed and used in this context. The notion of ""perspective"" is introduced and used to characterize programming styles, attitudes towards program development and levels of emphasis in the study of program development. Agreements and laws regulating system development in Norway are described, and the participation of employees is treated in this context. "
1985,Multi-sequential execution in the BETA programming language.,"The BETA programming language is an object oriented language like SIMULA 67 an d SMALLTALK, but unlike SMALLTALK, BETA belongs to the ALGOL family with 'respect to block structure , scope rules and type checking . The class/subclass, procedure, function and type 'mechanisms of SIMUL A have been unified into one general abstraction mechanism, ó the pattern . Patterns may be used to generat e entities, which correspond to variables, procedure/function activations and objects in SIMULA . The pattern mechanism has been introduced in another paper and will thus only briefly be described here . The purpose of the current paper is to describe how entities in a BETA program execution may execute actions . An entity is always of one of two kinds : either instance or object . An instance is a coroutine, which in specia l cases may be a passive data object or a procedure/function activation . A set of objects may be execute d concurrently or in a mode called alternation . Alternation is a mode of execution where at most one objec t at a time executes actions . At well defined points during execution, another object may take over execution . It will be shown how alternation together with block structure (textual nesting) is an alternative to guarde d input/output commands"
1985,An algebra for program fragments.,"Program fragments are described either by strings in the concrete syntax or by constructor applications in the abstract syntax. By defining conversions between these forms, both may be intermixed. Program fragments are constructed by terminal and nonterminal symbols from the grammar and by variables having program fragments as values. Basic operations such as valuetransfer, composition and decomposition are defined for program fragments allowing more complicated operations to be implemented. Usual operations such as testing for equality are defined, and in addition more specialized operations such as testing that a program fragment is derivable from another and converting program fragments in concrete form to abstract form are defined. By introducing regular expressions in the grammar these may be used in program fragments in concrete form. By defining constructors for regular expressions these may also be used in program fragments in abstract form."
1983,Abstraction Mechanisms in the Beta Programming Language.,"The BETA programming language is developed as part of the BETA project. The purpose of this project is to develop concepts, constructs and tools in the field of programming and programming languages. BETA has been developed from 1975 on and the various stages of the language are documented in [BETA a].
The application area of BETA is programming of embedded as well as distributed computing systems. For this reason a major goal has been to develop constructs that may be efficiently implemented. Furthermore the BETA language is intended to have a few number of basic but general constructs. It is then necessary that the abstraction mechanisms are powerful in order to define more specialized constructs.
BETA is an object oriented language like SIMULA 67 ([SIMULA]) and SMALLTALK ([SMALLTALK]). By this is meant that a construct like the SIMULA class/subclass mechanism is fundamental in BETA. In contrast to SMALLTALK, BETA is a language in the ALGOL 60 ([ALGOL]) family.
SIMULA 67 is a system description and a programming language. The DELTA language ([DELTA]) is a system description language only, allowing description of full concurrency, continuous change and component interaction, developed from a SIMULA conceptual platform. BETA started from the system concepts of DELTA, but is a programming language, drawing upon a large number of contributions to programming research in the 1970s. A basic idea in BETA is to build the language upon one, general abstraction mechanism --- the pattern ([BETA a 77]) --- covering both data, procedural and control abstractions, substituting constructs like class, procedure, function and type.
Correspondingly objects, procedure activation records and variables are all regarded as special cases of the basic building block of program executions: the entity. A pattern thus describes a category of entities with identical structure. An entity consists of a set of attributes and an action-part. An attribute may be a data-item or a pattern. The action-part is a sequence of imperatives that may be executed.
A data-item may be an entity or a reference to an entity. A pattern may be used in a procedure like manner in the sense that an entity (procedure activation record) described by the pattern may be generated and executed as a part of the action sequence of another entity. A pattern may be used to generate entities that execute their action-part in concurrency with other entities. Such entities may also execute their actions interleaved in a coroutine like manner.
Entities may be organized hierarcically by means of a generalization of the SIMULA subclass mechanism. This gives possibilities for grouping common properties of entities of different patterns.
In SIMULA 67 a class may have virtual attributes (procedures, labels, and switches). This is a powerful parameter mechanism that gives the possibility to delay the specification of an attribute to a subclass specification. However, SIMULA 67 lacks the possibility to have virtual class attributes. Furthermore it is necessary to have a runtime check on the parameters of virtual procedures, since it is not possible to specify the parameter list of a virtual procedure. The virtual patterns of BETA is a generalization of the virtual concept in SIMULA 67.
In this paper the sequential part of BETA will be presented. The main purpose is to demonstrate the use of the pattern/subpattern mechanism with virtual patterns as a powerful abstraction mechanism. In addition, a further generalization of the virtual concept based on syntactic categories will be described.
Work has been initiated to design and implement an integrated programming system for BETA. The approach to separate compilation of BETA modules is described in [BETA c].
This paper is organised as follows: Section 2 describes entities, patterns and imperatives. Section 3 describes the subpattern mechanism. Virtual patterns are described in section 4. Section 5 describes the generalization of the virtual concept. In section 6 the remaining elements of BETA not mentioned in the previous sections are described. Finally the syntax of BETA is given in the appendix. Each section with a brief introduction of the relevant language elements whereafter a number of examples are given. Most of the examples are extended versions of Hoare's SmallIntSet [Hoare 72].
There is a distinction between the base language (called basic BETA) and standard BETA. Standard BETA is basic BETA extended with a number of commonly used constructs. These additional constructs may all be regarded as patterns in basic BETA, but will often be given a special syntax. This paper will mainly focus on basic BETA. Occasionally we shall use parts of a standard BETA, but this will be stated at the appropiate place."
1966,SIMULA - an ALGOL-based simulation language.,"This paper is an introduction to SIMULA, a programming language designed to provide a systems analyst with unified concepts which facilitate the concise description of discrete event systems. A system description also serves as a source language simulation program. SIMULA is an extension of ALGOL 60 in which the most important new concept is that of quasi-parallel processing."
