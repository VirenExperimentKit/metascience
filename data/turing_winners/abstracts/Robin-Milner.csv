2013,An inductive characterization of matching in binding bigraphs.,"Abstract
We analyze the matching problem for bigraphs. In particular, we present a sound and complete inductive characterization of matching in bigraphs with binding. Our results yield a specification for a provably correct matching algorithm, as needed by our prototype tool implementing bigraphical reactive systems."
2009,Bigraphical Categories.,"Abstract
Bigraphs are a candidate model that aims to provide a theoretical platform for ubiquitous computing systems. This short paper summarises the categories, and the functors between them, that represent the structure of that theory."
2008,Bigraphs and Their Algebra.,"Abstract
Bigraphs are a framework in which both existing process calculi and new models of behaviour can be formulated, yielding theory that is shared among these models. A short survey of the main features of bigraphs is presented, showing how they can be developed from standard graph theory using elementary category theory. The algebraic manipulation of bigraphs is outlined with the help of illustrations. The treatment of dynamics is then summarised. Finally, origins and some related work are discussed. The paper provides a motivating introduction to bigraphs."
2008,Stochastic Bigraphs.,"Abstract
In this paper we present a stochastic semantics for Bigraphical Reactive Systems. A reduction and a labelled stochastic semantics for bigraphs are defined. As a sanity check, we prove that the two semantics are consistent with each other. We illustrate the expressiveness of the framework with an example of membrane budding in a biological system."
2008,"Categories, Software and Meaning.","Abstract
I am delighted to be able to share in celebrating Ugo’s birthday, if not with a formal paper then at least with some loosely-knit philosophical ideas.
I have worked on ideas similar to Ugo’s for most of our careers. Ugo had much to do with the stream of expert Italians, many now well-known, who travelled from the warmth of Pisa to the romantic but cooler climate of Edinburgh, often to launch their careers with a PhD there. Going further back, I remember with excitement the meeting on parallel processes at Pisa in 1973, organised I believe by Ugo, the first concurrency conference I ever attended."
2007,Local Bigraphs and Confluence: Two Conjectures: (Extended Abstract).,"Abstract
The notion of confluence is studied on the context of bigraphs. Confluence will be important in modelling real-world systems, both natural (as in biology) and artificial (as in pervasive computing). The paper uses bigraphs in which names have multiple locality; this enables a formulation of the lambda calculus with explicit substitutions. The paper reports work in progress, seeking conditions on a bigraphical reactive system that are sufficient to ensure confluence; the conditions must deal with the way that bigraphical redexes can be intricately intertwined. The conditions should also be satisfied by the lambda calculus. After discussion of these issues, two conjectures are put forward."
2007,Matching of Bigraphs.,"Abstract
We analyze the matching problem for bigraphs. In particular, we present a sound and complete inductive characterization of matching of binding bigraphs. Our results pave the way for a provably correct matching algorithm, as needed for an implementation of bigraphical reactive systems."
2006,Ubiquitous Computing: Shall we Understand It?,n/a
2006,Pervasive Process Calculus.,"Abstract
Process calculi with various signatures and reaction rules may provide a theoretical basis for pervasive computing."
2006,Pure bigraphs: Structure and dynamics.,"Abstract
Bigraphs are graphs whose nodes may be nested, representing locality, independently of the edges connecting them. They may be equipped with reaction rules, forming a bigraphical reactive system (Brs) in which bigraphs can reconfigure themselves. Following an earlier paper describing link graphs, a constituent of bigraphs, this paper is a devoted to pure bigraphs, which in turn underlie various more refined forms. Elsewhere it is shown that behavioural analysis for Petri nets, π-calculus and mobile ambients can all be recovered in the uniform framework of bigraphs. The paper first develops the dynamic theory of an abstract structure, a wide reactive system (Wrs), of which a Brs is an instance. In this context, labelled transitions are defined in such a way that the induced bisimilarity is a congruence. This work is then specialised to Brss, whose graphical structure allows many refinements of the theory. The latter part of the paper emphasizes bigraphical theory that is relevant to the treatment of dynamics via labelled transitions. As a running example, the theory is applied to finite pure CCS, whose resulting transition system and bisimilarity are analysed in detail. The paper also mentions briefly the use of bigraphs to model pervasive computing and biological systems."
2006,"Transition systems, link graphs and Petri nets.","A framework is defined within which reactive systems can be studied formally. The framework is based on s-categories, which are a new variety of categories within which reactive systems can be set up in such a way that labelled transition systems can be uniformly extracted. These lead in turn to behavioural preorders and equivalences, such as the failures preorder (treated elsewhere) and bisimilarity, which are guaranteed to be congruential. The theory rests on the notion of relative pushout, which was previously introduced by the authors.

The framework is applied to a particular graphical model, known as link graphs, which encompasses a variety of calculi for mobile distributed processes. The specific theory of link graphs is developed. It is then applied to an established calculus, namely condition-event Petri nets.

In particular, a labelled transition system is derived for condition-event nets, corresponding to a natural notion of observable actions in Petri-net theory. The transition system yields a congruential bisimilarity coinciding with one derived directly from the observable actions. This yields a calibration of the general theory of reactive systems and link graphs against known specific theories."
2006,Journeys in non-classical computation II: initial journeys and waypoints.,n/a
2006,Scientific Foundation for Global Computing.,"Abstract
It is a big honour to be able to speak at one of the most exciting conferences I have been to for 20 years.
I feel in some ways daunted because, although the development of connections between biology and computer science may seem wonderful from outside, we know that they depend crucially on details. We have to believe with confidence that what we have already done justifies bringing the subjects together in this way. I think that’s we are going to see in the later talks. I want to try to anticipate a little bit of that here. But first I want to talk about global computing. We may describe it, fancifully perhaps, as the arrival of a single global computer, which is increasingly pervading lives."
2005,Grand Challenges for Computing Research.,"What are the major research challenges that face the world of computing today? Are there any of them that match the grandeur of well-known challenges in other branches of science? This article is a report on an exercise by the Computing Research Community in the UK to answer these questions, and includes a summary of the outcomes of a BCS-sponsored conference held in Newcastle-upon-Tyne from 29 to 31 March this year.
"
2005,Axioms for bigraphical structure.,"This paper axiomatises the structure of bigraphs, and proves that the resulting theory is complete. Bigraphs are graphs with double structure, representing locality and connectivity. They have been shown to represent dynamic theories for the $\pi$-calculus, mobile ambients and Petri nets in a way that is faithful to each of those models of discrete behaviour. While the main purpose of bigraphs is to understand mobile systems, a prerequisite for this understanding is a well-behaved theory of the structure of states in such systems. The algebra of bigraph structure is surprisingly simple, as this paper demonstrates; this is because bigraphs treat locality and connectivity orthogonally.
"
2005,Journeys in non-classical computation I: A grand challenge for computing research.,n/a
2005,The Spectra of Words.,"Abstract
The k-spectrum of a word is the multiset of its non-contiguous subwords of length k. For given k, how small can n be for a pair of different words of length n to exist, with equal k- spectra? From the Thue-Morse word we find that n is at most 2 k . The construction of this paper decreases this upper bound to θ k , where
≏
is the golden ratio; the construction was found, though not published, over thirty years ago. Recently the bound has been further reduced, but remains considerably greater than the greatest known lower bound."
2005,Embeddings and Contexts for Link Graphs.,"Abstract
Graph-rewriting has been a growing discipline for over three decades. It grew out of the study of graph grammars, in which – analogously to string and tree grammars – a principal interest was to describe the families of graphs that could be generated from a given set of productions. A fundamental contribution was, of course, the double-pushout construction of Ehrig and his colleagues [4]; it made precise how the left-hand side of a production, or rewriting rule, could be found to occur in a host graph, and how it should then be replaced by the right-hand side. This break-through led to many theoretical developments and many applications. It relies firmly upon the treatment of graphs as objects in a category whose arrows are embedding maps."
2004,Theories for the Global Ubiquitous Computer.,"Abstract
This paper describes an initiative to provide theories that can underlie the development of the Global Ubiquitous Computer, the network of ubiquitous computing devices that will pervade the civilised world in the course of the next few decades. We define the goals of the initiative and the criteria for judging whether they are achieved; we then propose a strategy for the exercise. It must combine a bottom-up development of theories in directions that are currently pursued with success, together with a top-down approach in the form of collaborative projects relating these theories to engineered systems that exist or are imminent."
2004,Towards a Broader Theory of Mobile Processes.,"Bigraphs are a topographical model of reactive systems that aim to unify existing theoretical approaches to mobile communicating agents. They combine two structures orthogonally: connectivity and locality. Thus, for example, they represent both ambients and pi-calculus; the topography deals not only with (even physical) locality but also with abstract notions such as the scope of a name. In my talk I shall explain how recent joint work with Jamey Leifer on relative pushouts enables transition systems to be derived for pi-calculus and ambients (in recent work by Ole Jensen), and I shall present condition-event Petri nets as an example."
2003,Bigraphs for Petri Nets.,"Abstract
A simple example is given of the use of bigraphical reactive systems (BRSs). It provides a behavioural semantics for condition-event Petri nets whose interfaces are named condition nodes, using a simple form of BRS equipped with a labelled transition system and its associated bisimilarity equivalence. Both of the latter are derived from the standard net firing rules by a uniform technique in bigraphs, which also ensures that the bisimilarity is a congruence. Furthermore, this bisimilarity is shown to coincide with one induced by a natural notion of experiment on condition-event nets, defined independently of bigraphs.
The paper is intended as a bridge between Petri net theory and bigraphs, as well as a pedagogical exercise in the latter."
2003,Bigraphs and transitions.,"A bigraphical reactive system (BRS) involves bigraphs, in which the nesting of nodes represents locality, independently of the edges connecting them. BRSs represent a wide variety of calculi for mobility, including λ-calculus and ambient calculus. A labelled transition system (LTS) for each BRS is here derived uniformly, adapting previous work of Leifer and Milner, so that under certain conditions the resulting bisimilarity is automatically a congruence. For an asynchronous λ-calculus, this LTS and its bisimilarity agree closely with the standard."
2002,Shallow Linear Action Graphs and their Embeddings.,"Abstract.
Action calculi, which generalise process calculi such as Petri nets, π-calculusand ambient calculus, have been presented in terms of action graphs. We here offer linear action graphs as a primitive basis for action calculi. This paper presents the category of embeddings of undirected linear action graphs without nesting, using a novel form of graphical reasoning which simplifies some otherwise complex manipulations in regular algebra. The results are adapted in a few lines to directed graphs. This work is part of a long-term search for a uniform behavioural theory for process calculi."
2002,Bigraphs as a Model for Mobile Interaction.,"Abstract
A bigraphical reactive system (BRS) involves bigraphs, in which the nesting of nodes represents locality, independently of the edges connecting them. BRSs represent a wide variety of calculi for mobility, including the π-calculus. This short essay explains how bigraphs compose, and uses the π-calculus to illustrate how they already provide elements of a unifying theory for calculi of mobile interactive processes."
2001,The Flux of Interaction.,"Abstract
A graphical model of interactive systems called bigraphs is introduced, resting on the orthogonal treatment of connectivity and locality. The model will be shown to underlie several calculi for mobile systems, in particular the π-calculus and the ambient calculus. Its core behavioural theory will be outlined."
2001,Bigraphical Reactive Systems.,"Abstract
A notion of bigraph is introduced as a model of mobile interaction. A bigraph consists of two independent structures: a topograph representing locality and an edge net representing connectivity. Bigraphs arc equipped with reaction rules to form bigraphical reactive systems (BRSs), which include versions of the π-calculus and the ambient calculus. A behavioural theory is established, using the categorical notion of relative pushout; it allows labelled transition systems to be derived uniformly for a wide variety of BRSs, in such a way that familiar behavioural prcordcrs and equivalences, in particular bisimilarity, are congruential. An example of the derivation is discussed."
2000,Deriving Bisimulation Congruences for Reactive Systems.,"Abstract
The dynamics of reactive systems, e.g. CCS, has often been defined using a labelled transition system (LTS). More recently it has become natural in defining dynamics to use reaction rules - i.e. unlabelled transition rules - together with a structural congruence. But LTSs lead more naturally to behavioural equivalences. So one would like to derive from reaction rules a suitable LTS.
This paper shows how to derive an LTS for a wide range of reactive systems. A label for an agent a is defined to be any context F which intuitively is just large enough so that the agent Fa (“a in context F”) is able to perform a reaction. The key contribution of this paper is a precise definition of “just large enough”, in terms of the categorical notion of relative pushout (RPO), which ensures that bisimilarity is a congruence when sufficient RPOs exist. Two examples - a simplified form of action calculi and term-rewriting - are given, for which it is shown that sufficient RPOs indeed exist. The thrust of this paper is, therefore, towards a general method for achieving useful behavioural congruence relations."
2000,Graphical Theories of Interactive Systems: Can a Proof Assistant Help?,"Abstract
Computer scientists are privileged, or doomed, to deal rigorously with large structures. This happens, of course, with hardware design and verification, and with programs and specifications. Considerable progress has been made with mechanised proof assistance for both. Going further into the back room, programming languages are also big structures. It’s very uncommon to have help from a proof assistant while actually designing a language, probably because the very formalism for writing down what a language means is changing under our feet, so it’s asking too much for those who build proof assistants to keep up with these developments enough to help the designers in real time. All the same, it has been encouraging to see plenty of post hoc verification of properties of Standard ML using its semantic formalism. Perhaps a future language design using “big step structure operational semantics” could be done using proof assistance to check out the sanity of a large set of inference rules before they are frozen into a design."
1997,Graphical Calculi for Interaction (Abstract).,n/a
1997,Strong Normalisation in Higher-Order Action Calculi.,"Abstract
The framework of action calculi accommodates a variety of disciplines of interaction and computation. A general theory of action calculi is under development; each particular action calculus — such as the π-calculus — will possess also a specific theory. It has previously been shown that any action calculus can be extended in a conservative manner to higher-order, thus allowing its actions to be encapsulated and treated as data. The dynamics of each higher-order calculus includes β-reduction, analogous to the λ-calculus. This paper demonstrates that under an assumption on the arities of a higher-order calculus (analogous to the assumption of simple types in the λ-calculus), β-reduction in higher-order action calculi is strongly normalising."
1996,Calculi for Interaction.,n/a
1995,Control Structures: a Model of Interaction.,n/a
1995,Control Structures.,"Abstract:
'Action calculi' are a class of action structures with added structure. Each action calculus AC(/spl Kscr/) is determined by a set /spl Kscr/ of controls, equipped with reaction rules; calculi such as Petri nets, the typed /spl lambda/-calculus and the /spl pi/-calculus are obtained by varying /spl Kscr/. This paper defines for each /spl Kscr/ a category CS(/spl Kscr/), characterized by equational axioms, of action structures with added structure; they are called 'control structures' and provide models of the calculus AC(/spl Kscr/), which is initial in the category. The 'surface' of an action is defined; this is an abstract correlate of the syntactic notion of 'free name'. Three equational characterizations of the surface are found to be equivalent. This permits a non-syntactic treatment of the linkage among the components of an interactive system. Finally, control structures and their morphisms offer a means of classifying the variety of dynamic disciplines in models of concurrency, such as the mobility present in the /spl pi/-calculus but absent in other calculi."
1994,Pi-Nets: A Graphical Form of pi-Calculus.,"Abstract
An, action calculus which closely corresponds to the π-calculus is presented in graphical form, as so-called π -nets. First an elementary form of π-net, with no sequential control, is presented. Then, using a construction by Honda and Tokoro, it is shown informally that by adding a single control construction box to elementary π-nets, the sequential control present in the π-calculus can be recovered. (Another construction, rep, provides replication.) The graphical presentation suggests a few interesting variants of this control regime, which are studied briefly. The main purpose of the paper is to explore informally the power and utility of graphical forms of the π-calculus, in the context of action calculi. It also suggests that graphical forms of other action calculi should be explored."
1994,Computing is Interaction.,n/a
1993,Unique Decomposition of Processes.,"Abstract
In this paper, we examine questions about the prime decomposability of processes, where we define a process to be prime whenever it cannot be decomposed into nontrivial components.
We show that any finite process can be uniquely decomposed into prime processes with respect to bisimulation equivalence, and demonstrate counterexamples to such a result for both failures (testing) equivalence and trace equivalence.
Although we show that prime decompositions cannot exist for arbitrary infinite processes, we motivate but leave as open a conjecture on the unique decomposability of a wide subclass of infinite behaviours."
1993,Modal Logics for Mobile Processes.,"Abstract
In process algebras, bisimulation equivalence is typically defined directly in terms of the operational rules of action; it also has an alternative characterization in terms of a simple modal logic (sometimes called Hennessy-Milner logic). This paper first defines two forms of bisimulation equivalence for the π-calculus, a process algebra which allows dynamic reconfiguration among processes; it then explores a family of possible logics, with different modal operators. It is proven that two of these logics characterize the two bisimulation equivalences. Also, the relative expressive power of all the logics is exhibited as a lattice. The results are applicable to most value-passing process algebras."
1993,Higher-Order Action Calculi.,"Abstract
Action calculi are a broad class of algebraic structures, including a formulation of Petri nets as well as a formulation of the π-calculus. Each action calculus HAC(K) is generated by a particular set K of operators called controls. The purpose of this paper is to extend action calculi in a uniform manner to higher-order. A special case is essentially the extension of the π-calculus to higher order by Sangiorgi. To establish a link between the interactive and functional paradigms of computation, a variety of the λ-calculus is obtained as the extension of the smallest action calculus HAC(θ).
The dynamics of higher-order action calculi is presented, blending communication -for example in process calculi- with reduction as in the λ-calculus. Strong normalisation is obtained for reduction. A set of equational axioms is given for higher-order action calculi. Taking the quotient of HAC(θ) by a single extra axiom η, a cartesian-closed category is obtained.
An ultimate goal of the paper is to combine process calculi and functional calculi, both in their formulation and in their semantics."
1993,An Action Structure for Synchronous pi-Calculus.,"Abstract
After a review of relevant notions, an action structure is presented for the π-calculus. This yields a version of π-calculus which is synchronous in the sense of MEIJE or SCCS, i.e. an arbitrary amount of computation may take place in a single transition. The main new technical result is the construction of an incident set for the action structure, which guarantees a congruential strong bisimilarity for the calculus. The incident set is characterized using a new form of graphical representation for actions."
1993,"Action Calculi, or Syntactic Action Structures.","Abstract
Action structures have previously been proposed as an algebra for both the syntax and the semantics of interactive computation. Here a class of concrete action structures called action calculi is identified, which can serve as a non-linear syntax for a wide variety of models of interactive behaviour. They generalise a previously defined action structure PIC for the π-calculus. One action calculus differs from another only in its generators, called controls.
Several extensions to PIC are given as action calculi, giving essentially the same power as the π-calculus. An action calculus is also outlined for PT nets — a class of Petti nets — parametrized upon their places and transitions.
Finally, action calculi are characterized as the free algebras in a sub-variety of action structures, namely those which satisfy certain additional axioms."
1992,A Compositional Protocol Verification Using Relativized Bisimulation.,"Abstract
The purpose of this paper is to illustrate a compositional proof method for communicating systems; that is, a method in which a property P of a complete system is demonstrated by first decomposing the system, then demonstrating properties of the subsystems which are strong enough to entail property P for the complete system. In any compositional proof method, it is essential that one can abstract away the behavioural aspects of the subsystem which are irrelevant in the context of the complete system. Our method is an extension of the well established notion of bisimulation; it is called relative bisimulation, and was developed specifically to allow for such abstractions. We illustrate the method in a proof of correctness for a version of the Alternating Bit Protocol."
1992,"A Calculus of Mobile Processes, I.","Abstract
We present the π-calculus, a calculus of communicating systems in which one can naturally express processes which have changing structure. Not only may the component agents of a system be arbitrarily linked, but a communication between neighbours may carry information which changes that linkage. The calculus is an extension of the process algebra CCS, following work by Engberg and Nielsen, who added mobility to CCS while preserving its algebraic properties. The π-calculus gains simplicity by removing all distinction between variables and constants; communication links are identified by names, and computation is represented purely as the communication of names across links. After an illustrated description of how the π-calculus generalises conventional process algebras in treating mobility, several examples exploiting mobility are given in some detail. The important examples are the encoding into the π-calculus of higher-order functions (the λ-calculus and combinatory algebra), the transmission of processes as values, and the representation of data structures as processes. The paper continues by presenting the algebraic theory of strong bisimilarity and strong equivalence, including a new notion of equivalence indexed by distinctions—i.e., assumptions of inequality among names. These theories are based upon a semantics in terms of a labeled transition system and a notion of strong bisimulation, both of which are expounded in detail in a companion paper. We also report briefly on work-in-progress based upon the corresponding notion of weak bisimulation, in which internal actions cannot be observed."
1992,"A Calculus of Mobile Processes, II.","Abstract
This is the second of two papers in which we present the π-calculus, a calculus of mobile processes. We provide a detailed presentation of some of the theory of the calculus developed to date, and in particular we establish most of the results stated in the companion paper."
1992,Functions as Processes.,"This paper exhibits accurate encodings of the ?-calculus in the ?-calculus. The former is canonical for calculation with functions, while the latter is a recent step (Milner et al. 1989) towards a canonical treatment of concurrent processes. With quite simple encodings, two ?-calculus reduction strategies are simulated very closely; each reduction in ?-calculus is mimicked by a short sequence of reductions in ?-calculus. Abramsky's precongruence of applicative bisimulation (Abramsky 1989) over ?-calculus is compared with that induced by the encoding of the lazy ?-calculus into ?-calculus; a similar comparison is made for call-by-value ?-calculus.
"
1992,The Polyadic Pi-calculus (Abstract).,"The ?-calculus is a model of concurrent computation based upon the notion of naming. It is first presented in its simplest and original form, with the help of several illustrative applications. Then it is generalized from monadic to polyadic form. Semantics is done in terms of both a reduction system and a version of labelled transitions called commitment; the known algebraic axiomatization of strong bisimilarity is given in the new setting, and so also is a characterization in modal logic. Some theorems about the replication operator are proved."
1992,"The Problem of ""Weak Bisimulation up to"".","Abstract
“Bisimulation up to” is a technique for reducing the size of the relation needed to define a bisimulalion. It works smoothly in the strong case, where it was first introduced ([4]). But this does not directly generalize to the weak case, as erroneously reported in [4]. To overcome this problem, two new “up-to” techniques are proposed: They are respectively based on the use of expansion ([1]) and of almost-weak bisimulation. The second solution is more general than the first one, but expansion enjoys a nicer mathematical treatment. The usefulness and generality of the solutions is motivated with non-trivial examples: two different implementations of a sorting machine."
1992,Barbed Bisimulation.,"Abstract
We propose in this paper barbed bisimulation as a tool to describe bisimulation-based equivalence uniformly for any calculi possessing (a) a reduction relation and (b) a convergency predicate which simply detects the possibility of performing some observable action. This opens interesting perspectives for the adoption of a reduction semantics in process algebras. As a test-case we prove that strong bisimulation of CCS coincides with the congruence induced by barbed bisimulation."
1992,A Semantics for ML Concurrency Primitives.,"We present a set of concurrency primitives for Standard ML. We define these by giving the transitional semantics of a simple language. We prove that our semantics preserves the expected behaviour of sequential programs. We also show that we can define stores as processes, such that the representation has the same behaviour as a direct definition. These proofs are the first steps towards integrating our semantics with the full definition of Standard ML."
1992,Concurrent Processes as Objects.,"Abstract
The π-calculus is a relatively new algebraic calculus for communicating processes, in the tradition of process algebras [1, 3, 4, 5]. It goes a step further than these in one respect: it models processes whose configuration is dynamically varying. This enrichment gives the calculus status as a general computational model. Its main character is what may be called the object paradigm, since it most directly represents the action and reaction among independently existing agents. It also embraces the function paradigm, since both functions (the λ-calculus) and data can be accurately encoded as processes.
A basic knowledge of process algebra can be got from some of the books referred to above. The π-calculus is most clearly derived from CCS [5]; it evolved through work by Nielsen and Engberg [2], and the best introduction is the two-part paper by Milner, Parrow and Walker [7]. The encoding of λ-calculus is done in detail in [6]."
1991,Co-Induction in Relational Semantics.,"Abstract
An application of the mathematical theory of maximum fixed points of monotonic set operators to relational semantics is presented. It is shown how an important proof method which we call co-induction, a variant of Park's (1969) principle of fixpoint induction, can be used to prove the consistency of the static and the dynamic relational semantics of a small functional programming language with recursive functions."
1991,Modal Logics for Mobile Processes.,"Abstract
In process algebras, bisimulation equivalence is typically defined directly in terms of the operational rules of action; it also has an alternative characterisation in terms of a simple modal logic (sometimes called Hennessy-Milner logic. This paper first defines two forms of bisimulation equivalence for the π-calculus, a process algebra which allows dynamic reconfiguration among processes; it then explores a family of possible logics, with different modal operators. It is proven that two of these logics characterise the two bisimulation equivalences. Also, the relative expressive power of all the logics is exhibited as a lattice."
1991,Concurrent Processes as Objects (Abstract).,n/a
1990,Unique decomposition of processes.,"In this paper, we examine questions about the prime decomposability of processes, where we define a process to be prime whenever it cannot be decomposed into nontrivial components.

We show that any finite process can be uniquely decomposed into prime processes with respect to bisimulation equivalence, and demonstrate counterexamples to such a result for both failures (testing) equivalence and trace equivalence.

Although we show that prime decompositions cannot exist for arbitrary infinite processes, we motivate but leave as open a conjecture on the unique decomposability of a wide subclass of infinite behaviours."
1990,Interpreting one Concurrent Calculus in Another.,n/a
1990,Functions as Processes.,"Abstract
This paper exhibits accurate encodings of the λ-calculus in the π-calculus. The former is canonical for calculation with functions, while the latter is a recent step [15] towards a canonical treatment of concurrent processes. With quite simple encodings, two λ-calculus reduction strategies are simulated very closely; each reduction in λ-calculus is mimicked by a short sequence of reductions in π-calculus. Abramsky's precongruence of applicative simulation [1] over λ-calculus is compared with that induced by the encoding of the lazy λ-calculus into π-calculus; a similar comparison is made for call-by-value λ-calculus.
The part of π-calculus which is needed for the encoding is formulated in a new way, inspired by Berry's and Boudol's Chemical Abstract Machine [5]."
1989,A Complete Axiomatisation for Observational Congruence of Finite-State Behaviors.,"Abstract
Finite state automata, with non-determinism and silent transitions, can be interpreted not as subsets of the free monoid as in classical automata theory, but as congruence classes under a congruence relation based upon the notion of weak bisimulation or observational equivalence due to Park and Milner. In this paper a complete axiomatisation for this congruence is presented. It extends the previously known complete axiomatisation by Hennessy and Milner for the case when all computations are finite; the extension consists of five simple rules for recursion."
1988,Some Directions in Concurrency Theory.,n/a
1988,Interpreting One Concurrent Calculus in Another.,n/a
1987,Is Computing an Experimental Science?,n/a
1987,Verifying a Protocol Using Relativized Bisimulation.,n/a
1987,Dialogue with a Proof System.,n/a
1987,A Type Discipline for Program Modules.,"Abstract
The ML modules system is organized around the notions of structure, signature, and functor. A structure is an encapsulated declaration of data types and values, a signature is a “type” or specification of a structure, and a functor is a function taking structures to structures. We present a static semantics for a fragment of this system in the style of Plotkin's operational semantics. The treatment of structures and signatures has interesting parallels with the type assignment rules for ML given by Damas and Milner. In particular there is a notion of principal typing."
1986,Process Constructors and Interpretations (Invited Paper).,n/a
1985,Algebraic Laws for Nondeterminism and Concurrency.,"Since a nondeterministic and concurrent program may, in general, communicate repeatedly with its environment, its meaning cannot be presented naturally as an input/output function (as is often done in the denotational approach to semantics). In this paper, an alternative is put forth. First, a definition is given of what it is for two programs or program parts to be equivalent for all observers; then two program parts are said to be observation congruent if they are, in all program contexts, equivalent. The behavior of a program part, that is, its meaning, is defined to be its observation congruence class. The paper demonstrates, for a sequence of simple languages expressing finite (terminating) behaviors, that in each case observation congruence can be axiomatized algebraically. Moreover, with the addition of recursion and another simple extension, the algebraic language described here becomes a calculus for writing and specifying concurrent programs and for proving their properties."
1984,A Complete Inference System for a Class of Regular Behaviours.,n/a
1984,A Proposal for Standard ML.,n/a
1983,Calculi for Synchrony and Asynchrony.,"Abstract
A calculus for distributed computation is studied, based upon four combinators. A central idea is an Abelian group of actions which models the interfaces between components of a distributed computing agent. Using a notion of bisimulation, congruence relations are defined over computing agents, and thence an algebraic theory is derived. The calculus models both synchronous and asynchronous computation. In particular, it is shown that the author's Calculus of Communicating Systems (1980), which is an asynchronous model, is derivable from the calculus presented here."
1983,Using Algebra for Concurrency: Some Approaches.,"Abstract
This short introduction to an algebraic approach to concurrency has necessarily omitted some intricate details, as well as paying no attention to other algebraic approaches (for example, Vaughan Pratt has suggested an approach which generalises the Kahn networks in a different manner). What we hope to have shown is that four kinds of operator — namely atomic action (α.), summation (+), product (&β or |) and encapsulation (/β or \β) — together give great expressive power, and moreover satisfy interesting algebraic identities.
In a methodology for proof about particular systems, we almost certainly need more than ""just"" algebra. With algebra, we can typically prove equations between agent expressions; we often wish also to prove that an agent possesses some property which is not expressible by an equation. It is therefore important to look at the relation between such algebras and logics — Temporal or Modal logics — designed to express interesting properties of processes.
Another important relationship to study is between the algebraic approach and Net Theory. The emphases of these models are different; communication is the cornerstone of the algebra (in the present approach), while Net Theory emphasizes causal independence, provides a totally different graphical aid to intuition, and provides different tools for abstraction.
Finally, synchronous systems demand some form of treatment. The author has found one way of integrating the above asynchronous algebra with an algebra of synchronous (clocked) systems; this method has some mathematical simplicity — for example, the algebra becomes more conventional, being at least a semi-ring (with agent sum and product as the semi-ring operations) — but is by no means obviously the best integration possible."
1983,Parallel Combinator Reduction Machine.,n/a
1983,Firing Squad.,n/a
1982,Four Combinators for Concurrency.,"An algebraic calculus of asynchronous parallel computation, called CCS (Calculus of Communicating Systems), was developed in [HM,Mil 1]. CCS can express both the semantics of parallel programming languages and the behaviour of data structures (mailbox, random access memory, buffer) which serve as interfaces between independent agents. The primitive notion is 'handshake' communication. The emphasis is upon (i) synthesis from components and (ii) extensionality (meaning = observable behaviour), in contrast with Petri's Net theory which emphasizes causal independence. Here CCS is broadened to embrace synchrony, or systems which depend critically upon the timing of their components. The extension is not adhoc; it is shown that with just four combinators one may both express synchrony and derive CCS in a precise sense. In fact more is gained; it is shown in [Mil 4] how the dynamic reconfiguration of agent linkage, which was outside the scope of the original calculus, may now be expressed. Moreover the four combinators seem, informally speaking, to represent notions which are fully orthogonal to each other, and so to provide a somewhat deeper and intellectually clearer foundation for distributed computation than CCS (which in turn, at its higher level, has some advantages in manipulation). This foundation does not presume a particular abstract notion of process, which in the author's view is still a contentious matter, but rather allows candidates for such a notion to be defined and compared; each such candidate will be a congruence class for some congruence relation in the calculus."
1982,Principal Type-Schemes for Functional Programs.,n/a
1981,A Modal Characterisation of Observable Machine-Behaviour.,n/a
1980,On Observing Nondeterminism and Concurrency.,n/a
1979,Concurrent Processes and Their Syntax.,"A mathematical model of concurrent computation is presented. Starting from synchronized communication as the only primitive notion, a process is defined as a set of communication capabilities. The domain of processes is built using the weak powerdomain construction of Smyth, which evolved from that of Plotkin. A minimal set of operations for composing processes is defined. These operations suggest a corresponding minimal syntax - the language of flowgraphs - in which to specify these compositions. The concept of flow algebra is defined, processes and flowgraphs are examples of flow algebras. Elsewhere it will be shown that flowgraphs are free (over a set of generators) in the category of flow algebras, here it is shown that processes are a flow algebra, and therefore constitute a suitable semantics for flowgraphs. However, we emphasize that the notion of flowgraph evolved from the notion of process and not the reverse."
1979,Flowgraphs and Flow Algebras.,"An algebra G of flowgraphs or nets is presented. It is shown to be a free algebra of a simple equational system F, which is called the laws of flow. This holds both for the algebra of finite nets, and for the algebra of finite or infinite nets in which certain infinite nets may be described by recursion equations. To demonstrate this fact, some results concerning categories of continuous algebras, which are explicit or implicit in the work of the ADJ group, are presented in a self-contained form. It follows that the algebra of processes which satisfies the laws of flow F, is a suitable semantics for flowgraphs. There are, however, many other interpretations of nets, some of which will be studied in subsequent papers. This paper concludes with some simple examples of infinite nets and informally discusses their possible interpretation."
1979,LCF: A Way of Doing Proofs with a Machine.,n/a
1979,An Algebraic Theory for Synchronization.,n/a
1978,A Theory of Type Polymorphism in Programming.,"Abstract
The aim of this work is largely a practical one. A widely employed style of programming, particularly in structure-processing languages which impose no discipline of types, entails defining procedures which work well on objects of a wide variety. We present a formal type discipline for such polymorphic procedures in the context of a simple programming language, and a compile time type-checking algorithm
which enforces the discipline. A Semantic Soundness Theorem (based on a formal semantics for the language) states that well-type programs cannot “go wrong” and a Syntactic Soundness Theorem states that if
accepts a program then it is well typed. We also discuss extending these results to richer languages; a type-checking algorithm based on
is in fact already implemented and working, for the metalanguage ML in the Edinburgh LCF system."
1978,Synthesis of Communicating Behaviour.,n/a
1978,A Metalanguage for Interactive Proof in LCF.,n/a
1977,Fully Abstract Models of Typed lambda-Calculi.,"Abstract
A semantic interpretation
for a programming language L is fully abstract if, whenever
〚
〛
〚
〛
for two program phrases M,N and for all program contexts
[ ], it follows that
〚
〛
〚
〛
. A model
for the language is fully abstract if the natural interpretation
of L in
is fully abstract.
We show that under certain conditions there exists, for an extended typed λ-calculus, a unique fully abstract model."
1972,A calculus for the mathematical theory of computation.,n/a
1971,An Algebraic Definition of Simulation Between Programs.,"A simulation relation between programs is defined which is a quasi-ordering. Mutual simulation is then an equivalence relation, and by dividing out by it we abstract from a program such details as how the sequencing is controlled and how data is represented. The equivalence classes are approximations to the algorithms which are realized, or expressed, by their member programs. A technique is given and illustrated for proving simulation and equivalence of programs; there is an analogy with Floyd's technique for proving correctness of programs. Finally, necessary and sufficient conditions for simulation are given."
1970,Equivalences on Program Schemes.,"A program scheme may be informally described as a program with the interpretation (i.e., the meaning of the basic instructions or standard functions) left unspecified. This paper studies the equivalence of program schemes under different classes of interpretations, with emphasis on those in which the functions are permitted to be partial. Several different equivalence relations are defined, and their interrelationship and solvability examined both for the class of all program schemes, and for each subclass (n≥1) in which the number of registers is at most n."
1968,String Handling in ALGOL.,"DASH (Dynamic ALGOL String Handling) is a set of procedures designed to extend ALGOL to the expression of non-numerical or partly non-numerical algorithms for which it is normally unsuited.
"
