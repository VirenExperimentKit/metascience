2007,Notation as a tool of thought.,"The importance of nomenclature, notation, and language as tools of thought has long been recognized. In chemistry and in botany, for example, the establishment of systems of nomenclature by Lavoisier and Linnaeus did much to stimulate and to channel later investigation. Concerning language, George Boole in his Laws of Thought [1, p.21] asserted ""That language is an instrument of human reason, and not merely a medium for the expression of thought, is a truth generally admitted."
2007,A dictionary of APL.,"APL is a formal, imperative language. Because it is imperative, a sentence may be called an instruction, and may be executed to produce a result. In illustrations used here, an instruction will be indented, and the result of its execution will be shown on the following line without indentation."
1999,Programming Notation in Systems Design.,"Abstract:
In any area of design, systematic design procedures are necessarily based upon methods for the precise and formal description of the entities being designed. Because complex systems commonly embrace elements from a number of disparate disciplines (e.g., computers, programming systems, servomechanisms, accounting systems), there exists no common terminology or notation adequate for the description of an entire complex system, and hence no adequate basis for systematic ‚Äúsystems design‚Äù."
1997,Mathematical roots of J.,n/a
1995,Representations of Recursion.,"Recursive definitions are important tools in mathematics and in programming. They can be represented in a variety of ways, and in this paper we examine the relations and translations between them, using a range of examples for illustration. These examples begin with recursive definitions expressed in conventional mathematical notation, in SHARP APL, and in APL2; most are drawn from published SOUKXS.†"
1994,"TAGS: Trains, Agendas, and Gerunds.","Trains agendas, and gerunds have been available in J for some time, and do not conflict with most APL systems. In particular, since there are no noun trains, the trains in J do not conflict with the strands of APL2. This paper reviews the definitions and uses of trains, agendas, and gerunds, and presents some new extensions that enhance their utility."
1991,A Personal View of APL.,"Abstract:
This essay portrays a personal view of the development of several influential dialects of APL: APL2 and J. The discussion traces the evolution of the treatment of arrays, functions, and operators, as well as function definition, grammar, terminology, and spelling."
1991,Tacit Definition.,n/a
1990,APL\?,"This paper describes a version of APL based upon the dictionary [1], but significantly simplified and enhanced, and directly usable on any machine that provides ASCII characters. It also describes salient features of a C implementation that has been tested on several machines, and is available as freeware. There have been four primary motivations for this work: To provide an APL system for use in teaching mathematics and related topics that is modern, free, and transportable. To devise a spelling scheme based on the ASCII alphabet that preserves the major advantages of the one-letter words based on the special alphabet commonly used in APL. To exploit the advantages of breaking from the strict conformance with earlier APL that is normally obligatory in commercial systems. To explore an unusual style of C programming that makes heavy use of pre-processing facilities. Examples of the use of the language in a variety of topics are provided in an appendix. We are indebted to a number of colleagues for advice and help: Anthony Howe, David Steinbrook, Bob Bernecky, Mark Czerwinski, L.J. Dickey, Jiri Dvorak, James Hui, Eric Iverson, Paul Jackson, and Roland Pesch."
1989,Processing Natural Language Syntactic and Semantic Mechanisms.,"This paper describes a simple approach to language processing. Knowledge of the domain is stored in a three row numeric matrix or semantic net. The meaning of individual words is contained in pointers from each word to the objects in the environment and the relations between these objects. The intersections of these pointers resolves the ambiguity inherent in the multiple meanings of words. The input string is treated as a series of triads, where the result of processing one triad is passed as an argument for the next triad. Parsing into the required noun phrases and verb phrases is done by semantic means (intersection); when words have no semantic pointers, a syntactic parser is utilized."
1989,Phrasal Forms.,n/a
1989,A semantic processor for natural language.,"Abstract:
The problem of the extraction, representation, and utilization of meaning from English text has been elusive. Semantic parsing permits effective and relevant response to complex questions where the domain is well defined. The semantic net used is a three-row numeric matrix. Each column of the net represents an assertion about the domain. The meanings of each word are contained in associations (pointers to the names of things within the domain). The intersection of these pointers is used to define each phrase. Ambiguity is further reduced, when necessary, by an implementation of common sense-limiting the interpretations to those meanings that may be associated as the subject or object of each verb. Multiply embedded clauses are processed by passing the result of one clause as an argument for the next. By this means, complex expressions can be reduced to a single token.<>"
1987,APL87.,"I first began developing a formal language for use in teaching in the graduate program in Automatic Data Processing established by Professor Howard Aiken at Harvard in 1955. This language, now known as APL, has since passed through several phases, the main ones being documented in three publications [1-3]; my book A Programming Language in 1962, the APL\360 manual in 1968, and the APLSV manual in 1975. The last two were co-authored with A.D. Falkoff. The specifications of the language provided by these publications were later supplemented by more philosophical studies that discussed the design principles followed, and the major design choices made. These include The Design of APL [4], and the Evolution of APL [5], by me and Falkoff, and The Story of o, by E.E. McDonnell [6]. Because of implementations produced by various manufacturers, and because of attempts to inject aspects of other languages (as in APLGOL), many diverse lines of development have been pursued. These have been largely reported in manuals, in the proceedings of APL conferences, and in journals such as APL Quote-Quad (Association for Computing Machinery), and Vector (British Computing Society). In 1978 I began a line of development which has been reported largely in documents internal to IBM Corp. [7] and to I.P. Sharp Associates [8-10], but also in APL conferences [11-13]. This work has culminated in A Dictionary of APL, scheduled to appear in an early issue of APL Quote-Quad [14]; in what follows it will be referred to as ‚Äúthe dictionary‚Äù. The present paper is a companion study in the manner of [4-6]. A preview of it was presented in November of last year at an internal IBM conference that commemorated the 20th anniversary of the initiation of the APL timesharing service within IBM. The major points to be discussed here include terminology, the APL alphabet, word formation, parsing rules, mixed functions, operators, and localization. In discussing decisions made in the early days by me and colleagues in the APL group in the T.J. Watson Research Center, (notably A.D. Falkoff and L.M. Breed), I will use the term we; this usage is not meant to imply their agreement with the current thinking of myself and present colleagues at I.P. Sharp Associates as presented in the dictionary. Although there is no current implementation of the entire dictionary, several implementations embody significant parts of it, such as the application of operators to derived and user-defined functions, and the production of ‚Äúmixed‚Äù arrays by expressions such as 3 4 5, 'ABCD'. Two implementations [13, 15] are particularly close to the dictionary; the latter was used in all executed examples in this paper."
1979,Operators.,"Although operators, which apply to functions to produce functions, prove very useful in mathematics, they are absent from most programming languages. This paper illustrates their simplicity and power in terms of the operators of APL, and examines related constructs in other programming languages."
1973,The Design of APL.,"Abstract:
This paper discusses the development of APL, emphasizing and illustrating the principles underlying its design. The principle of simplicity appears most strongly in the minimization of rules governing the behavior of APL objects, while the principle of practicality is served by the design process itself, which relies heavily on experimentation. The paper gives the rationale for many specific design choices, including the necessary adjuncts for system management."
1964,Formalism in programming languages.,n/a
1964,A method of syntax specification.,The addition of a few simple conventions to the Backus Normal Form specification of a language provides a mode of description which is more compact and easier to prepare and use than either the standard BNF description [1] or the corresponding syntactical chart [2].
1964,A Formal Description of SYSTEM/360.,"Abstract:
This paper presents a precise formal description of a complete computer system, the IBM SYSTEM/360 The description is functional: it describes the behavior of the machine as seen by the programmer, irrespective of any particular physical implemention, and expressly specifies the state of every register or facility accessible to the programmer for every moment of system operation at which this information is actually available."
1963,Programming Notation in Systems Design.,"Abstract:
In comparing this programming language with others, it is necessary to consider not only its use in description and analysis (which has been emphasized here), but also its use in the execution of algorithms, i.e., its use as a source language to be translated into computer code for the purpose of automatic execution."
