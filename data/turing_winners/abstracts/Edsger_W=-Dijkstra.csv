2005,My recollections of operating system design.,n/a
2002,"EWD1300: The Notational Conventions I Adopted, and Why.","At a given moment, the concept of polite mathematics emerged, the underlying idea of which is that, even if you have only 60 readers, it pays to spend an hour if by doing so you can save your average reader a minute. By inventing an idealized ëaverage readerí, we could translate most of the lofty, human goal of politeness into more or less formal criteria we could apply to our texts. This note is devoted to the resulting notational and stylistic conventions that were adopted as the years went by. We don't want to baffle or puzzle our reader, in particular it should be clear what has to be done to check our argument and it should be possible to do so without pencil and paper. This dictates small, explicit steps. On the other hand it is well known that brevity is the leading characteristic of mathematical elegance, and some fear that this ideal excludes the small, explicit steps, but one of the joys of my professional life has been the discovery that this fear is unfounded, for brevity can be achieved without committing the sin of omission. I should point out that my ideal of crisp clarity is not universally shared. Some consider the puzzles that are created by their omissions as spicy challenges, without which their texts would be boring; others shun clarity lest their work is considered trivial.
"
2001,The end of computing science?,"I would therefore like to posit that computingís central challenge, ìHow not to make a mess of it,î has not been met. On the contrary, most of our systems are much more complicated than can be considered healthy, and are too messy and chaotic to be used in comfort and confidence. The average customer of the computing industry has been served so poorly that he expects his system to crash all the time, and we witness a massive worldwide distribution of bug-ridden software for which we should be deeply ashamed. For us scientists it is very tempting to blame the lack of education of the average engineer, the shortsightedness of the managers, and the malice of the entrepreneurs for this sorry state of affairs, but that wonít do. You see, while we all know that unmastered complexity is at the root of the misery, we do not know what degree of simplicity can be obtained, nor to what extent the intrinsic complexity of the whole design has to show up in the interfaces. We simply do not know yet the limits of disentanglement. We do not know yet whether intrinsic intricacy can be distinguished from accidental intricacy. We do not know yet whether trade-offs will be possible. We do not know yet whether we can invent a meaningful concept for intracacy about which we can prove theorems that help. To put it bluntly, we simply do not know yet what we should be talking about, but that should not worry us, for it just illustrates what was meant by ìintangible goals and uncertain rewards.î And this was only an example. The moral is that whether computing science is finished will primarily depend on our courage and our imagination.†"
2001,Under the spell of Leibniz's dream.,n/a
2001,Designing a Calculational Proof of Cantor's Theorem.,n/a
2000,On the transitive closure of a wellfounded relation.,n/a
1996,Fibonacci and the greatest common divisor.,n/a
1996,The balance and the coins.,n/a
1996,Bulterman's theorem on shortest trees.,n/a
1996,A prime is in at most 1 way the sum of 2 squares.,n/a
1996,A bagatelle on Euclid's algorithm.,n/a
1996,On two equations that have the same extreme solution.,n/a
1996,An alternative of the ETAC to EWD1163.,n/a
1996,"The argument about the arithmetic mean and the geometric mean, heuristics included.",n/a
1995,Heuristics for a Calculational Proof.,"Using a small, yet sufficiently sophisticated example, we show the heuristics that lead to a compact and clear solution. An implicit message is that the calculational style has the advantage that the formalism used provides major heuristic guidance for the design of the proof.
"
1992,On the Economy of doing Mathematics.,n/a
1992,The Unification of Three Calculi.,"Abstract
The purpose of this note is to show how much the predicate calculus, the relational calculus, and the regularity calculus have in common, or, more precisely, how much commonality we can design into them. Because the predicate calculus will emerge as a subcalculus of the other two calculi, we discuss the predicate calculus first."
1990,Making a Fair Roulette From a Possibly Biased Coin.,"Given a biased coin which shows,when flipped, head or tail with probabilities p and q respectively,with p+q=1 but not necessarily p=q,the values of p and q are unknown.We only know that the coin remains the same,i.e.,that p and q are constant in time.The problem is to design an experiment with 37 different outcomes of equal probability. "
1989,The Linear Search Revisited.,n/a
1988,On Binary Operators and Their Derived Relations.,n/a
1987,A Heuristic Explanation of Batcher's Baffler.,"Batcher's Baffler - so named by David Gries - is a sorting algorithm that is of interested because many of its ""comparison swaps"" can be executed concurrently. It is also of interest because if used to be hard to explain. This note explains Batcher's Baffler by designing it. Besides including all heuristics, it has two distinguishing features, both contributing to its clarity and brevity: (0) the (little) theory the algorithm relies upon is dealt with in isolation; (1) by suitable abstractions, all case analyses have been removed from the argument."
1986,A Simple Fixpoint Argument Without the Restriction to Continuity.,"Summary
In programming language semantics, the introduction of unbounded nondeterminacy, which amounts to the introduction of noncontinuous predicate transformers, is needed for dealing with such concepts as fair interleaving. With the semantics of the repetition given as the strongest solution of a fixpoint equation, the weakest precondition expressed in closed form would then require transfinite ordinals. Here, however, it is shown that, even in the case of unbounded nondeterminacy, the fundamental theorem about the repetition can be proved by a simple and quite elementary argument."
1986,A Belated Proof of Self-Stabilization.,n/a
1983,Solutions of a Problem in Concurrent Programming Control (Reprint).,A number of mainly independent sequential-cyclic processes with restricted means of communication with each other can be made in such a way that at any moment one and only one of them is engaged in the ‚Äúcritical section‚Äù of its cycle.
1983,"The Structure of ""THE""-Multiprogramming System (Reprint).","A multiprogramming system is described in which all activities are divided over a number of sequential processes. These sequential processes are placed at various hierarchical levels, in each of which one or more independent abstractions have been implemented. The hierarchical structure proved to be vital for the verification of the logical soundness of the design and the correctness of its implementation."
1983,Derivation of a Termination Detection Algorithm for Distributed Computations.,n/a
1983,The fruits of misunderstanding.,n/a
1982,An Introduction to Three Algorithms for Sorting in Situ.,"The purpose of this paper is to give a crisp introduction to three algorithms for sorting in situ, viz. insertion sort, heapsort and smoothsort. The more complicated the algorithm, the more elaborate the justification for the design decisions embodied by it. In passing we offer a style for the presentation of non-trivial algorithms that seems to have its merits.
"
1982,"Smoothsort, an Alternative for Sorting In Situ.","Like heapsort - which inspired it - smoothsort is an algorithm for sorting in situ. It is of order N ∑ log N in the worst case, but of order N in the best case, with a smooth transition between the two. (Hence its name.)
"
1982,How do we tell truths that might hurt?,n/a
1980,Some Beautiful Arguments Using Mathematical Induction.,"These elegant proofs and an efficient algorithm are derived. The derivations evolve smoothly from the choice to apply mathematical induction, the pattern of reasoning that has been chosen as the ""Leitmotif"" for this small collection. The last proof is the by-product of the algorithm."
1980,Termination Detection for Diffusing Computations.,"The activity of a finite computation may propagate over a network of machines, when machines may delegate (repeatedly) subtasks to their neighbours; when such a computation is fixed from a single machine, we call it ""a diffusing computation"". We present a signalling scheme - to be superimposed on the diffusing computation - enabling the machine that fired it to detect its termination. Our signalling scheme is perfectly general in the sense that, independently of the topology of the network, it is applicable to any diffusing computation."
1979,Software Engineering : As It Should Be.,n/a
1978,On-the-Fly Garbage Collection: An Exercise in Cooperation.,"As an example of cooperation between sequential processes with very little mutual interference despite frequent manipulations of a large shared data space, a technique is developed which allows nearly all of the activity needed for garbage detection and collection to be performed by an additional processor operating concurrently with the processor devoted to the computation proper. Exclusion and synchronization constraints have been kept as weak as could be achieved; the severe complexities engendered by doing so are illustrated."
1978,Finding the Correctness Proof of a Concurrent Program.,n/a
1978,A More Formal Treatment of a Less Simple Example.,n/a
1978,Stationary Behaviour of Some Ternary Networks.,n/a
1978,Finding the Correctness Proof of a Concurrent Program.,n/a
1978,On the Interplay between Mathematics and Programming.,n/a
1978,A Theorem about Odd Powers of Odd Integers.,n/a
1978,In Honour of Fibonacci.,n/a
1978,"On the Foolishness of ""Natural Language Programming"".",n/a
1978,Program Inversion.,n/a
1977,Programming: From Craft to Scientific Discipline.,"In response to the software crisis and to the lack of clear guidance in the design of programming languages, ""programming methodology"" emerged in the second half of the sixties, with the avowed purpose of discovering what would be involved in the design of sizeable high-quality programs. The recognition that high-quality implied correctness and that correctness could be proved in theory and might be provable in practice then became a major driving force. The proper roles of intuition and of formal discipline were reassessed, thereby reshaping the nature of the programmer's task and his way of working. After a general survey of this development and an indication of its significance, some of its consequences will be discussed, because it is certain to have great impact upon our educational practices in computing science and software engineering, on the constitution of our work force, on the division of intellectual labour and on the management of software development projects."
1976,On a Gauntlet Thrown by David Gries.,"Summary
It is requested to design a program that will generate the N! permutations of the values from 0 through N ‚Äî 1 in such an order that the transition from one permutation to the next is always performed by exactly one swap of two neighbours."
1976,Formal Techniques and Sizeable Programs.,n/a
1976,The Effective Arrangement of Logical Systems.,n/a
1975,"Guarded Commands, Nondeterminacy and Formal Derivation of Programs.","So-called guarded commands are introduced as a building block for alternative and repetitive constructs that allow nondeterministic program components for which at least the activity evoked, but possibly even the final state, is not necessarily uniquely determined by the initial state. For the formal derivation of programs expressed in terms of these constructs, a calculus will be be shown."
1975,"On the teaching of programming, i. e. on the teaching of thinking.",n/a
1975,On-the-fly garbage collection: an exercise in cooperation.,"Abstract
A technique is presented which allows nearly all of the garbage detection and collection activity to be performed by an additional processor, operating concurrently with the processor carrying out the computation proper. Exclusion and synchronization contraints between the processors have been kept weak."
1975,"Guarded commands, non-determinancy and a calculus for the derivation of programs.","Abstract
So-called ""guarded commands"" are introduced as a building block for alternative and repetitive constructs that allow non-deterministic program components for which at least the activity evoked, but possibly even the final state, is not necessarily uniquely determined by the initial state. For the formal derivation of programs expressed in terms of these constructs, a calculus will be shown."
1975,A time-wise hierarchy imposed upon the use of a two-level store.,"Abstract
Following general design principles a paging system has been developed in which has been aimed at high efficiency and a strong separation between store management and processor scheduling and a minimal influence of the program mix upon the system's performance. It is, furthermore, described how some dedicated hardware can be expected to contribute effectivel to memory management and the prevention of thrashing. Finally, the properties of the system should be such that a mismatch between configuration and workload gives a clear indication as to what reconfigurations seem indicated."
1975,Craftsman or Scientist.,n/a
1974,Self-stabilizing Systems in Spite of Distributed Control.,"The synchronization task between loosely coupled cyclic sequential processes (as can be distinguished in, for instance, operating systems) can be viewed as keeping the relation ‚Äúthe system is in a legitimate state‚Äù invariant. As a result, each individual process step that could possibly cause violation of that relation has to be preceded by a test deciding whether the process in question is allowed to proceed or has to be delayed. The resulting design is readily‚Äîand quite systematically‚Äîimplemented if the different processes can be granted mutually exclusive access to a common store in which ‚Äúthe current system state‚Äù is recorded."
1972,The Humble Programmer.,
1972,Information Streams Sharing a Finite Buffer.,n/a
1972,A class of allocation strategies inducing bounded delays only.,"We consider a finite set of persons, say numbered from 1 through M, whose never ending life consists of an alternation of eating and thinking, i.e., (in the first instance) they all behave according to the program cycle begin eat; think end."
1971,Hierarchical Ordering of Sequential Processes.,"Summary
One of the primary functions of an operating system is to rebuild a machine that must be regarded as non-deterministic (on account of cycle stealing and interrupts) into a more or less deterministic automaton. Taming the degree of indeterminacy in steps will lead to a layered operating system. A bottom layer will be discussed and so will the adequacy of the interface it presents. An analysis of the requirements of the correctness proofs will give us an insight into the logical issues at hand. A ‚Äúdirector-secretary‚Äù relationship will be introduced to reflect a possible discipline in the use of sequencing primitives."
1968,"The Structure of ""THE""-Multiprogramming System.","A multiprogramming system is described in which all activities are divided over a number of sequential processes. These sequential processes are placed at various hierarchical levels, in each of which one or more independent abstractions have been implemented. The hierarchical structure proved to be vital for the verification of the logical soundness of the design and the correctness of its implementation.†"
1965,Solution of a problem in concurrent programming control.,"A number of mainly independent sequential-cyclic processes with restricted means of communication with each other can be made in such a way that at any moment one and only one of them is engaged in the ""critical section"" of its cycle.†"
1964,Some comments on the aims of MIRFAC.,
1962,Operating Experience with ALGOL 60.,n/a
1962,Some Meditations on Advanced Programming.,n/a
1959,ALGOL Sub-Committee Report - Extensions.,n/a
1959,A note on two problems in connexion with graphs.,n/a
